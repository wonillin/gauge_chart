/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/core-js/es/array/find.js":
/*!***************************************************!*\
  !*** ../../node_modules/core-js/es/array/find.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.array.find */ "../../node_modules/core-js/modules/es.array.find.js");
var entryUnbind = __webpack_require__(/*! ../../internals/entry-unbind */ "../../node_modules/core-js/internals/entry-unbind.js");

module.exports = entryUnbind('Array', 'find');


/***/ }),

/***/ "../../node_modules/core-js/es/array/from.js":
/*!***************************************************!*\
  !*** ../../node_modules/core-js/es/array/from.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.string.iterator */ "../../node_modules/core-js/modules/es.string.iterator.js");
__webpack_require__(/*! ../../modules/es.array.from */ "../../node_modules/core-js/modules/es.array.from.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Array.from;


/***/ }),

/***/ "../../node_modules/core-js/es/map/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/core-js/es/map/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.array.iterator */ "../../node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! ../../modules/es.map */ "../../node_modules/core-js/modules/es.map.js");
__webpack_require__(/*! ../../modules/es.object.to-string */ "../../node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! ../../modules/es.string.iterator */ "../../node_modules/core-js/modules/es.string.iterator.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Map;


/***/ }),

/***/ "../../node_modules/core-js/es/number/is-integer.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/es/number/is-integer.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.is-integer */ "../../node_modules/core-js/modules/es.number.is-integer.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.isInteger;


/***/ }),

/***/ "../../node_modules/core-js/es/number/is-nan.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/es/number/is-nan.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.is-nan */ "../../node_modules/core-js/modules/es.number.is-nan.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.isNaN;


/***/ }),

/***/ "../../node_modules/core-js/es/number/parse-float.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/es/number/parse-float.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.parse-float */ "../../node_modules/core-js/modules/es.number.parse-float.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.parseFloat;


/***/ }),

/***/ "../../node_modules/core-js/es/number/parse-int.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/es/number/parse-int.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.parse-int */ "../../node_modules/core-js/modules/es.number.parse-int.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.parseInt;


/***/ }),

/***/ "../../node_modules/core-js/es/object/assign.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/es/object/assign.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.object.assign */ "../../node_modules/core-js/modules/es.object.assign.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Object.assign;


/***/ }),

/***/ "../../node_modules/core-js/es/object/entries.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/es/object/entries.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.object.entries */ "../../node_modules/core-js/modules/es.object.entries.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Object.entries;


/***/ }),

/***/ "../../node_modules/core-js/es/object/set-prototype-of.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/es/object/set-prototype-of.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.object.set-prototype-of */ "../../node_modules/core-js/modules/es.object.set-prototype-of.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Object.setPrototypeOf;


/***/ }),

/***/ "../../node_modules/core-js/es/promise/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/es/promise/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.aggregate-error */ "../../node_modules/core-js/modules/es.aggregate-error.js");
__webpack_require__(/*! ../../modules/es.array.iterator */ "../../node_modules/core-js/modules/es.array.iterator.js");
__webpack_require__(/*! ../../modules/es.object.to-string */ "../../node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! ../../modules/es.promise */ "../../node_modules/core-js/modules/es.promise.js");
__webpack_require__(/*! ../../modules/es.promise.all-settled */ "../../node_modules/core-js/modules/es.promise.all-settled.js");
__webpack_require__(/*! ../../modules/es.promise.any */ "../../node_modules/core-js/modules/es.promise.any.js");
__webpack_require__(/*! ../../modules/es.promise.finally */ "../../node_modules/core-js/modules/es.promise.finally.js");
__webpack_require__(/*! ../../modules/es.string.iterator */ "../../node_modules/core-js/modules/es.string.iterator.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Promise;


/***/ }),

/***/ "../../node_modules/core-js/internals/a-callable.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/a-callable.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../node_modules/core-js/internals/try-to-string.js");

var TypeError = global.TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/a-constructor.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/a-constructor.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "../../node_modules/core-js/internals/is-constructor.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../node_modules/core-js/internals/try-to-string.js");

var TypeError = global.TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/a-possible-prototype.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/a-possible-prototype.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

var String = global.String;
var TypeError = global.TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw TypeError("Can't set " + String(argument) + ' as a prototype');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/add-to-unscopables.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/internals/add-to-unscopables.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var create = __webpack_require__(/*! ../internals/object-create */ "../../node_modules/core-js/internals/object-create.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/an-instance.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/an-instance.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../node_modules/core-js/internals/object-is-prototype-of.js");

var TypeError = global.TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw TypeError('Incorrect invocation');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/an-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/an-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var String = global.String;
var TypeError = global.TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-from.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/array-from.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");
var callWithSafeIterationClosing = __webpack_require__(/*! ../internals/call-with-safe-iteration-closing */ "../../node_modules/core-js/internals/call-with-safe-iteration-closing.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "../../node_modules/core-js/internals/is-array-iterator-method.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "../../node_modules/core-js/internals/is-constructor.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../node_modules/core-js/internals/length-of-array-like.js");
var createProperty = __webpack_require__(/*! ../internals/create-property */ "../../node_modules/core-js/internals/create-property.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "../../node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "../../node_modules/core-js/internals/get-iterator-method.js");

var Array = global.Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-includes.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/array-includes.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "../../node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-iteration.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/array-iteration.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../node_modules/core-js/internals/indexed-object.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../node_modules/core-js/internals/length-of-array-like.js");
var arraySpeciesCreate = __webpack_require__(/*! ../internals/array-species-create */ "../../node_modules/core-js/internals/array-species-create.js");

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-slice.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/array-slice.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis([].slice);


/***/ }),

/***/ "../../node_modules/core-js/internals/array-species-constructor.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/core-js/internals/array-species-constructor.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isArray = __webpack_require__(/*! ../internals/is-array */ "../../node_modules/core-js/internals/is-array.js");
var isConstructor = __webpack_require__(/*! ../internals/is-constructor */ "../../node_modules/core-js/internals/is-constructor.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');
var Array = global.Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-species-create.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/array-species-create.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arraySpeciesConstructor = __webpack_require__(/*! ../internals/array-species-constructor */ "../../node_modules/core-js/internals/array-species-constructor.js");

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/call-with-safe-iteration-closing.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/core-js/internals/call-with-safe-iteration-closing.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "../../node_modules/core-js/internals/iterator-close.js");

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/classof-raw.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/classof-raw.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/classof.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/internals/classof.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "../../node_modules/core-js/internals/to-string-tag-support.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var classofRaw = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var Object = global.Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/clear-error-stack.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/clear-error-stack.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "../../node_modules/core-js/internals/array-slice.js");

var replace = uncurryThis(''.replace);
var split = uncurryThis(''.split);
var join = uncurryThis([].join);

var TEST = (function (arg) { return String(Error(arg).stack); })('zxcasd');
var V8_OR_CHAKRA_STACK_ENTRY = /\n\s*at [^:]*:[^\n]*/;
var IS_V8_OR_CHAKRA_STACK = V8_OR_CHAKRA_STACK_ENTRY.test(TEST);
var IS_FIREFOX_OR_SAFARI_STACK = /@[^\n]*\n/.test(TEST) && !/zxcasd/.test(TEST);

module.exports = function (stack, dropEntries) {
  if (typeof stack != 'string') return stack;
  if (IS_V8_OR_CHAKRA_STACK) {
    while (dropEntries--) stack = replace(stack, V8_OR_CHAKRA_STACK_ENTRY, '');
  } else if (IS_FIREFOX_OR_SAFARI_STACK) {
    return join(arraySlice(split(stack, '\n'), dropEntries), '\n');
  } return stack;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/collection-strong.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/collection-strong.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js").f);
var create = __webpack_require__(/*! ../internals/object-create */ "../../node_modules/core-js/internals/object-create.js");
var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "../../node_modules/core-js/internals/redefine-all.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "../../node_modules/core-js/internals/an-instance.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "../../node_modules/core-js/internals/define-iterator.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "../../node_modules/core-js/internals/set-species.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var fastKey = (__webpack_require__(/*! ../internals/internal-metadata */ "../../node_modules/core-js/internals/internal-metadata.js").fastKey);
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(Prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/collection.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/collection.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "../../node_modules/core-js/internals/is-forced.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var InternalMetadataModule = __webpack_require__(/*! ../internals/internal-metadata */ "../../node_modules/core-js/internals/internal-metadata.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "../../node_modules/core-js/internals/an-instance.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "../../node_modules/core-js/internals/check-correctness-of-iteration.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "../../node_modules/core-js/internals/set-to-string-tag.js");
var inheritIfRequired = __webpack_require__(/*! ../internals/inherit-if-required */ "../../node_modules/core-js/internals/inherit-if-required.js");

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        uncurriedNativeMethod(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  var REPLACE = isForced(
    CONSTRUCTOR_NAME,
    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    }))
  );

  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, NativePrototype);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/copy-constructor-properties.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "../../node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/correct-prototype-getter.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/internals/correct-prototype-getter.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/create-iterator-constructor.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-iterator-constructor.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var IteratorPrototype = (__webpack_require__(/*! ../internals/iterators-core */ "../../node_modules/core-js/internals/iterators-core.js").IteratorPrototype);
var create = __webpack_require__(/*! ../internals/object-create */ "../../node_modules/core-js/internals/object-create.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "../../node_modules/core-js/internals/set-to-string-tag.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "../../node_modules/core-js/internals/iterators.js");

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/create-non-enumerable-property.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/create-property-descriptor.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-property-descriptor.js ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "../../node_modules/core-js/internals/create-property.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-property.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../node_modules/core-js/internals/to-property-key.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/define-iterator.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/define-iterator.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");
var FunctionName = __webpack_require__(/*! ../internals/function-name */ "../../node_modules/core-js/internals/function-name.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var createIteratorConstructor = __webpack_require__(/*! ../internals/create-iterator-constructor */ "../../node_modules/core-js/internals/create-iterator-constructor.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "../../node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "../../node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "../../node_modules/core-js/internals/set-to-string-tag.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "../../node_modules/core-js/internals/iterators.js");
var IteratorsCore = __webpack_require__(/*! ../internals/iterators-core */ "../../node_modules/core-js/internals/iterators-core.js");

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/descriptors.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/descriptors.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/document-create-element.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/core-js/internals/document-create-element.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-is-browser.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-is-browser.js ***!
  \*****************************************************************/
/***/ ((module) => {

module.exports = typeof window == 'object';


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-is-ios-pebble.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-is-ios-pebble.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../node_modules/core-js/internals/engine-user-agent.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = /ipad|iphone|ipod/i.test(userAgent) && global.Pebble !== undefined;


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-is-ios.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-is-ios.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../node_modules/core-js/internals/engine-user-agent.js");

module.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-is-node.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-is-node.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = classof(global.process) == 'process';


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-is-webos-webkit.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-is-webos-webkit.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../node_modules/core-js/internals/engine-user-agent.js");

module.exports = /web0s(?!.*chrome)/i.test(userAgent);


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-user-agent.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-user-agent.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-v8-version.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-v8-version.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "../../node_modules/core-js/internals/entry-unbind.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/entry-unbind.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

module.exports = function (CONSTRUCTOR, METHOD) {
  return uncurryThis(global[CONSTRUCTOR].prototype[METHOD]);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/enum-bug-keys.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/enum-bug-keys.js ***!
  \*************************************************************/
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "../../node_modules/core-js/internals/error-stack-installable.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/core-js/internals/error-stack-installable.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");

module.exports = !fails(function () {
  var error = Error('a');
  if (!('stack' in error)) return true;
  // eslint-disable-next-line es/no-object-defineproperty -- safe
  Object.defineProperty(error, 'stack', createPropertyDescriptor(1, 7));
  return error.stack !== 7;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/export.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/export.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "../../node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "../../node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/fails.js":
/*!*****************************************************!*\
  !*** ../../node_modules/core-js/internals/fails.js ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/freezing.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/freezing.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),

/***/ "../../node_modules/core-js/internals/function-apply.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-apply.js ***!
  \**************************************************************/
/***/ ((module) => {

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (bind ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),

/***/ "../../node_modules/core-js/internals/function-bind-context.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-bind-context.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : bind ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-call.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-call.js ***!
  \*************************************************************/
/***/ ((module) => {

var call = Function.prototype.call;

module.exports = call.bind ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-name.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-name.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-uncurry-this.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-uncurry-this.js ***!
  \*********************************************************************/
/***/ ((module) => {

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var callBind = bind && bind.bind(call);

module.exports = bind ? function (fn) {
  return fn && callBind(call, fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-built-in.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/get-built-in.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-iterator-method.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/core-js/internals/get-iterator-method.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof */ "../../node_modules/core-js/internals/classof.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "../../node_modules/core-js/internals/get-method.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "../../node_modules/core-js/internals/iterators.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-iterator.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/get-iterator.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../node_modules/core-js/internals/try-to-string.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "../../node_modules/core-js/internals/get-iterator-method.js");

var TypeError = global.TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-method.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/get-method.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/global.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/global.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "../../node_modules/core-js/internals/has-own-property.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/internals/has-own-property.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/hidden-keys.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/hidden-keys.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "../../node_modules/core-js/internals/host-report-errors.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/internals/host-report-errors.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = function (a, b) {
  var console = global.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/html.js":
/*!****************************************************!*\
  !*** ../../node_modules/core-js/internals/html.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),

/***/ "../../node_modules/core-js/internals/ie8-dom-define.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/ie8-dom-define.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "../../node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/indexed-object.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/indexed-object.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");

var Object = global.Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "../../node_modules/core-js/internals/inherit-if-required.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/core-js/internals/inherit-if-required.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "../../node_modules/core-js/internals/object-set-prototype-of.js");

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/inspect-source.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/inspect-source.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "../../node_modules/core-js/internals/install-error-cause.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/core-js/internals/install-error-cause.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");

// `InstallErrorCause` abstract operation
// https://tc39.es/proposal-error-cause/#sec-errorobjects-install-error-cause
module.exports = function (O, options) {
  if (isObject(options) && 'cause' in options) {
    createNonEnumerableProperty(O, 'cause', options.cause);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/internal-metadata.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/internal-metadata.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js").f);
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "../../node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertyNamesExternalModule = __webpack_require__(/*! ../internals/object-get-own-property-names-external */ "../../node_modules/core-js/internals/object-get-own-property-names-external.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../node_modules/core-js/internals/uid.js");
var FREEZING = __webpack_require__(/*! ../internals/freezing */ "../../node_modules/core-js/internals/freezing.js");

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

// eslint-disable-next-line es/no-object-isextensible -- safe
var isExtensible = Object.isExtensible || function () {
  return true;
};

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),

/***/ "../../node_modules/core-js/internals/internal-state.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/internal-state.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "../../node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-array-iterator-method.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/internals/is-array-iterator-method.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "../../node_modules/core-js/internals/iterators.js");

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-array.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-array.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-callable.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-callable.js ***!
  \***********************************************************/
/***/ ((module) => {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-constructor.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/is-constructor.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var classof = __webpack_require__(/*! ../internals/classof */ "../../node_modules/core-js/internals/classof.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function (argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function (argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
    // we can't check .prototype since constructors produced by .bind haven't it
  } return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
};

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),

/***/ "../../node_modules/core-js/internals/is-forced.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-forced.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "../../node_modules/core-js/internals/is-integral-number.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/internals/is-integral-number.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-pure.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/internals/is-pure.js ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = false;


/***/ }),

/***/ "../../node_modules/core-js/internals/is-symbol.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-symbol.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../node_modules/core-js/internals/use-symbol-as-uid.js");

var Object = global.Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/iterate.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/internals/iterate.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../node_modules/core-js/internals/try-to-string.js");
var isArrayIteratorMethod = __webpack_require__(/*! ../internals/is-array-iterator-method */ "../../node_modules/core-js/internals/is-array-iterator-method.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../node_modules/core-js/internals/length-of-array-like.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../node_modules/core-js/internals/object-is-prototype-of.js");
var getIterator = __webpack_require__(/*! ../internals/get-iterator */ "../../node_modules/core-js/internals/get-iterator.js");
var getIteratorMethod = __webpack_require__(/*! ../internals/get-iterator-method */ "../../node_modules/core-js/internals/get-iterator-method.js");
var iteratorClose = __webpack_require__(/*! ../internals/iterator-close */ "../../node_modules/core-js/internals/iterator-close.js");

var TypeError = global.TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/iterator-close.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/iterator-close.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "../../node_modules/core-js/internals/get-method.js");

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/iterators-core.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/iterators-core.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var create = __webpack_require__(/*! ../internals/object-create */ "../../node_modules/core-js/internals/object-create.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "../../node_modules/core-js/internals/object-get-prototype-of.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  redefine(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),

/***/ "../../node_modules/core-js/internals/iterators.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/iterators.js ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "../../node_modules/core-js/internals/length-of-array-like.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/length-of-array-like.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(/*! ../internals/to-length */ "../../node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/microtask.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/microtask.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var getOwnPropertyDescriptor = (__webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js").f);
var macrotask = (__webpack_require__(/*! ../internals/task */ "../../node_modules/core-js/internals/task.js").set);
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "../../node_modules/core-js/internals/engine-is-ios.js");
var IS_IOS_PEBBLE = __webpack_require__(/*! ../internals/engine-is-ios-pebble */ "../../node_modules/core-js/internals/engine-is-ios-pebble.js");
var IS_WEBOS_WEBKIT = __webpack_require__(/*! ../internals/engine-is-webos-webkit */ "../../node_modules/core-js/internals/engine-is-webos-webkit.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "../../node_modules/core-js/internals/engine-is-node.js");

var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
var document = global.document;
var process = global.process;
var Promise = global.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE && (parent = process.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
    toggle = true;
    node = document.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise && Promise.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise;
    then = bind(promise.then, promise);
    notify = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE) {
    notify = function () {
      process.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind(macrotask, global);
    notify = function () {
      macrotask(flush);
    };
  }
}

module.exports = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify();
  } last = task;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/native-promise-constructor.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/core-js/internals/native-promise-constructor.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = global.Promise;


/***/ }),

/***/ "../../node_modules/core-js/internals/native-symbol.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/native-symbol.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "../../node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/native-weak-map.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/native-weak-map.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "../../node_modules/core-js/internals/new-promise-capability.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/new-promise-capability.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable(resolve);
  this.reject = aCallable(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
module.exports.f = function (C) {
  return new PromiseCapability(C);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/normalize-string-argument.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/core-js/internals/normalize-string-argument.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");

module.exports = function (argument, $default) {
  return argument === undefined ? arguments.length < 2 ? '' : $default : toString(argument);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/number-parse-float.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/internals/number-parse-float.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");
var trim = (__webpack_require__(/*! ../internals/string-trim */ "../../node_modules/core-js/internals/string-trim.js").trim);
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "../../node_modules/core-js/internals/whitespaces.js");

var charAt = uncurryThis(''.charAt);
var n$ParseFloat = global.parseFloat;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var FORCED = 1 / n$ParseFloat(whitespaces + '-0') !== -Infinity
  // MS Edge 18- broken with boxed symbols
  || (ITERATOR && !fails(function () { n$ParseFloat(Object(ITERATOR)); }));

// `parseFloat` method
// https://tc39.es/ecma262/#sec-parsefloat-string
module.exports = FORCED ? function parseFloat(string) {
  var trimmedString = trim(toString(string));
  var result = n$ParseFloat(trimmedString);
  return result === 0 && charAt(trimmedString, 0) == '-' ? -0 : result;
} : n$ParseFloat;


/***/ }),

/***/ "../../node_modules/core-js/internals/number-parse-int.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/internals/number-parse-int.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");
var trim = (__webpack_require__(/*! ../internals/string-trim */ "../../node_modules/core-js/internals/string-trim.js").trim);
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "../../node_modules/core-js/internals/whitespaces.js");

var $parseInt = global.parseInt;
var Symbol = global.Symbol;
var ITERATOR = Symbol && Symbol.iterator;
var hex = /^[+-]?0x/i;
var exec = uncurryThis(hex.exec);
var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22
  // MS Edge 18- broken with boxed symbols
  || (ITERATOR && !fails(function () { $parseInt(Object(ITERATOR)); }));

// `parseInt` method
// https://tc39.es/ecma262/#sec-parseint-string-radix
module.exports = FORCED ? function parseInt(string, radix) {
  var S = trim(toString(string));
  return $parseInt(S, (radix >>> 0) || (exec(hex, S) ? 16 : 10));
} : $parseInt;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-assign.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-assign.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "../../node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "../../node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../node_modules/core-js/internals/object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../node_modules/core-js/internals/indexed-object.js");

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-create.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-create.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var defineProperties = __webpack_require__(/*! ../internals/object-define-properties */ "../../node_modules/core-js/internals/object-define-properties.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../node_modules/core-js/internals/enum-bug-keys.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");
var html = __webpack_require__(/*! ../internals/html */ "../../node_modules/core-js/internals/html.js");
var documentCreateElement = __webpack_require__(/*! ../internals/document-create-element */ "../../node_modules/core-js/internals/document-create-element.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../node_modules/core-js/internals/shared-key.js");

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : defineProperties(result, Properties);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-define-properties.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-define-properties.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "../../node_modules/core-js/internals/object-keys.js");

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-define-property.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-define-property.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../node_modules/core-js/internals/to-property-key.js");

var TypeError = global.TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-names-external.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-names-external.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-object-getownpropertynames -- safe */
var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var $getOwnPropertyNames = (__webpack_require__(/*! ../internals/object-get-own-property-names */ "../../node_modules/core-js/internals/object-get-own-property-names.js").f);
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "../../node_modules/core-js/internals/array-slice.js");

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-names.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-prototype-of.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-prototype-of.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../node_modules/core-js/internals/shared-key.js");
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(/*! ../internals/correct-prototype-getter */ "../../node_modules/core-js/internals/correct-prototype-getter.js");

var IE_PROTO = sharedKey('IE_PROTO');
var Object = global.Object;
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof Object ? ObjectPrototype : null;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-is-prototype-of.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-is-prototype-of.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "../../node_modules/core-js/internals/object-keys-internal.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-keys-internal.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var indexOf = (__webpack_require__(/*! ../internals/array-includes */ "../../node_modules/core-js/internals/array-includes.js").indexOf);
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-keys.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/object-keys.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-set-prototype-of.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-set-prototype-of.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var aPossiblePrototype = __webpack_require__(/*! ../internals/a-possible-prototype */ "../../node_modules/core-js/internals/a-possible-prototype.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),

/***/ "../../node_modules/core-js/internals/object-to-array.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-to-array.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "../../node_modules/core-js/internals/object-keys.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var $propertyIsEnumerable = (__webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../node_modules/core-js/internals/object-property-is-enumerable.js").f);

var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
var push = uncurryThis([].push);

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-to-string.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-to-string.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "../../node_modules/core-js/internals/to-string-tag-support.js");
var classof = __webpack_require__(/*! ../internals/classof */ "../../node_modules/core-js/internals/classof.js");

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var TypeError = global.TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "../../node_modules/core-js/internals/own-keys.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/own-keys.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "../../node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "../../node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/path.js":
/*!****************************************************!*\
  !*** ../../node_modules/core-js/internals/path.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = global;


/***/ }),

/***/ "../../node_modules/core-js/internals/perform.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/internals/perform.js ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/promise-resolve.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/promise-resolve.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var newPromiseCapability = __webpack_require__(/*! ../internals/new-promise-capability */ "../../node_modules/core-js/internals/new-promise-capability.js");

module.exports = function (C, x) {
  anObject(C);
  if (isObject(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/redefine-all.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/redefine-all.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/redefine.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/redefine.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");
var CONFIGURABLE_FUNCTION_NAME = (__webpack_require__(/*! ../internals/function-name */ "../../node_modules/core-js/internals/function-name.js").CONFIGURABLE);

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var name = options && options.name !== undefined ? options.name : key;
  var state;
  if (isCallable(value)) {
    if (String(name).slice(0, 7) === 'Symbol(') {
      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
    }
    if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
      createNonEnumerableProperty(value, 'name', name);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "../../node_modules/core-js/internals/require-object-coercible.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/internals/require-object-coercible.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

var TypeError = global.TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/set-global.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/set-global.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/set-species.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/set-species.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/set-to-string-tag.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/set-to-string-tag.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = (__webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js").f);
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !hasOwn(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/shared-key.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/shared-key.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../internals/shared */ "../../node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/shared-store.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/shared-store.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "../../node_modules/core-js/internals/shared.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/shared.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.19.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "../../node_modules/core-js/internals/species-constructor.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/core-js/internals/species-constructor.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var aConstructor = __webpack_require__(/*! ../internals/a-constructor */ "../../node_modules/core-js/internals/a-constructor.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/string-multibyte.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/internals/string-multibyte.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../node_modules/core-js/internals/to-integer-or-infinity.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/string-trim.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/string-trim.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");
var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");
var whitespaces = __webpack_require__(/*! ../internals/whitespaces */ "../../node_modules/core-js/internals/whitespaces.js");

var replace = uncurryThis(''.replace);
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/task.js":
/*!****************************************************!*\
  !*** ../../node_modules/core-js/internals/task.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var apply = __webpack_require__(/*! ../internals/function-apply */ "../../node_modules/core-js/internals/function-apply.js");
var bind = __webpack_require__(/*! ../internals/function-bind-context */ "../../node_modules/core-js/internals/function-bind-context.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var html = __webpack_require__(/*! ../internals/html */ "../../node_modules/core-js/internals/html.js");
var arraySlice = __webpack_require__(/*! ../internals/array-slice */ "../../node_modules/core-js/internals/array-slice.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "../../node_modules/core-js/internals/document-create-element.js");
var IS_IOS = __webpack_require__(/*! ../internals/engine-is-ios */ "../../node_modules/core-js/internals/engine-is-ios.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "../../node_modules/core-js/internals/engine-is-node.js");

var set = global.setImmediate;
var clear = global.clearImmediate;
var process = global.process;
var Dispatch = global.Dispatch;
var Function = global.Function;
var MessageChannel = global.MessageChannel;
var String = global.String;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global.location;
} catch (error) { /* empty */ }

var run = function (id) {
  if (hasOwn(queue, id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global.postMessage(String(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set || !clear) {
  set = function setImmediate(fn) {
    var args = arraySlice(arguments, 1);
    queue[++counter] = function () {
      apply(isCallable(fn) ? fn : Function(fn), undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (IS_NODE) {
    defer = function (id) {
      process.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global.addEventListener &&
    isCallable(global.postMessage) &&
    !global.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails(post)
  ) {
    defer = post;
    global.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

module.exports = {
  set: set,
  clear: clear
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-absolute-index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-absolute-index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-indexed-object.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-indexed-object.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-integer-or-infinity.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \**********************************************************************/
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- safe
  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-length.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/to-length.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/to-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");

var Object = global.Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-primitive.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-primitive.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "../../node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "../../node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-property-key.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-property-key.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "../../node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-string-tag-support.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-string-tag-support.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),

/***/ "../../node_modules/core-js/internals/to-string.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/to-string.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var classof = __webpack_require__(/*! ../internals/classof */ "../../node_modules/core-js/internals/classof.js");

var String = global.String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String(argument);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/try-to-string.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/try-to-string.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

var String = global.String;

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/uid.js":
/*!***************************************************!*\
  !*** ../../node_modules/core-js/internals/uid.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "../../node_modules/core-js/internals/well-known-symbol.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/well-known-symbol.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "../../node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "../../node_modules/core-js/internals/whitespaces.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/whitespaces.js ***!
  \***********************************************************/
/***/ ((module) => {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),

/***/ "../../node_modules/core-js/modules/es.aggregate-error.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.aggregate-error.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../node_modules/core-js/internals/object-is-prototype-of.js");
var getPrototypeOf = __webpack_require__(/*! ../internals/object-get-prototype-of */ "../../node_modules/core-js/internals/object-get-prototype-of.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "../../node_modules/core-js/internals/object-set-prototype-of.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "../../node_modules/core-js/internals/copy-constructor-properties.js");
var create = __webpack_require__(/*! ../internals/object-create */ "../../node_modules/core-js/internals/object-create.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");
var clearErrorStack = __webpack_require__(/*! ../internals/clear-error-stack */ "../../node_modules/core-js/internals/clear-error-stack.js");
var installErrorCause = __webpack_require__(/*! ../internals/install-error-cause */ "../../node_modules/core-js/internals/install-error-cause.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");
var normalizeStringArgument = __webpack_require__(/*! ../internals/normalize-string-argument */ "../../node_modules/core-js/internals/normalize-string-argument.js");
var ERROR_STACK_INSTALLABLE = __webpack_require__(/*! ../internals/error-stack-installable */ "../../node_modules/core-js/internals/error-stack-installable.js");

var Error = global.Error;
var push = [].push;

var $AggregateError = function AggregateError(errors, message /* , options */) {
  var that = isPrototypeOf(AggregateErrorPrototype, this) ? this : create(AggregateErrorPrototype);
  var options = arguments.length > 2 ? arguments[2] : undefined;
  if (setPrototypeOf) {
    that = setPrototypeOf(new Error(undefined), getPrototypeOf(that));
  }
  createNonEnumerableProperty(that, 'message', normalizeStringArgument(message, ''));
  if (ERROR_STACK_INSTALLABLE) createNonEnumerableProperty(that, 'stack', clearErrorStack(that.stack, 1));
  installErrorCause(that, options);
  var errorsArray = [];
  iterate(errors, push, { that: errorsArray });
  createNonEnumerableProperty(that, 'errors', errorsArray);
  return that;
};

if (setPrototypeOf) setPrototypeOf($AggregateError, Error);
else copyConstructorProperties($AggregateError, Error);

var AggregateErrorPrototype = $AggregateError.prototype = create(Error.prototype, {
  constructor: createPropertyDescriptor(1, $AggregateError),
  message: createPropertyDescriptor(1, ''),
  name: createPropertyDescriptor(1, 'AggregateError')
});

// `AggregateError` constructor
// https://tc39.es/ecma262/#sec-aggregate-error-constructor
$({ global: true }, {
  AggregateError: $AggregateError
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.array.find.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/modules/es.array.find.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var $find = (__webpack_require__(/*! ../internals/array-iteration */ "../../node_modules/core-js/internals/array-iteration.js").find);
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "../../node_modules/core-js/internals/add-to-unscopables.js");

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),

/***/ "../../node_modules/core-js/modules/es.array.from.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/modules/es.array.from.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var from = __webpack_require__(/*! ../internals/array-from */ "../../node_modules/core-js/internals/array-from.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "../../node_modules/core-js/internals/check-correctness-of-iteration.js");

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.array.iterator.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.array.iterator.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var addToUnscopables = __webpack_require__(/*! ../internals/add-to-unscopables */ "../../node_modules/core-js/internals/add-to-unscopables.js");
var Iterators = __webpack_require__(/*! ../internals/iterators */ "../../node_modules/core-js/internals/iterators.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "../../node_modules/core-js/internals/define-iterator.js");

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');


/***/ }),

/***/ "../../node_modules/core-js/modules/es.map.js":
/*!****************************************************!*\
  !*** ../../node_modules/core-js/modules/es.map.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var collection = __webpack_require__(/*! ../internals/collection */ "../../node_modules/core-js/internals/collection.js");
var collectionStrong = __webpack_require__(/*! ../internals/collection-strong */ "../../node_modules/core-js/internals/collection-strong.js");

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.is-integer.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.is-integer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var isIntegralNumber = __webpack_require__(/*! ../internals/is-integral-number */ "../../node_modules/core-js/internals/is-integral-number.js");

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isIntegralNumber
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.is-nan.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.is-nan.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");

// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return number != number;
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.parse-float.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.parse-float.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var parseFloat = __webpack_require__(/*! ../internals/number-parse-float */ "../../node_modules/core-js/internals/number-parse-float.js");

// `Number.parseFloat` method
// https://tc39.es/ecma262/#sec-number.parseFloat
// eslint-disable-next-line es/no-number-parsefloat -- required for testing
$({ target: 'Number', stat: true, forced: Number.parseFloat != parseFloat }, {
  parseFloat: parseFloat
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.parse-int.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.parse-int.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var parseInt = __webpack_require__(/*! ../internals/number-parse-int */ "../../node_modules/core-js/internals/number-parse-int.js");

// `Number.parseInt` method
// https://tc39.es/ecma262/#sec-number.parseint
// eslint-disable-next-line es/no-number-parseint -- required for testing
$({ target: 'Number', stat: true, forced: Number.parseInt != parseInt }, {
  parseInt: parseInt
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.object.assign.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.object.assign.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "../../node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.object.entries.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.object.entries.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var $entries = (__webpack_require__(/*! ../internals/object-to-array */ "../../node_modules/core-js/internals/object-to-array.js").entries);

// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.object.set-prototype-of.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.object.set-prototype-of.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "../../node_modules/core-js/internals/object-set-prototype-of.js");

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
$({ target: 'Object', stat: true }, {
  setPrototypeOf: setPrototypeOf
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.object.to-string.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.object.to-string.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var TO_STRING_TAG_SUPPORT = __webpack_require__(/*! ../internals/to-string-tag-support */ "../../node_modules/core-js/internals/to-string-tag-support.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var toString = __webpack_require__(/*! ../internals/object-to-string */ "../../node_modules/core-js/internals/object-to-string.js");

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),

/***/ "../../node_modules/core-js/modules/es.promise.all-settled.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.promise.all-settled.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "../../node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "../../node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");

// `Promise.allSettled` method
// https://tc39.es/ecma262/#sec-promise.allsettled
$({ target: 'Promise', stat: true }, {
  allSettled: function allSettled(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'fulfilled', value: value };
          --remaining || resolve(values);
        }, function (error) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = { status: 'rejected', reason: error };
          --remaining || resolve(values);
        });
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.promise.any.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.promise.any.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "../../node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "../../node_modules/core-js/internals/perform.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");

var PROMISE_ANY_ERROR = 'No one promise resolved';

// `Promise.any` method
// https://tc39.es/ecma262/#sec-promise.any
$({ target: 'Promise', stat: true }, {
  any: function any(iterable) {
    var C = this;
    var AggregateError = getBuiltIn('AggregateError');
    var capability = newPromiseCapabilityModule.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var promiseResolve = aCallable(C.resolve);
      var errors = [];
      var counter = 0;
      var remaining = 1;
      var alreadyResolved = false;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyRejected = false;
        remaining++;
        call(promiseResolve, C, promise).then(function (value) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyResolved = true;
          resolve(value);
        }, function (error) {
          if (alreadyRejected || alreadyResolved) return;
          alreadyRejected = true;
          errors[index] = error;
          --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
        });
      });
      --remaining || reject(new AggregateError(errors, PROMISE_ANY_ERROR));
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.promise.finally.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.promise.finally.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");
var NativePromise = __webpack_require__(/*! ../internals/native-promise-constructor */ "../../node_modules/core-js/internals/native-promise-constructor.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "../../node_modules/core-js/internals/species-constructor.js");
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "../../node_modules/core-js/internals/promise-resolve.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");

// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
var NON_GENERIC = !!NativePromise && fails(function () {
  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
});

// `Promise.prototype.finally` method
// https://tc39.es/ecma262/#sec-promise.prototype.finally
$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
  'finally': function (onFinally) {
    var C = speciesConstructor(this, getBuiltIn('Promise'));
    var isFunction = isCallable(onFinally);
    return this.then(
      isFunction ? function (x) {
        return promiseResolve(C, onFinally()).then(function () { return x; });
      } : onFinally,
      isFunction ? function (e) {
        return promiseResolve(C, onFinally()).then(function () { throw e; });
      } : onFinally
    );
  }
});

// makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`
if (!IS_PURE && isCallable(NativePromise)) {
  var method = getBuiltIn('Promise').prototype['finally'];
  if (NativePromise.prototype['finally'] !== method) {
    redefine(NativePromise.prototype, 'finally', method, { unsafe: true });
  }
}


/***/ }),

/***/ "../../node_modules/core-js/modules/es.promise.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/modules/es.promise.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var NativePromise = __webpack_require__(/*! ../internals/native-promise-constructor */ "../../node_modules/core-js/internals/native-promise-constructor.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var redefineAll = __webpack_require__(/*! ../internals/redefine-all */ "../../node_modules/core-js/internals/redefine-all.js");
var setPrototypeOf = __webpack_require__(/*! ../internals/object-set-prototype-of */ "../../node_modules/core-js/internals/object-set-prototype-of.js");
var setToStringTag = __webpack_require__(/*! ../internals/set-to-string-tag */ "../../node_modules/core-js/internals/set-to-string-tag.js");
var setSpecies = __webpack_require__(/*! ../internals/set-species */ "../../node_modules/core-js/internals/set-species.js");
var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var anInstance = __webpack_require__(/*! ../internals/an-instance */ "../../node_modules/core-js/internals/an-instance.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");
var iterate = __webpack_require__(/*! ../internals/iterate */ "../../node_modules/core-js/internals/iterate.js");
var checkCorrectnessOfIteration = __webpack_require__(/*! ../internals/check-correctness-of-iteration */ "../../node_modules/core-js/internals/check-correctness-of-iteration.js");
var speciesConstructor = __webpack_require__(/*! ../internals/species-constructor */ "../../node_modules/core-js/internals/species-constructor.js");
var task = (__webpack_require__(/*! ../internals/task */ "../../node_modules/core-js/internals/task.js").set);
var microtask = __webpack_require__(/*! ../internals/microtask */ "../../node_modules/core-js/internals/microtask.js");
var promiseResolve = __webpack_require__(/*! ../internals/promise-resolve */ "../../node_modules/core-js/internals/promise-resolve.js");
var hostReportErrors = __webpack_require__(/*! ../internals/host-report-errors */ "../../node_modules/core-js/internals/host-report-errors.js");
var newPromiseCapabilityModule = __webpack_require__(/*! ../internals/new-promise-capability */ "../../node_modules/core-js/internals/new-promise-capability.js");
var perform = __webpack_require__(/*! ../internals/perform */ "../../node_modules/core-js/internals/perform.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "../../node_modules/core-js/internals/is-forced.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");
var IS_BROWSER = __webpack_require__(/*! ../internals/engine-is-browser */ "../../node_modules/core-js/internals/engine-is-browser.js");
var IS_NODE = __webpack_require__(/*! ../internals/engine-is-node */ "../../node_modules/core-js/internals/engine-is-node.js");
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "../../node_modules/core-js/internals/engine-v8-version.js");

var SPECIES = wellKnownSymbol('species');
var PROMISE = 'Promise';

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
var NativePromisePrototype = NativePromise && NativePromise.prototype;
var PromiseConstructor = NativePromise;
var PromisePrototype = NativePromisePrototype;
var TypeError = global.TypeError;
var document = global.document;
var process = global.process;
var newPromiseCapability = newPromiseCapabilityModule.f;
var newGenericPromiseCapability = newPromiseCapability;

var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
var NATIVE_REJECTION_EVENT = isCallable(global.PromiseRejectionEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;
var SUBCLASSING = false;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

var FORCED = isForced(PROMISE, function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We need Promise#finally in the pure version for preventing prototype pollution
  if (IS_PURE && !PromisePrototype['finally']) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new PromiseConstructor(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
});

var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
});

// helpers
var isThenable = function (it) {
  var then;
  return isObject(it) && isCallable(then = it.then) ? then : false;
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  var chain = state.reactions;
  microtask(function () {
    var value = state.value;
    var ok = state.state == FULFILLED;
    var index = 0;
    // variable length - can't use forEach
    while (chain.length > index) {
      var reaction = chain[index++];
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then, exited;
      try {
        if (handler) {
          if (!ok) {
            if (state.rejection === UNHANDLED) onHandleUnhandled(state);
            state.rejection = HANDLED;
          }
          if (handler === true) result = value;
          else {
            if (domain) domain.enter();
            result = handler(value); // can throw
            if (domain) {
              domain.exit();
              exited = true;
            }
          }
          if (result === reaction.promise) {
            reject(TypeError('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            call(then, result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch (error) {
        if (domain && !exited) domain.exit();
        reject(error);
      }
    }
    state.reactions = [];
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform(function () {
        if (IS_NODE) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call(task, global, function () {
    var promise = state.facade;
    if (IS_NODE) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call(then, value,
            bind(internalResolve, wrapper, state),
            bind(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance(this, PromisePrototype);
    aCallable(executor);
    call(Internal, this);
    var state = getInternalState(this);
    try {
      executor(bind(internalResolve, state), bind(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };
  PromisePrototype = PromiseConstructor.prototype;
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: [],
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };
  Internal.prototype = redefineAll(PromisePrototype, {
    // `Promise.prototype.then` method
    // https://tc39.es/ecma262/#sec-promise.prototype.then
    then: function then(onFulfilled, onRejected) {
      var state = getInternalPromiseState(this);
      var reactions = state.reactions;
      var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
      reaction.ok = isCallable(onFulfilled) ? onFulfilled : true;
      reaction.fail = isCallable(onRejected) && onRejected;
      reaction.domain = IS_NODE ? process.domain : undefined;
      state.parent = true;
      reactions[reactions.length] = reaction;
      if (state.state != PENDING) notify(state, false);
      return reaction.promise;
    },
    // `Promise.prototype.catch` method
    // https://tc39.es/ecma262/#sec-promise.prototype.catch
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalState(promise);
    this.promise = promise;
    this.resolve = bind(internalResolve, state);
    this.reject = bind(internalReject, state);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (!IS_PURE && isCallable(NativePromise) && NativePromisePrototype !== Object.prototype) {
    nativeThen = NativePromisePrototype.then;

    if (!SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });

      // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
      redefine(NativePromisePrototype, 'catch', PromisePrototype['catch'], { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf) {
      setPrototypeOf(NativePromisePrototype, PromisePrototype);
    }
  }
}

$({ global: true, wrap: true, forced: FORCED }, {
  Promise: PromiseConstructor
});

setToStringTag(PromiseConstructor, PROMISE, false, true);
setSpecies(PROMISE);

PromiseWrapper = getBuiltIn(PROMISE);

// statics
$({ target: PROMISE, stat: true, forced: FORCED }, {
  // `Promise.reject` method
  // https://tc39.es/ecma262/#sec-promise.reject
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    call(capability.reject, undefined, r);
    return capability.promise;
  }
});

$({ target: PROMISE, stat: true, forced: IS_PURE || FORCED }, {
  // `Promise.resolve` method
  // https://tc39.es/ecma262/#sec-promise.resolve
  resolve: function resolve(x) {
    return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
  }
});

$({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
  // `Promise.all` method
  // https://tc39.es/ecma262/#sec-promise.all
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  },
  // `Promise.race` method
  // https://tc39.es/ecma262/#sec-promise.race
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable(C.resolve);
      iterate(iterable, function (promise) {
        call($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.string.iterator.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.string.iterator.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var charAt = (__webpack_require__(/*! ../internals/string-multibyte */ "../../node_modules/core-js/internals/string-multibyte.js").charAt);
var toString = __webpack_require__(/*! ../internals/to-string */ "../../node_modules/core-js/internals/to-string.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");
var defineIterator = __webpack_require__(/*! ../internals/define-iterator */ "../../node_modules/core-js/internals/define-iterator.js");

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),

/***/ "../../node_modules/guid/guid.js":
/*!***************************************!*\
  !*** ../../node_modules/guid/guid.js ***!
  \***************************************/
/***/ ((module) => {

(function () {
  var validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");

  function gen(count) {
    var out = "";
    for (var i=0; i<count; i++) {
      out += (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    }
    return out;
  }

  function Guid(guid) {
    if (!guid) throw new TypeError("Invalid argument; `value` has no value.");
      
    this.value = Guid.EMPTY;
    
    if (guid && guid instanceof Guid) {
      this.value = guid.toString();

    } else if (guid && Object.prototype.toString.call(guid) === "[object String]" && Guid.isGuid(guid)) {
      this.value = guid;
    }
    
    this.equals = function(other) {
      // Comparing string `value` against provided `guid` will auto-call
      // toString on `guid` for comparison
      return Guid.isGuid(other) && this.value == other;
    };

    this.isEmpty = function() {
      return this.value === Guid.EMPTY;
    };
    
    this.toString = function() {
      return this.value;
    };
    
    this.toJSON = function() {
      return this.value;
    };
  };

  Guid.EMPTY = "00000000-0000-0000-0000-000000000000";

  Guid.isGuid = function(value) {
    return value && (value instanceof Guid || validator.test(value.toString()));
  };

  Guid.create = function() {
    return new Guid([gen(2), gen(1), gen(1), gen(1), gen(3)].join("-"));
  };

  Guid.raw = function() {
    return [gen(2), gen(1), gen(1), gen(1), gen(3)].join("-");
  };

  if( true && module.exports) {
    module.exports = Guid;
  }
  else if (typeof window != 'undefined') {
    window.Guid = Guid;
  }
})();


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/DashboardLayoutChangedEvent.js":
/*!*********************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/DashboardLayoutChangedEvent.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauEvent_1 = __webpack_require__(/*! ./TableauEvent */ "./lib/src/ExtensionsApi/Events/TableauEvent.js");
var DashboardLayoutChangedEvent = /** @class */ (function (_super) {
    __extends(DashboardLayoutChangedEvent, _super);
    function DashboardLayoutChangedEvent(_dashboardLayoutChangeDetails) {
        var _this = _super.call(this, Contract.TableauEventType.DashboardLayoutChanged) || this;
        _this._dashboardLayoutChangeDetails = _dashboardLayoutChangeDetails;
        return _this;
    }
    Object.defineProperty(DashboardLayoutChangedEvent.prototype, "dashboardLayoutChangeDetails", {
        get: function () {
            return this._dashboardLayoutChangeDetails;
        },
        enumerable: true,
        configurable: true
    });
    return DashboardLayoutChangedEvent;
}(TableauEvent_1.TableauEvent));
exports.DashboardLayoutChangedEvent = DashboardLayoutChangedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/FilterChangedEvent.js":
/*!************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/FilterChangedEvent.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/ExtensionsApi/Events/TableauWorksheetEvent.js");
var FilterChangedEvent = /** @class */ (function (_super) {
    __extends(FilterChangedEvent, _super);
    function FilterChangedEvent(worksheet, _fieldName, _fieldId) {
        var _this = _super.call(this, api_external_contract_js_1.TableauEventType.FilterChanged, worksheet) || this;
        _this._fieldName = _fieldName;
        _this._fieldId = _fieldId;
        return _this;
    }
    Object.defineProperty(FilterChangedEvent.prototype, "fieldName", {
        get: function () {
            return this._fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilterChangedEvent.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    FilterChangedEvent.prototype.getFilterAsync = function () {
        var _this = this;
        return this._worksheet.getFiltersAsync().then(function (filters) {
            // TODO: Filtering of the filters should eventually be done platform side.
            var eventedFilter = _this.fieldId
                ? filters.find(function (filter) { return filter.fieldId === _this.fieldId; }, _this)
                : filters.find(function (filter) { return filter.fieldName === _this.fieldName; }, _this);
            if (!eventedFilter) {
                // We shouldn't hit this unless the filter was removed from the worksheet
                // after the event was raised.
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.MissingFilter, "cannot find filter: " + _this._fieldName);
            }
            return eventedFilter;
        });
    };
    return FilterChangedEvent;
}(TableauWorksheetEvent_1.TableauWorksheetEvent));
exports.FilterChangedEvent = FilterChangedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/MarksSelectedEvent.js":
/*!************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/MarksSelectedEvent.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/ExtensionsApi/Events/TableauWorksheetEvent.js");
var MarksSelectedEvent = /** @class */ (function (_super) {
    __extends(MarksSelectedEvent, _super);
    function MarksSelectedEvent(worksheet) {
        return _super.call(this, api_external_contract_js_1.TableauEventType.MarkSelectionChanged, worksheet) || this;
    }
    MarksSelectedEvent.prototype.getMarksAsync = function () {
        return this.worksheet.getSelectedMarksAsync();
    };
    return MarksSelectedEvent;
}(TableauWorksheetEvent_1.TableauWorksheetEvent));
exports.MarksSelectedEvent = MarksSelectedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/ParameterChangedEvent.js":
/*!***************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/ParameterChangedEvent.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var Parameter_1 = __webpack_require__(/*! ../Models/Parameter */ "./lib/src/ExtensionsApi/Models/Parameter.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var TableauSheetEvent_1 = __webpack_require__(/*! ./TableauSheetEvent */ "./lib/src/ExtensionsApi/Events/TableauSheetEvent.js");
var ParameterChangedEvent = /** @class */ (function (_super) {
    __extends(ParameterChangedEvent, _super);
    function ParameterChangedEvent(_globalFieldName, sheet) {
        var _this = _super.call(this, api_external_contract_js_1.TableauEventType.ParameterChanged, sheet) || this;
        _this._globalFieldName = _globalFieldName;
        return _this;
    }
    ParameterChangedEvent.prototype.getParameterAsync = function () {
        var _this = this;
        // Call down to our service to get the parameter back via its field name
        var service = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("parameters-service" /* Parameters */);
        return service.findParameterByGlobalFieldNameAsync(this._globalFieldName).then(function (parameterImpl) {
            if (parameterImpl === undefined) {
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.MissingParameter, "Cannot find parameter: " + _this._globalFieldName);
            }
            return new Parameter_1.Parameter(parameterImpl, _this.sheet);
        });
    };
    return ParameterChangedEvent;
}(TableauSheetEvent_1.TableauSheetEvent));
exports.ParameterChangedEvent = ParameterChangedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/SummaryDataChangedEvent.js":
/*!*****************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/SummaryDataChangedEvent.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/ExtensionsApi/Events/TableauWorksheetEvent.js");
var SummaryDataChangedEvent = /** @class */ (function (_super) {
    __extends(SummaryDataChangedEvent, _super);
    function SummaryDataChangedEvent(worksheet) {
        return _super.call(this, api_external_contract_js_1.TableauEventType.SummaryDataChanged, worksheet) || this;
    }
    return SummaryDataChangedEvent;
}(TableauWorksheetEvent_1.TableauWorksheetEvent));
exports.SummaryDataChangedEvent = SummaryDataChangedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/TableauEvent.js":
/*!******************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/TableauEvent.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var TableauEvent = /** @class */ (function () {
    function TableauEvent(type) {
        this._type = type;
    }
    Object.defineProperty(TableauEvent.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    return TableauEvent;
}());
exports.TableauEvent = TableauEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/TableauSheetEvent.js":
/*!***********************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/TableauSheetEvent.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var TableauEvent_1 = __webpack_require__(/*! ./TableauEvent */ "./lib/src/ExtensionsApi/Events/TableauEvent.js");
var TableauSheetEvent = /** @class */ (function (_super) {
    __extends(TableauSheetEvent, _super);
    function TableauSheetEvent(type, sheet) {
        var _this = _super.call(this, type) || this;
        _this._sheet = sheet;
        return _this;
    }
    Object.defineProperty(TableauSheetEvent.prototype, "sheet", {
        get: function () {
            return this._sheet;
        },
        enumerable: true,
        configurable: true
    });
    return TableauSheetEvent;
}(TableauEvent_1.TableauEvent));
exports.TableauSheetEvent = TableauSheetEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/TableauWorksheetEvent.js":
/*!***************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/TableauWorksheetEvent.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var TableauSheetEvent_1 = __webpack_require__(/*! ./TableauSheetEvent */ "./lib/src/ExtensionsApi/Events/TableauSheetEvent.js");
var TableauWorksheetEvent = /** @class */ (function (_super) {
    __extends(TableauWorksheetEvent, _super);
    function TableauWorksheetEvent(type, _worksheet) {
        var _this = _super.call(this, type, _worksheet) || this;
        _this._worksheet = _worksheet;
        return _this;
    }
    Object.defineProperty(TableauWorksheetEvent.prototype, "worksheet", {
        get: function () {
            return this._worksheet;
        },
        enumerable: true,
        configurable: true
    });
    return TableauWorksheetEvent;
}(TableauSheetEvent_1.TableauSheetEvent));
exports.TableauWorksheetEvent = TableauWorksheetEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Events/WorkbookFormattingChangedEvent.js":
/*!************************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Events/WorkbookFormattingChangedEvent.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauEvent_1 = __webpack_require__(/*! ./TableauEvent */ "./lib/src/ExtensionsApi/Events/TableauEvent.js");
var WorkbookFormattingChangedEvent = /** @class */ (function (_super) {
    __extends(WorkbookFormattingChangedEvent, _super);
    function WorkbookFormattingChangedEvent(_formatting) {
        var _this = _super.call(this, Contract.TableauEventType.WorkbookFormattingChanged) || this;
        _this._formatting = _formatting;
        return _this;
    }
    Object.defineProperty(WorkbookFormattingChangedEvent.prototype, "formatting", {
        get: function () {
            return this._formatting;
        },
        enumerable: true,
        configurable: true
    });
    return WorkbookFormattingChangedEvent;
}(TableauEvent_1.TableauEvent));
exports.WorkbookFormattingChangedEvent = WorkbookFormattingChangedEvent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/BentonSansFontNameConstants.js":
/*!*******************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/BentonSansFontNameConstants.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BentonSansFontFamilyName = 'Benton Sans';
exports.BentonSansLowDPIFontFamilyName = 'Benton Sans Low-DPI';
exports.BentonSansBookFontFaceName = 'Benton Sans Book';
exports.BentonSansBookItalicFontFaceName = 'Benton Sans Book Italic';
exports.BentonSansSemiDemiFontFaceName = 'Benton Sans SemiDemi';
exports.BentonSansSemiDemiItalicFontFaceName = 'Benton Sans SemiDemi Italic';
exports.BentonSansLightFontFaceName = 'Benton Sans Light';
exports.BentonSansMediumFontFaceName = 'Benton Sans Medium';
exports.SupportedBentonSansFontFaces = [
    exports.BentonSansBookFontFaceName,
    exports.BentonSansBookItalicFontFaceName,
    exports.BentonSansSemiDemiFontFaceName,
    exports.BentonSansSemiDemiItalicFontFaceName,
    exports.BentonSansLightFontFaceName,
    exports.BentonSansMediumFontFaceName,
];


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/ConnectedServer.js":
/*!*******************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/ConnectedServer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ConnectedServer = /** @class */ (function () {
    function ConnectedServer(_userId, _siteId, _siteNamespace, _workbookId) {
        this._userId = _userId;
        this._siteId = _siteId;
        this._siteNamespace = _siteNamespace;
        this._workbookId = _workbookId;
    }
    Object.defineProperty(ConnectedServer.prototype, "userId", {
        get: function () {
            return this._userId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectedServer.prototype, "siteId", {
        get: function () {
            return this._siteId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectedServer.prototype, "siteNamespace", {
        get: function () {
            return this._siteNamespace;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectedServer.prototype, "workbookId", {
        get: function () {
            return this._workbookId;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectedServer;
}());
exports.ConnectedServer = ConnectedServer;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/ExtensionWorkbookImpl.js":
/*!*************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/ExtensionWorkbookImpl.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var ExtensionWorkbookImpl = /** @class */ (function (_super) {
    __extends(ExtensionWorkbookImpl, _super);
    function ExtensionWorkbookImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtensionWorkbookImpl.prototype.getAllDataSourcesAsync = function () {
        var _this = this;
        var service = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("data-source-service" /* DataSourceService */);
        return service.getAllDataSourcesAsync().then(function (result) {
            var dataSchema = result;
            var dataSources = [];
            // Loop through all data sources and add them.
            Object.values(dataSchema.dataSources).forEach(function (ds) {
                dataSources.push(_this.createDataSourceFromInfo(ds));
            });
            return dataSources;
        });
    };
    ExtensionWorkbookImpl.prototype.createDataSourceFromInfo = function (dataSourceInfo) {
        var dataSourceImpl = new api_shared_js_1.DataSourceImpl(dataSourceInfo, ServiceRegistryUtil_1.ExtensionsRegistryId);
        var dataSource = new api_shared_js_1.DataSource(dataSourceImpl);
        dataSourceImpl.initializeWithPublicInterfaces(dataSource);
        return dataSource;
    };
    return ExtensionWorkbookImpl;
}(api_shared_js_1.WorkbookImpl));
exports.ExtensionWorkbookImpl = ExtensionWorkbookImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/ExtensionsImpl.js":
/*!******************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/ExtensionsImpl.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var Dashboard_1 = __webpack_require__(/*! ../Models/Dashboard */ "./lib/src/ExtensionsApi/Models/Dashboard.js");
var Workbook_1 = __webpack_require__(/*! ../Models/Workbook */ "./lib/src/ExtensionsApi/Models/Workbook.js");
var Worksheet_1 = __webpack_require__(/*! ../Models/Worksheet */ "./lib/src/ExtensionsApi/Models/Worksheet.js");
var DashboardContent_1 = __webpack_require__(/*! ../Namespaces/DashboardContent */ "./lib/src/ExtensionsApi/Namespaces/DashboardContent.js");
var Environment_1 = __webpack_require__(/*! ../Namespaces/Environment */ "./lib/src/ExtensionsApi/Namespaces/Environment.js");
var Settings_1 = __webpack_require__(/*! ../Namespaces/Settings */ "./lib/src/ExtensionsApi/Namespaces/Settings.js");
var UI_1 = __webpack_require__(/*! ../Namespaces/UI */ "./lib/src/ExtensionsApi/Namespaces/UI.js");
var WorksheetContent_1 = __webpack_require__(/*! ../Namespaces/WorksheetContent */ "./lib/src/ExtensionsApi/Namespaces/WorksheetContent.js");
var RegisterAllExtensionsServices_1 = __webpack_require__(/*! ../Services/RegisterAllExtensionsServices */ "./lib/src/ExtensionsApi/Services/RegisterAllExtensionsServices.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var BentonSansFontNameConstants_1 = __webpack_require__(/*! ./BentonSansFontNameConstants */ "./lib/src/ExtensionsApi/Impl/BentonSansFontNameConstants.js");
var ExtensionWorkbookImpl_1 = __webpack_require__(/*! ./ExtensionWorkbookImpl */ "./lib/src/ExtensionsApi/Impl/ExtensionWorkbookImpl.js");
var LegacyInternalApiDispatcherHolder_1 = __webpack_require__(/*! ./LegacyInternalApiDispatcherHolder */ "./lib/src/ExtensionsApi/Impl/LegacyInternalApiDispatcherHolder.js");
var SettingsImpl_1 = __webpack_require__(/*! ./SettingsImpl */ "./lib/src/ExtensionsApi/Impl/SettingsImpl.js");
var TableauBookFontNameConstants_1 = __webpack_require__(/*! ./TableauBookFontNameConstants */ "./lib/src/ExtensionsApi/Impl/TableauBookFontNameConstants.js");
var UIImpl_1 = __webpack_require__(/*! ./UIImpl */ "./lib/src/ExtensionsApi/Impl/UIImpl.js");
var ExtensionsImpl = /** @class */ (function () {
    function ExtensionsImpl() {
    }
    ExtensionsImpl.prototype.initializeAsync = function (isExtensionDialog, contextMenuCallbacks) {
        var _this = this;
        if (!this._initializationPromise) {
            this._initializationPromise = new Promise(function (resolve, reject) {
                var _a;
                var initOptions = { isAlpha: api_shared_js_1.ApiVersion.Instance.isAlpha };
                // First thing we want to do is check to see if there is a desktop dispatcher already registered for us
                if (LegacyInternalApiDispatcherHolder_1.LegacyInternalApiDispatcherHolder.hasDesktopApiDispatcherPromise(initOptions)) {
                    // Running in a pre-2019.3 desktop, use our legacy dispatcher promise
                    var desktopDispatcherPromise = LegacyInternalApiDispatcherHolder_1.LegacyInternalApiDispatcherHolder.getDesktopDispatcherPromise(initOptions);
                    (_a = desktopDispatcherPromise) === null || _a === void 0 ? void 0 : _a.then(function (dispatcherFactory) { return _this.onDispatcherReceived(dispatcherFactory, isExtensionDialog, contextMenuCallbacks); }).then(function (openPayload) {
                        resolve(openPayload);
                    }).catch(function (error) {
                        reject(error);
                    });
                }
                else {
                    // We must be running in server, so we should try to kick of the server dispatcher bootstrapping
                    var onDispatcherReceivedCallback_1 = _this.onDispatcherReceived.bind(_this);
                    api_shared_js_1.doCrossFrameBootstrap(window, api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION, initOptions)
                        .then(function (factory) {
                        return onDispatcherReceivedCallback_1(factory, isExtensionDialog, contextMenuCallbacks);
                    })
                        .then(function (openPayload) {
                        resolve(openPayload);
                    })
                        .catch(function (error) {
                        reject(error);
                    });
                }
            });
        }
        return this._initializationPromise;
    };
    ExtensionsImpl.prototype.createVizImageAsync = function (inputSpec) {
        var vizService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("viz-service" /* Viz */);
        return vizService.createVizImageAsync(inputSpec);
    };
    ExtensionsImpl.prototype.setClickThroughAsync = function (clickThroughEnabled) {
        var uiService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("UIService" /* UIService */);
        return uiService.setClickThroughAsync(clickThroughEnabled, this.extensionZoneId);
    };
    ExtensionsImpl.prototype.isDashboardExtensionLocator = function (locator) {
        var dashboardExtensionLocator = locator;
        if (!dashboardExtensionLocator.dashboardPath) {
            throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, 'Unexpected error during initialization.');
        }
        return true;
    };
    ExtensionsImpl.prototype.onDispatcherReceived = function (dispatcherFactory, isExtensionDialog, contextMenuFunctions) {
        var _this = this;
        var dispatcher = dispatcherFactory(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION);
        // Call to register all the services which will use the newly initialized dispatcher
        RegisterAllExtensionsServices_1.registerInitializationExtensionsServices(dispatcher);
        // Get the initialization service and initialize this extension
        var initializationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("InitializationService" /* InitializationService */);
        var callbackMapKeys = contextMenuFunctions ? Object.keys(contextMenuFunctions) : [];
        return initializationService.initializeDashboardExtensionsAsync(isExtensionDialog, callbackMapKeys).then(function (result) {
            // If we receive an invalid plaform version, this means that platform is runnning 1.4 or 2.1 and
            // doesn't pass the platform version to external. In this case we assume the platform version to be 1.9
            var platformVersion = result.extensionEnvironment.platformVersion
                ? result.extensionEnvironment.platformVersion
                : { major: 1, minor: 9, fix: 0 };
            // Wrap our existing dispatcher in a dispatcher that can downgrade/upgrade for an older platform.
            if (api_shared_js_1.VersionedExternalApiDispatcher.needsVersionConverter(platformVersion)) {
                dispatcher = new api_shared_js_1.VersionedExternalApiDispatcher(dispatcher, platformVersion);
            }
            // Registration of services must happen before initializing content and environment
            // Extensions doesn't need to pass in a registryId. By default, the service registry instance is associated with registryId=0.
            api_shared_js_1.registerAllSharedServices(dispatcher, ServiceRegistryUtil_1.ExtensionsRegistryId, platformVersion);
            RegisterAllExtensionsServices_1.registerAllExtensionsServices(dispatcher);
            if (result.extensionDashboardInfo && _this.isDashboardExtensionLocator(result.extensionInstance.locator)) {
                _this.dashboardContent = _this.initializeDashboardContent(result.extensionDashboardInfo, result.extensionInstance.locator.dashboardPath);
                _this.extensionZoneId = result.extensionDashboardInfo.extensionZoneId;
            }
            if (result.extensionWorksheetInfo) {
                _this.worksheetContent = _this.initializeWorksheetContent(result.extensionWorksheetInfo);
            }
            _this.environment = new Environment_1.Environment(result.extensionEnvironment);
            _this.settings = _this.initializeSettings(result.extensionSettingsInfo);
            _this.ui = new UI_1.UI(new UIImpl_1.UIImpl());
            _this.workbook = new Workbook_1.Workbook(new ExtensionWorkbookImpl_1.ExtensionWorkbookImpl());
            if (result.extensionEnvironment.workbookFormatting) {
                _this.initializeTableauFonts(dispatcher, result.extensionEnvironment.workbookFormatting);
                _this.applyAllFormatting(result.extensionEnvironment.workbookFormatting);
            }
            // After initialization has completed, setup listeners for the callback functions that
            // are meant to be triggered whenever a context menu item is clicked.
            _this.initializeContextMenuCallbacks(contextMenuFunctions);
            // Also set up listeners for ExtensionStylesChangedEvent
            _this.initializeWorkbookFormattingChangedEventCallback(dispatcher);
            // In the normal initialization case, this will be an empty string.  When returning from initializeAsync to the
            // developer, we just ingore that string.  In the case of initializing from an extension dialog, this string
            // is an optional payload sent from the parent extension.
            return result.extensionDialogPayload;
        });
    };
    ExtensionsImpl.prototype.applyAllFormatting = function (formattingModel) {
        var _this = this;
        if (!this._styleElement) {
            this._styleElement = document.createElement('style');
            this._styleElement.id = 'Tableau-Extension-Formatting';
            document.head.appendChild(this._styleElement);
        }
        if (!this._styleElement.sheet || !formattingModel) {
            return;
        }
        var stylesheet = this._styleElement.sheet;
        while (stylesheet.cssRules.length > 0) {
            stylesheet.deleteRule(stylesheet.cssRules.length - 1);
        }
        formattingModel.formattingSheets.map(function (currentFormattingSheet) {
            _this.applyFormattingSheetToStyleSheet(currentFormattingSheet, stylesheet);
        });
    };
    ExtensionsImpl.prototype.applyFormattingSheetToStyleSheet = function (currentFormattingSheet, stylesheet) {
        var styleInfo = '';
        var cssProperties = currentFormattingSheet.cssProperties;
        if (cssProperties.fontFamily) {
            styleInfo += 'font-family: ' + cssProperties.fontFamily.toString() + '; ';
        }
        if (cssProperties.fontSize) {
            styleInfo += 'font-size: ' + cssProperties.fontSize.toString() + '; ';
        }
        if (cssProperties.fontWeight) {
            styleInfo += 'font-weight: ' + cssProperties.fontWeight.toString() + '; ';
        }
        if (cssProperties.fontStyle) {
            styleInfo += 'font-style: ' + cssProperties.fontStyle.toString() + '; ';
        }
        if (cssProperties.textDecoration) {
            styleInfo += 'text-decoration: ' + cssProperties.textDecoration.toString() + '; ';
        }
        if (cssProperties.color) {
            styleInfo += 'color: ' + cssProperties.color + '; ';
        }
        var selector = '.' + currentFormattingSheet.classNameKey;
        var rule = selector + ' { ' + styleInfo + ' }';
        stylesheet.insertRule(rule, stylesheet.cssRules.length);
    };
    ExtensionsImpl.prototype.initializeWorkbookFormattingChangedEventCallback = function (dispatcher) {
        var _this = this;
        var notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        // Unregister function not used since these notifications should be
        // observed for the full lifetime of the extension.
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.WorkbookFormattingChanged, function () { return true; }, function (eventFormatting) {
            if (eventFormatting) {
                _this.initializeTableauFonts(dispatcher, eventFormatting);
                _this.applyAllFormatting(eventFormatting);
            }
        });
    };
    ExtensionsImpl.prototype.initializeTableauFonts = function (dispatcher, workbookFormatting) {
        var _a;
        var _this = this;
        var fontNames = __spreadArrays(BentonSansFontNameConstants_1.SupportedBentonSansFontFaces, TableauBookFontNameConstants_1.SupportedTableauFontFaces);
        workbookFormatting.formattingSheets.forEach(function (formattingSheet) {
            if (formattingSheet.cssProperties.fontFamily) {
                fontNames.push(formattingSheet.cssProperties.fontFamily);
            }
        });
        if (fontNames.length > 0) {
            var parameters = (_a = {}, _a[api_internal_contract_js_1.ParameterId.FontNameListItems] = fontNames, _a);
            dispatcher
                .execute(api_internal_contract_js_1.VerbId.GetFonts, parameters)
                .then(function (response) {
                _this.loadFonts(response.result);
            })
                .catch();
        }
    };
    ExtensionsImpl.prototype.loadFonts = function (fonts) {
        var _this = this;
        fonts.forEach(function (fontNameAndInfo) {
            if (TableauBookFontNameConstants_1.SupportedTableauFontFaces.includes(fontNameAndInfo.fontName)) {
                _this.loadTableauFonts(fontNameAndInfo);
            }
            else if (BentonSansFontNameConstants_1.SupportedBentonSansFontFaces.includes(fontNameAndInfo.fontName)) {
                _this.loadBentonSansFonts(fontNameAndInfo);
            }
            else {
                document.fonts.add(new FontFace(fontNameAndInfo.fontName, fontNameAndInfo.fontBinaryInfo));
            }
        });
    };
    ExtensionsImpl.prototype.initializeDashboardContent = function (info, sheetPath) {
        // sheets are always active for Extensions
        var sheetInfoImpl = new api_shared_js_1.SheetInfoImpl(info.name, api_external_contract_js_1.SheetType.Dashboard, { width: info.size.w, height: info.size.h }, undefined, true);
        var dashboardImpl = new api_shared_js_1.DashboardImpl(sheetInfoImpl, info.zones, sheetPath, ServiceRegistryUtil_1.ExtensionsRegistryId, null, info.activeDashboardObjectId);
        var dashboard = new Dashboard_1.Dashboard(dashboardImpl);
        return new DashboardContent_1.DashboardContent(dashboard);
    };
    ExtensionsImpl.prototype.initializeWorksheetContent = function (info) {
        var sheetInfoImpl = new api_shared_js_1.SheetInfoImpl(info.visualId.worksheet, api_external_contract_js_1.SheetType.Worksheet, { width: info.size.w, height: info.size.h }, undefined, // index property is embedding specific
        true);
        var worksheetImpl = new api_shared_js_1.WorksheetImpl(sheetInfoImpl, ServiceRegistryUtil_1.ExtensionsRegistryId, info.visualId, null, // parentDashboard is always null for worksheet in WorksheetContent
        null);
        var worksheet = new Worksheet_1.Worksheet(worksheetImpl);
        return new WorksheetContent_1.WorksheetContent(worksheet);
    };
    ExtensionsImpl.prototype.initializeSettings = function (settingsInfo) {
        var settingsImpl = new SettingsImpl_1.SettingsImpl(settingsInfo);
        return new Settings_1.Settings(settingsImpl);
    };
    ExtensionsImpl.prototype.initializeContextMenuCallbacks = function (contextMenuFunctions) {
        var notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        // Unregister function not used since these notifications should be
        // observed for the full lifetime of the extension.
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.ContextMenuClick, function () {
            // Let through any context menu event, these are already filtered on api-core
            // based on the extension locator.
            return true;
        }, function (event) {
            // Execute the function associated with this context menu ID
            if (contextMenuFunctions) {
                if (!contextMenuFunctions[event.id]) {
                    throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Received unexpected context menu Id from event: " + event.id);
                }
                contextMenuFunctions[event.id]();
            }
        });
    };
    ExtensionsImpl.prototype.loadTableauFonts = function (fontNameAndInfo) {
        switch (fontNameAndInfo.fontName) {
            case TableauBookFontNameConstants_1.TableauBookFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauBookFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                break;
            case TableauBookFontNameConstants_1.TableauLightFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauLightFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                break;
            case TableauBookFontNameConstants_1.TableauRegularFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauRegularFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                break;
            case TableauBookFontNameConstants_1.TableauSemiBoldFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauSemiboldFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauRegularFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                break;
            case TableauBookFontNameConstants_1.TableauBoldFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauBoldFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauBoldFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauMediumFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauSemiboldFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                break;
            case TableauBookFontNameConstants_1.TableauMediumFontFaceName:
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauMediumFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauLightFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                document.fonts.add(new FontFace(TableauBookFontNameConstants_1.TableauBookFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                break;
            default:
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "'attempted to load unsupported font: " + fontNameAndInfo.fontName + ".'");
        }
    };
    ExtensionsImpl.prototype.loadBentonSansFonts = function (fontNameAndInfo) {
        switch (fontNameAndInfo.fontName) {
            case BentonSansFontNameConstants_1.BentonSansBookFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansLowDPIFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: '100', style: 'normal' }));
                break;
            case BentonSansFontNameConstants_1.BentonSansLightFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: '100', style: 'normal' }));
                break;
            case BentonSansFontNameConstants_1.BentonSansMediumFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansLowDPIFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'bold', style: 'normal' }));
                break;
            case BentonSansFontNameConstants_1.BentonSansSemiDemiFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansLowDPIFontFamilyName, fontNameAndInfo.fontBinaryInfo, { weight: 'normal', style: 'normal' }));
                break;
            case BentonSansFontNameConstants_1.BentonSansBookItalicFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansFontFamilyName, fontNameAndInfo.fontBinaryInfo, { style: 'italic' }));
                break;
            case BentonSansFontNameConstants_1.BentonSansSemiDemiItalicFontFaceName:
                document.fonts.add(new FontFace(BentonSansFontNameConstants_1.BentonSansLowDPIFontFamilyName, fontNameAndInfo.fontBinaryInfo, { style: 'italic' }));
                break;
            default:
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "'attempted to load unsupported font: " + fontNameAndInfo.fontName + ".'");
        }
    };
    return ExtensionsImpl;
}());
exports.ExtensionsImpl = ExtensionsImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/LegacyInternalApiDispatcherHolder.js":
/*!*************************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/LegacyInternalApiDispatcherHolder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
/**
 * LegacyInternalApiDispatcherHolder has been moved (and renamed) from api-internal-contract.
 * It supports running a newer external library against a pre 2019.3 desktop.
 * Starting in 2019.3, we have a merged bootstrap style for both desktop and server.
 * In addition, the alpha checking that is happening here is not necessary in external-api-js
 *  after 2019.3 because that checking happens in api-platform-js (ApiDispatcherTest.ts)
 * TFSID: 1091561 tracks an improvement to this system to make it less complex and tie it directly to
 *  tableau beta release versions.
 * @deprecated
 */
// eslint-disable-next-line @typescript-eslint/no-namespace
var LegacyInternalApiDispatcherHolder;
(function (LegacyInternalApiDispatcherHolder) {
    /**
     * @param options
     */
    function getDesktopDispatcherPromise(options) {
        var _a;
        if ((!options || typeof options.isAlpha === 'undefined') && !window.__warningIssued) {
            // tslint:disable-next-line:no-console
            console.warn('This is a beta version of the Extensions API. Please upgrade to an official release.');
            window.__warningIssued = true;
        }
        else if (((_a = options) === null || _a === void 0 ? void 0 : _a.isAlpha) && window.__platformIsOfficialRelease) {
            window.__tableauDesktopDispatcher
                .then(function (dispatcherFactory) {
                var dispatcher = dispatcherFactory(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION);
                dispatcher.execute(api_internal_contract_js_1.VerbId.BlockExtension, {}).catch();
            })
                .catch();
        }
        // this will be undefined if promise is rejected or throws
        return window.__tableauDesktopDispatcher;
    }
    LegacyInternalApiDispatcherHolder.getDesktopDispatcherPromise = getDesktopDispatcherPromise;
    /**
     * @param options
     */
    function hasDesktopApiDispatcherPromise(options) {
        return !!getDesktopDispatcherPromise(options);
    }
    LegacyInternalApiDispatcherHolder.hasDesktopApiDispatcherPromise = hasDesktopApiDispatcherPromise;
})(LegacyInternalApiDispatcherHolder = exports.LegacyInternalApiDispatcherHolder || (exports.LegacyInternalApiDispatcherHolder = {}));


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/SettingsImpl.js":
/*!****************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/SettingsImpl.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var TableauEvent_1 = __webpack_require__(/*! ../Events/TableauEvent */ "./lib/src/ExtensionsApi/Events/TableauEvent.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var SettingsChangedEvent = /** @class */ (function (_super) {
    __extends(SettingsChangedEvent, _super);
    function SettingsChangedEvent(_newSettings) {
        var _this = _super.call(this, Contract.TableauEventType.SettingsChanged) || this;
        _this._newSettings = _newSettings;
        return _this;
    }
    Object.defineProperty(SettingsChangedEvent.prototype, "newSettings", {
        get: function () {
            return this._newSettings;
        },
        enumerable: true,
        configurable: true
    });
    return SettingsChangedEvent;
}(TableauEvent_1.TableauEvent));
var SettingsImpl = /** @class */ (function () {
    function SettingsImpl(settingsInfo) {
        // Since promises can't be introspected for state, keep a variable that
        // indicates a save is in progress, so that set/erase can't be called during a save.
        this._saveInProgress = false;
        this.initializeSettings(settingsInfo);
    }
    SettingsImpl.prototype.erase = function (key) {
        api_shared_js_1.ErrorHelpers.verifyParameter(key, 'key');
        // Only make a modification if we have the key already
        if (this._currentSettings[key]) {
            this.verifySettingsAreUnlocked();
            delete this._currentSettings[key];
            this._isModified = true;
        }
    };
    SettingsImpl.prototype.get = function (key) {
        api_shared_js_1.ErrorHelpers.verifyParameter(key, 'key');
        return this._currentSettings[key];
    };
    SettingsImpl.prototype.getAll = function () {
        // Returns a mutable copy of the settings
        return Object.assign({}, this._currentSettings);
    };
    Object.defineProperty(SettingsImpl.prototype, "isModified", {
        get: function () {
            return this._isModified;
        },
        enumerable: true,
        configurable: true
    });
    SettingsImpl.prototype.saveAsync = function () {
        var _this = this;
        this.verifySettingsAreUnlocked();
        // Just resolve immediately if settings are unchanged
        if (!this._isModified) {
            return Promise.resolve(this._currentSettings);
        }
        this._saveInProgress = true;
        // Use the settings service to save settings to twb
        var settingsService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("SettingsService" /* SettingsService */);
        return settingsService.saveSettingsAsync(this._currentSettings).then(function (newSettings) {
            _this._saveInProgress = false;
            _this._isModified = false;
            if (_this._currentSettings === undefined) {
                _this._currentSettings = newSettings;
            }
            else {
                Object.assign(_this._currentSettings, newSettings);
            }
            return newSettings;
        }, function (reason) {
            _this._saveInProgress = false;
            return Promise.reject(reason);
        });
    };
    SettingsImpl.prototype.set = function (key, value) {
        api_shared_js_1.ErrorHelpers.verifyStringParameter(key, 'key'); // Key shouldn't be an empty string.
        api_shared_js_1.ErrorHelpers.verifyParameter(value, 'value'); // Empty string value is allowed.
        this.verifySettingsAreUnlocked();
        this._currentSettings[key] = value;
        this._isModified = true;
    };
    /**
     * Initializes all events relevant to settings object.  This is only a settingsUpdate event currently.
     *
     * @returns {Array<SingleEventManager>} Collection of event managers to pass to an EventListenerManager.
     */
    SettingsImpl.prototype.initializeEvents = function () {
        var _this = this;
        var results = new Array();
        var notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            // If we don't have this service registered, just return
            return results;
        }
        var settingsChangedEvent = new api_shared_js_1.SingleEventManagerImpl(Contract.TableauEventType.SettingsChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.SettingsChanged, function () { return true; }, function (event) {
            _this._currentSettings = event.newSettings;
            settingsChangedEvent.triggerEvent(function () { return new SettingsChangedEvent(event.newSettings); });
        });
        results.push(settingsChangedEvent);
        return results;
    };
    SettingsImpl.prototype.initializeSettings = function (settingsInfo) {
        api_shared_js_1.ErrorHelpers.verifyParameter(settingsInfo, 'settingsInfo');
        api_shared_js_1.ErrorHelpers.verifyParameter(settingsInfo.settingsValues, 'settingsInfo.SettingsValues');
        this._currentSettings = settingsInfo.settingsValues;
        // Reset the isModified flag
        this._isModified = false;
    };
    /**
     * This helper should be called before any local update to this.currentSettings.
     * Checks if a current save call is still in progress and throws an error if so.
     */
    SettingsImpl.prototype.verifySettingsAreUnlocked = function () {
        if (this._saveInProgress) {
            throw new api_shared_js_1.TableauError(Contract.ErrorCodes.SettingSaveInProgress, SettingsImpl.ASYNC_SAVE_IN_PROGRESS);
        }
    };
    SettingsImpl.ASYNC_SAVE_IN_PROGRESS = 'Async Save is in progress, updating settings is not allowed.';
    return SettingsImpl;
}());
exports.SettingsImpl = SettingsImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/TableauBookFontNameConstants.js":
/*!********************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/TableauBookFontNameConstants.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TableauBookFontFamilyName = 'Tableau Book';
exports.TableauLightFontFamilyName = 'Tableau Light';
exports.TableauRegularFontFamilyName = 'Tableau Regular';
exports.TableauMediumFontFamilyName = 'Tableau Medium';
exports.TableauSemiboldFontFamilyName = 'Tableau Semibold';
exports.TableauBoldFontFamilyName = 'Tableau Bold';
exports.TableauBookFontFaceName = 'Tableau Book';
exports.TableauBoldFontFaceName = 'Tableau Bold';
exports.TableauLightFontFaceName = 'Tableau Light';
exports.TableauMediumFontFaceName = 'Tableau Medium';
exports.TableauRegularFontFaceName = 'Tableau Regular';
exports.TableauSemiBoldFontFaceName = 'Tableau Semi Bold';
exports.SupportedTableauFontFaces = [
    exports.TableauBookFontFaceName,
    exports.TableauBoldFontFaceName,
    exports.TableauLightFontFaceName,
    exports.TableauMediumFontFaceName,
    exports.TableauRegularFontFaceName,
    exports.TableauSemiBoldFontFaceName,
];


/***/ }),

/***/ "./lib/src/ExtensionsApi/Impl/UIImpl.js":
/*!**********************************************!*\
  !*** ./lib/src/ExtensionsApi/Impl/UIImpl.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var UIImpl = /** @class */ (function () {
    function UIImpl() {
    }
    UIImpl.prototype.displayDialogAsync = function (url, payload, options) {
        var uiService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("UIService" /* UIService */);
        var notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        return new Promise(function (resolve, reject) {
            uiService
                .displayDialogAsync(url, payload || '', options)
                .then(function () {
                var unregisterFn = notificationService.registerHandler(api_internal_contract_js_1.NotificationId.ExtensionDialogUpdate, function () {
                    // Let through any dialog update event
                    return true;
                }, function (event) {
                    if (event.isCloseEvent) {
                        if (event.closePayload === undefined) {
                            throw new api_shared_js_1.TableauError(Contract.ErrorCodes.InternalError, 'closePayload is undefined');
                        }
                        resolve(event.closePayload);
                    }
                    else {
                        reject(new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.DialogClosedByUser, 'Extension dialog closed by user.'));
                    }
                    unregisterFn();
                });
            })
                .catch(function (error) {
                reject(error);
            });
        });
    };
    UIImpl.prototype.closeDialog = function (payload) {
        var uiService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("UIService" /* UIService */);
        uiService.closeDialog(payload);
    };
    return UIImpl;
}());
exports.UIImpl = UIImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/Dashboard.js":
/*!***************************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/Dashboard.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var DashboardLayoutChangedEvent_1 = __webpack_require__(/*! ../Events/DashboardLayoutChangedEvent */ "./lib/src/ExtensionsApi/Events/DashboardLayoutChangedEvent.js");
var WorkbookFormattingChangedEvent_1 = __webpack_require__(/*! ../Events/WorkbookFormattingChangedEvent */ "./lib/src/ExtensionsApi/Events/WorkbookFormattingChangedEvent.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var DashboardObject_1 = __webpack_require__(/*! ./DashboardObject */ "./lib/src/ExtensionsApi/Models/DashboardObject.js");
var Sheet_1 = __webpack_require__(/*! ./Sheet */ "./lib/src/ExtensionsApi/Models/Sheet.js");
var Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/ExtensionsApi/Models/Worksheet.js");
var Dashboard = /** @class */ (function (_super) {
    __extends(Dashboard, _super);
    function Dashboard(_dashboardImpl) {
        var _this = _super.call(this, _dashboardImpl) || this;
        _this._dashboardImpl = _dashboardImpl;
        _dashboardImpl.initializeWithPublicInterfaces();
        _this.initializeEvents().forEach(function (e) { return _this.addNewEventType(e); });
        return _this;
    }
    Object.defineProperty(Dashboard.prototype, "worksheets", {
        get: function () {
            return this._dashboardImpl.worksheetsImpl.map(function (worksheetImpl) {
                return new Worksheet_1.Worksheet(worksheetImpl);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashboard.prototype, "objects", {
        get: function () {
            return this._dashboardImpl.objects.map(function (dashboardObjectImpl) {
                return new DashboardObject_1.DashboardObject(dashboardObjectImpl);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashboard.prototype, "activeDashboardObjectId", {
        get: function () {
            return this._dashboardImpl.activeDashboardObjectId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Dashboard.prototype, "activeDashboardName", {
        get: function () {
            return this._dashboardImpl.activeDashboardName;
        },
        enumerable: true,
        configurable: true
    });
    Dashboard.prototype.setZoneVisibilityAsync = function (zoneVisibilityMap) {
        return this._dashboardImpl.setDashboardObjectVisibilityAsync(zoneVisibilityMap);
    };
    Dashboard.prototype.setDashboardObjectVisibilityAsync = function (dashboardObjectVisibilityMap) {
        return this._dashboardImpl.setDashboardObjectVisibilityAsync(dashboardObjectVisibilityMap);
    };
    Dashboard.prototype.getDashboardObjectById = function (dashboardObjectId) {
        var zone = this._dashboardImpl.getDashboardObjectById(dashboardObjectId);
        return zone && new DashboardObject_1.DashboardObject(zone);
    };
    Dashboard.prototype.initializeEvents = function () {
        var _this = this;
        var results = new Array();
        // Initializing events and registering notification service
        var notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            // If we don't have this service registered, just return (allows unit testing without NotificationService mock)
            return results;
        }
        var dashboardLayoutChangedEvent = new api_shared_js_1.SingleEventManagerImpl(api_external_contract_js_1.TableauEventType.DashboardLayoutChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.DashboardLayoutChanged, function () { return true; }, function (event) {
            var dashboardObjectChanges = _this._dashboardImpl.updateZones(event.zones, event.activeZoneId, event.activeDashboardName);
            dashboardLayoutChangedEvent.triggerEvent(function () { return new DashboardLayoutChangedEvent_1.DashboardLayoutChangedEvent(dashboardObjectChanges); });
        });
        results.push(dashboardLayoutChangedEvent);
        var workbookFormattingChangedEvent = new api_shared_js_1.SingleEventManagerImpl(api_external_contract_js_1.TableauEventType.WorkbookFormattingChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.WorkbookFormattingChanged, function () { return true; }, function (eventFormatting) {
            workbookFormattingChangedEvent.triggerEvent(function () { return new WorkbookFormattingChangedEvent_1.WorkbookFormattingChangedEvent(eventFormatting); });
        });
        results.push(workbookFormattingChangedEvent);
        return results;
    };
    Dashboard.prototype.moveAndResizeDashboardObjectsAsync = function (dashboardObjectPositionAndSizeUpdateArray) {
        return this._dashboardImpl.moveAndResizeDashboardObjectsAsync(dashboardObjectPositionAndSizeUpdateArray);
    };
    Dashboard.prototype.replayAnimationAsync = function (replaySpeed) {
        return this._dashboardImpl.replayAnimationAsync(replaySpeed);
    };
    Dashboard.prototype.getFiltersAsync = function () {
        return this._dashboardImpl.getFiltersAsync();
    };
    Dashboard.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        return this._dashboardImpl.applyFilterAsync(fieldName, values, updateType, options);
    };
    return Dashboard;
}(Sheet_1.Sheet));
exports.Dashboard = Dashboard;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/DashboardObject.js":
/*!*********************************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/DashboardObject.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/ExtensionsApi/Models/Dashboard.js");
var Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/ExtensionsApi/Models/Worksheet.js");
/**
 * Implementation of the dashboard objects - the zones in a dashboard.
 */
var DashboardObject = /** @class */ (function () {
    function DashboardObject(_dashboardObjectImpl) {
        this._dashboardObjectImpl = _dashboardObjectImpl;
    }
    Object.defineProperty(DashboardObject.prototype, "dashboard", {
        get: function () {
            return new Dashboard_1.Dashboard(this._dashboardObjectImpl.dashboardImpl);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "type", {
        get: function () {
            return this._dashboardObjectImpl.type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "position", {
        get: function () {
            return this._dashboardObjectImpl.position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "size", {
        get: function () {
            return this._dashboardObjectImpl.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "worksheet", {
        get: function () {
            if (this._dashboardObjectImpl.worksheetImpl) {
                return new Worksheet_1.Worksheet(this._dashboardObjectImpl.worksheetImpl);
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "name", {
        get: function () {
            return this._dashboardObjectImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "isFloating", {
        get: function () {
            return this._dashboardObjectImpl.isFloating;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "isVisible", {
        get: function () {
            return this._dashboardObjectImpl.isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "id", {
        get: function () {
            return this._dashboardObjectImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObject.prototype, "fieldId", {
        get: function () {
            return this._dashboardObjectImpl.fieldId;
        },
        enumerable: true,
        configurable: true
    });
    return DashboardObject;
}());
exports.DashboardObject = DashboardObject;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/Parameter.js":
/*!***************************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/Parameter.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var ParameterChangedEvent_1 = __webpack_require__(/*! ../Events/ParameterChangedEvent */ "./lib/src/ExtensionsApi/Events/ParameterChangedEvent.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
/**
 * Implementation of the Parameter contract. Calls down to the impl
 * class for almost all of the work it does.
 */
var Parameter = /** @class */ (function (_super) {
    __extends(Parameter, _super);
    function Parameter(parameterImpl, sheet) {
        var _this = _super.call(this) || this;
        _this.parameterImpl = parameterImpl;
        // Initialize our event handling for this class
        _this.initializeEvents(sheet).forEach(function (e) { return _this.addNewEventType(e); });
        return _this;
    }
    Object.defineProperty(Parameter.prototype, "name", {
        get: function () {
            return this.parameterImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Parameter.prototype, "currentValue", {
        get: function () {
            return this.parameterImpl.currentValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Parameter.prototype, "dataType", {
        get: function () {
            return this.parameterImpl.dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Parameter.prototype, "allowableValues", {
        get: function () {
            return this.parameterImpl.allowableValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Parameter.prototype, "id", {
        get: function () {
            return this.parameterImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Parameter.prototype.changeValueAsync = function (newValue) {
        return this.parameterImpl.changeValueAsync(newValue);
    };
    /**
     * Helper method which goes through and registers each event type this impl knows about
     * with the NotificationService. It returns an array of SingleEventManager objects which
     * can then be passed to an EventListenerManager to handle user registration / unregistration.
     *
     * @param sheet The sheet object which will be included with the event notifications
     * @returns {Array<SingleEventManager>} Collection of event managers to pass to an EventListenerManager
     */
    Parameter.prototype.initializeEvents = function (sheet) {
        var _this = this;
        api_shared_js_1.ErrorHelpers.verifyInternalValue(sheet, 'sheet');
        var results = new Array();
        var notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            // If we don't have this service registered, just return
            return results;
        }
        // Initialize all of the event managers we'll need (one for each event type)
        var parameterEvent = new api_shared_js_1.SingleEventManagerImpl(Contract.TableauEventType.ParameterChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.ParameterChanged, function (model) {
            var fieldName = model;
            return fieldName === _this.parameterImpl.id;
        }, function (fieldName) {
            parameterEvent.triggerEvent(function () { return new ParameterChangedEvent_1.ParameterChangedEvent(fieldName, sheet); });
        });
        results.push(parameterEvent);
        return results;
    };
    return Parameter;
}(api_shared_js_1.EventListenerManager));
exports.Parameter = Parameter;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/Sheet.js":
/*!***********************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/Sheet.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var Parameter_1 = __webpack_require__(/*! ./Parameter */ "./lib/src/ExtensionsApi/Models/Parameter.js");
var Sheet = /** @class */ (function (_super) {
    __extends(Sheet, _super);
    function Sheet(_sheetImpl) {
        var _this = _super.call(this) || this;
        _this._sheetImpl = _sheetImpl;
        return _this;
    }
    Object.defineProperty(Sheet.prototype, "name", {
        get: function () {
            return this._sheetImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sheet.prototype, "sheetType", {
        get: function () {
            return this._sheetImpl.sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sheet.prototype, "size", {
        get: function () {
            if (this.isValidSize(this._sheetImpl.size)) {
                return this._sheetImpl.size;
            }
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Size not implemented');
        },
        enumerable: true,
        configurable: true
    });
    Sheet.prototype.isValidSize = function (size) {
        var testSize = size;
        if (testSize.width !== undefined && testSize.height !== undefined) {
            return true;
        }
        return false;
    };
    Sheet.prototype.findParameterAsync = function (parameterName) {
        var _this = this;
        return this._sheetImpl.findParameterAsync(parameterName).then(function (parameterImpl) {
            if (parameterImpl) {
                return new Promise(function (resolve) { return resolve(new Parameter_1.Parameter(parameterImpl, _this)); });
            }
            else {
                return new Promise(function (resolve) { return resolve(undefined); });
            }
        });
    };
    Sheet.prototype.getParametersAsync = function () {
        var _this = this;
        return this._sheetImpl.getParametersAsync().then(function (parametersImpl) {
            return parametersImpl.map(function (parameterImpl) {
                return new Parameter_1.Parameter(parameterImpl, _this);
            });
        });
    };
    return Sheet;
}(api_shared_js_1.EventListenerManager));
exports.Sheet = Sheet;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/Workbook.js":
/*!**************************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/Workbook.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Workbook = /** @class */ (function () {
    function Workbook(_workbookImpl) {
        this._workbookImpl = _workbookImpl;
    }
    Workbook.prototype.getAllDataSourcesAsync = function () {
        return this._workbookImpl.getAllDataSourcesAsync();
    };
    return Workbook;
}());
exports.Workbook = Workbook;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Models/Worksheet.js":
/*!***************************************************!*\
  !*** ./lib/src/ExtensionsApi/Models/Worksheet.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var FilterChangedEvent_1 = __webpack_require__(/*! ../Events/FilterChangedEvent */ "./lib/src/ExtensionsApi/Events/FilterChangedEvent.js");
var MarksSelectedEvent_1 = __webpack_require__(/*! ../Events/MarksSelectedEvent */ "./lib/src/ExtensionsApi/Events/MarksSelectedEvent.js");
var SummaryDataChangedEvent_1 = __webpack_require__(/*! ../Events/SummaryDataChangedEvent */ "./lib/src/ExtensionsApi/Events/SummaryDataChangedEvent.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ../Services/ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
var Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/ExtensionsApi/Models/Dashboard.js");
var Sheet_1 = __webpack_require__(/*! ./Sheet */ "./lib/src/ExtensionsApi/Models/Sheet.js");
var Worksheet = /** @class */ (function (_super) {
    __extends(Worksheet, _super);
    function Worksheet(_worksheetImpl) {
        var _this = _super.call(this, _worksheetImpl) || this;
        _this._worksheetImpl = _worksheetImpl;
        // Call to initialize events and then call down to the event listener manager to handle things
        _this.initializeEvents().forEach(function (e) { return _this.addNewEventType(e); });
        return _this;
    }
    Object.defineProperty(Worksheet.prototype, "parentDashboard", {
        get: function () {
            // This should never happen for Extensions if the DashboardImpls are created correctly
            if (this._worksheetImpl.parentDashboard == null) {
                throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ImplementationError, "Parent dashboard not implemented");
            }
            return new Dashboard_1.Dashboard(this._worksheetImpl.parentDashboard);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Helper method which goes through and registers each event type this impl knows about
     * with the NotificationService. It returns an array of SingleEventManager objects which
     * can then be passed to an EventListenerManager to handle user registration / unregistration.
     *
     * @param {Worksheet} worksheet The worksheet object which will be included with the event notifications
     * @returns {Array<SingleEventManager>} Collection of event managers to pass to an EventListenerManager
     */
    Worksheet.prototype.initializeEvents = function () {
        var _this = this;
        var results = new Array();
        var notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            // If we don't have this service registered, just return
            return results;
        }
        // Initialize all of the event managers we'll need (one for each event type)
        var marksEvent = new api_shared_js_1.SingleEventManagerImpl(api_external_contract_js_1.TableauEventType.MarkSelectionChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.SelectedMarksChanged, function (model) {
            var visualId = model;
            return _this.visualIdsAreEqual(visualId, _this._worksheetImpl.visualId);
        }, function () { return marksEvent.triggerEvent(function () { return new MarksSelectedEvent_1.MarksSelectedEvent(_this); }); });
        var filterEvent = new api_shared_js_1.SingleEventManagerImpl(api_external_contract_js_1.TableauEventType.FilterChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.FilterChanged, function (model) {
            var filterEventResponse = model;
            return _this._worksheetImpl.visualId.worksheet === filterEventResponse.visualId.worksheet;
        }, function (event) {
            filterEvent.triggerEvent(function () { return new FilterChangedEvent_1.FilterChangedEvent(_this, event.fieldName, event.fieldId); });
        });
        var summaryDataEvent = new api_shared_js_1.SingleEventManagerImpl(api_external_contract_js_1.TableauEventType.SummaryDataChanged);
        notificationService.registerHandler(api_internal_contract_js_1.NotificationId.SummaryDataChanged, function (model) {
            var summaryDataEventResponse = model;
            return _this._worksheetImpl.visualId.worksheet === summaryDataEventResponse.visualId.worksheet;
        }, function (event) {
            summaryDataEvent.triggerEvent(function () { return new SummaryDataChangedEvent_1.SummaryDataChangedEvent(_this); });
        });
        results.push(marksEvent);
        results.push(filterEvent);
        results.push(summaryDataEvent);
        return results;
    };
    Worksheet.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        return this._worksheetImpl.applyFilterAsync(fieldName, values, updateType, options);
    };
    Worksheet.prototype.applyRangeFilterAsync = function (fieldName, filterOptions) {
        return this._worksheetImpl.applyRangeFilterAsync(fieldName, filterOptions);
    };
    Worksheet.prototype.applyHierarchicalFilterAsync = function (fieldName, values, updateType, options) {
        return this._worksheetImpl.applyHierarchicalFilterAsync(fieldName, values, updateType, options);
    };
    Worksheet.prototype.applyRelativeDateFilterAsync = function (fieldName, options) {
        return this._worksheetImpl.applyRelativeDateFilterAsync(fieldName, options);
    };
    Worksheet.prototype.clearFilterAsync = function (fieldName) {
        return this._worksheetImpl.clearFilterAsync(fieldName);
    };
    Worksheet.prototype.getDataSourcesAsync = function () {
        return this._worksheetImpl.getDataSourcesAsync();
    };
    Worksheet.prototype.getFiltersAsync = function () {
        return this._worksheetImpl.getFiltersAsync();
    };
    Worksheet.prototype.getSelectedMarksAsync = function () {
        return this._worksheetImpl.getSelectedMarksAsync();
    };
    Worksheet.prototype.getHighlightedMarksAsync = function () {
        return this._worksheetImpl.getHighlightedMarksAsync();
    };
    Worksheet.prototype.getSummaryDataAsync = function (options) {
        return this._worksheetImpl.getSummaryDataAsync(options);
    };
    Worksheet.prototype.getSummaryDataReaderAsync = function (pageRowCount, options) {
        return this._worksheetImpl.getSummaryDataReaderAsync(pageRowCount, options);
    };
    Worksheet.prototype.getSummaryColumnsInfoAsync = function () {
        return this._worksheetImpl.getSummaryColumnsInfoAsync();
    };
    Worksheet.prototype.getUnderlyingDataAsync = function (options) {
        console.warn('Worksheet.getUnderlyingDataAsync is deprecated. Please use ' +
            'Worksheet.getUnderlyingTablesAsync and Worksheet.getUnderlyingTableDataAsync');
        return this._worksheetImpl.getUnderlyingDataAsync(options);
    };
    Worksheet.prototype.getUnderlyingTablesAsync = function () {
        return this._worksheetImpl.getUnderlyingTablesAsync();
    };
    Worksheet.prototype.getUnderlyingTableDataAsync = function (logicalTableId, options) {
        return this._worksheetImpl.getUnderlyingTableDataAsync(logicalTableId, options);
    };
    Worksheet.prototype.getUnderlyingTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        return this._worksheetImpl.getUnderlyingTableDataReaderAsync(logicalTableId, pageRowCount, options);
    };
    Worksheet.prototype.getVisualSpecificationAsync = function () {
        return this._worksheetImpl.getVisualSpecificationAsync();
    };
    Worksheet.prototype.clearSelectedMarksAsync = function () {
        return this._worksheetImpl.clearSelectedMarksAsync();
    };
    Worksheet.prototype.selectMarksByIDAsync = function (marksInfo, updateType) {
        return this._worksheetImpl.selectMarksByIdAsync(marksInfo, updateType);
    };
    Worksheet.prototype.selectMarksByValueAsync = function (selections, selectionUpdateType) {
        return this._worksheetImpl.selectMarksByValueAsync(selections, selectionUpdateType);
    };
    Worksheet.prototype.selectMarksByIdAsync = function (selections, selectionUpdateType) {
        return this._worksheetImpl.selectMarksByIdAsync(selections, selectionUpdateType);
    };
    Worksheet.prototype.annotateMarkAsync = function (mark, annotationText) {
        return this._worksheetImpl.annotateMarkAsync(mark, annotationText);
    };
    Worksheet.prototype.getAnnotationsAsync = function () {
        return this._worksheetImpl.getAnnotationsAsync();
    };
    Worksheet.prototype.removeAnnotationAsync = function (annotation) {
        return this._worksheetImpl.removeAnnotationAsync(annotation);
    };
    Worksheet.prototype.hoverTupleAsync = function (hoveredTuple, tooltip, allowHoverActions) {
        if (allowHoverActions === void 0) { allowHoverActions = true; }
        return this._worksheetImpl.hoverTupleAsync(hoveredTuple, tooltip, allowHoverActions);
    };
    Worksheet.prototype.selectTuplesAsync = function (selectedTuples, selectOption, tooltip) {
        return this._worksheetImpl.selectTuplesAsync(selectedTuples, selectOption, tooltip);
    };
    Worksheet.prototype.getTooltipTextAsync = function (tupleId) {
        return this._worksheetImpl.getTooltipTextAsync(tupleId);
    };
    Worksheet.prototype.leaveMarkNavigationAsync = function () {
        return this._worksheetImpl.leaveMarkNavigationAsync();
    };
    Worksheet.prototype.visualIdsAreEqual = function (a, b) {
        return (a &&
            b &&
            a.worksheet === b.worksheet &&
            a.dashboard === b.dashboard &&
            a.storyboard === b.storyboard &&
            a.storyPointID === b.storyPointID);
    };
    return Worksheet;
}(Sheet_1.Sheet));
exports.Worksheet = Worksheet;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/DashboardContent.js":
/*!**************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/DashboardContent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the external DashboardContent namespace.
 * This does not follow the Impl pattern as DashboardContent is
 * currently just a (single) property bag.
 */
var DashboardContent = /** @class */ (function () {
    function DashboardContent(_dashboard) {
        this._dashboard = _dashboard;
    }
    Object.defineProperty(DashboardContent.prototype, "dashboard", {
        get: function () {
            return this._dashboard;
        },
        enumerable: true,
        configurable: true
    });
    return DashboardContent;
}());
exports.DashboardContent = DashboardContent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/Environment.js":
/*!*********************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/Environment.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var ConnectedServer_1 = __webpack_require__(/*! ../Impl/ConnectedServer */ "./lib/src/ExtensionsApi/Impl/ConnectedServer.js");
var WorkbookFormattingEnvUtil_1 = __webpack_require__(/*! ./WorkbookFormattingEnvUtil */ "./lib/src/ExtensionsApi/Namespaces/WorkbookFormattingEnvUtil.js");
/**
 * Implementation of the external environment namespace.
 * Environment does not follow the Impl pattern as it is
 * just a property bag.
 * First class extensions can get to ConnectedServer with: environment['connectedServer']
 */
var Environment = /** @class */ (function () {
    function Environment(extensionEnvironment) {
        this._apiVersion = api_shared_js_1.ApiVersion.Instance && api_shared_js_1.ApiVersion.Instance.formattedValue; // maj.min.fix (no build)
        this._context = api_shared_js_1.InternalToExternalEnumMappings.extensionContext.convert(extensionEnvironment.extensionContext);
        this._formatting = WorkbookFormattingEnvUtil_1.WorkbookFormattingEnvUtil.convertToWorkbookFormatting(extensionEnvironment.workbookFormatting);
        this._language = extensionEnvironment.extensionLanguage;
        this._country = extensionEnvironment.extensionCountry;
        this._locale = extensionEnvironment.extensionLocale;
        this._mode = api_shared_js_1.InternalToExternalEnumMappings.extensionMode.convert(extensionEnvironment.extensionMode);
        this._operatingSystem = extensionEnvironment.operatingSystem;
        this._tableauVersion = extensionEnvironment.tableauVersion;
        this._uniqueUserId = extensionEnvironment.uniqueUserId;
        // If we have a userId, then we are a first class extension
        if (extensionEnvironment.userId) {
            this.connectedServer = new ConnectedServer_1.ConnectedServer(extensionEnvironment.userId, extensionEnvironment.siteId, extensionEnvironment.siteNamespace, extensionEnvironment.workbookId);
            this.featureFlags = extensionEnvironment.featureFlags;
        }
    }
    Object.defineProperty(Environment.prototype, "apiVersion", {
        get: function () {
            return this._apiVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "context", {
        get: function () {
            return this._context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "workbookFormatting", {
        get: function () {
            return this._formatting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "language", {
        get: function () {
            return this._language;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "country", {
        get: function () {
            return this._country;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "locale", {
        get: function () {
            return this._locale;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "mode", {
        get: function () {
            return this._mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "operatingSystem", {
        get: function () {
            return this._operatingSystem;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "tableauVersion", {
        get: function () {
            return this._tableauVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Environment.prototype, "uniqueUserId", {
        get: function () {
            return this._uniqueUserId;
        },
        enumerable: true,
        configurable: true
    });
    return Environment;
}());
exports.Environment = Environment;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/Extensions.js":
/*!********************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/Extensions.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the external Extensions namespace.
 */
var Extensions = /** @class */ (function () {
    function Extensions(extensionImpl) {
        this.extensionImpl = extensionImpl;
        this.extensionImpl = extensionImpl;
    }
    Object.defineProperty(Extensions.prototype, "dashboardContent", {
        get: function () {
            return this.extensionImpl.dashboardContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "worksheetContent", {
        get: function () {
            return this.extensionImpl.worksheetContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "environment", {
        get: function () {
            return this.extensionImpl.environment;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "settings", {
        get: function () {
            return this.extensionImpl.settings;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "ui", {
        get: function () {
            return this.extensionImpl.ui;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "workbook", {
        get: function () {
            return this.extensionImpl.workbook;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Extensions.prototype, "dashboardObjectId", {
        get: function () {
            return this.extensionImpl.extensionZoneId;
        },
        enumerable: true,
        configurable: true
    });
    Extensions.prototype.initializeAsync = function (contextMenuCallbacks) {
        return this.extensionImpl.initializeAsync(false, contextMenuCallbacks).then();
    };
    Extensions.prototype.initializeDialogAsync = function () {
        return this.extensionImpl.initializeAsync(true);
    };
    Extensions.prototype.createVizImageAsync = function (inputSpec) {
        return this.extensionImpl.createVizImageAsync(inputSpec);
    };
    Extensions.prototype.setClickThroughAsync = function (clickThroughEnabled) {
        return this.extensionImpl.setClickThroughAsync(clickThroughEnabled);
    };
    return Extensions;
}());
exports.Extensions = Extensions;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/Settings.js":
/*!******************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/Settings.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
/**
 * Implementation of the external settings namespace.
 */
var Settings = /** @class */ (function (_super) {
    __extends(Settings, _super);
    function Settings(_settingsImpl) {
        var _this = _super.call(this) || this;
        _this._settingsImpl = _settingsImpl;
        // Initialize our event handling for this class
        _this._settingsImpl.initializeEvents().forEach(function (e) { return _this.addNewEventType(e); });
        return _this;
    }
    Settings.prototype.erase = function (key) {
        this._settingsImpl.erase(key);
    };
    Settings.prototype.get = function (key) {
        return this._settingsImpl.get(key);
    };
    Settings.prototype.getAll = function () {
        return this._settingsImpl.getAll();
    };
    Object.defineProperty(Settings.prototype, "isModified", {
        get: function () {
            return this._settingsImpl.isModified;
        },
        enumerable: true,
        configurable: true
    });
    Settings.prototype.saveAsync = function () {
        return this._settingsImpl.saveAsync();
    };
    Settings.prototype.set = function (key, value) {
        this._settingsImpl.set(key, value);
    };
    return Settings;
}(api_shared_js_1.EventListenerManager));
exports.Settings = Settings;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/UI.js":
/*!************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/UI.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the external UI namespace.
 */
var UI = /** @class */ (function () {
    function UI(_impl) {
        this._impl = _impl;
    }
    UI.prototype.displayDialogAsync = function (url, payload, options) {
        return this._impl.displayDialogAsync(url, payload, options);
    };
    UI.prototype.closeDialog = function (payload) {
        this._impl.closeDialog(payload);
    };
    return UI;
}());
exports.UI = UI;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/WorkbookFormattingEnvUtil.js":
/*!***********************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/WorkbookFormattingEnvUtil.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var WorkbookFormattingEnvUtil = /** @class */ (function () {
    function WorkbookFormattingEnvUtil() {
    }
    WorkbookFormattingEnvUtil.convertToWorkbookFormatting = function (workbookFormattingModel) {
        if (!workbookFormattingModel) {
            return undefined;
        }
        else {
            var formattingMap = workbookFormattingModel.formattingSheets.map(function (currentFormattingSheet) {
                var formattingSheet = {
                    classNameKey: api_shared_js_1.InternalToExternalEnumMappings.classNameKey.convert(currentFormattingSheet.classNameKey),
                    cssProperties: {
                        fontFamily: currentFormattingSheet.cssProperties.fontFamily,
                        fontSize: currentFormattingSheet.cssProperties.fontSize,
                        fontWeight: currentFormattingSheet.cssProperties.fontWeight,
                        fontStyle: currentFormattingSheet.cssProperties.fontStyle,
                        textDecoration: currentFormattingSheet.cssProperties.textDecoration,
                        color: currentFormattingSheet.cssProperties.color,
                    },
                };
                return formattingSheet;
            });
            var result = {
                formattingSheets: formattingMap,
            };
            return result;
        }
    };
    return WorkbookFormattingEnvUtil;
}());
exports.WorkbookFormattingEnvUtil = WorkbookFormattingEnvUtil;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Namespaces/WorksheetContent.js":
/*!**************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Namespaces/WorksheetContent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the external WorksheetContent namespace.
 * This does not follow the Impl pattern as WorksheetContent is
 * currently just a (single) property bag.
 */
var WorksheetContent = /** @class */ (function () {
    function WorksheetContent(_worksheet) {
        this._worksheet = _worksheet;
    }
    Object.defineProperty(WorksheetContent.prototype, "worksheet", {
        get: function () {
            return this._worksheet;
        },
        enumerable: true,
        configurable: true
    });
    return WorksheetContent;
}());
exports.WorksheetContent = WorksheetContent;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Services/Impl/InitializationServiceImpl.js":
/*!**************************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Services/Impl/InitializationServiceImpl.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var InitializationServiceImpl = /** @class */ (function (_super) {
    __extends(InitializationServiceImpl, _super);
    function InitializationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(InitializationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "InitializationService" /* InitializationService */;
        },
        enumerable: true,
        configurable: true
    });
    InitializationServiceImpl.prototype.initializeDashboardExtensionsAsync = function (isExtensionDialog, contextMenuIds) {
        var _a;
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'initializeDashboardExtensionsAsync',
            _a[api_internal_contract_js_1.ParameterId.ExtensionContextMenuIds] = contextMenuIds,
            _a[api_internal_contract_js_1.ParameterId.IsExtensionDialog] = isExtensionDialog,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.InitializeExtension, params).then(function (response) {
            // TODO - Validate return value
            var result = response.result;
            return result;
        });
    };
    return InitializationServiceImpl;
}(api_shared_js_1.ServiceImplBase));
exports.InitializationServiceImpl = InitializationServiceImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Services/Impl/SettingsServiceImpl.js":
/*!********************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Services/Impl/SettingsServiceImpl.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var SettingsServiceImpl = /** @class */ (function (_super) {
    __extends(SettingsServiceImpl, _super);
    function SettingsServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SettingsServiceImpl.prototype, "serviceName", {
        get: function () {
            return "SettingsService" /* SettingsService */;
        },
        enumerable: true,
        configurable: true
    });
    SettingsServiceImpl.prototype.saveSettingsAsync = function (settings) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'saveSettingsAsync',
            _a[api_internal_contract_js_1.ParameterId.SettingsValues] = settings,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SaveExtensionSettings, parameters).then(function (value) {
            var result = value.result;
            if (!result || !result.settingsValues) {
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, 'Unexpected error savings settings.');
            }
            return result.settingsValues;
        });
    };
    return SettingsServiceImpl;
}(api_shared_js_1.ServiceImplBase));
exports.SettingsServiceImpl = SettingsServiceImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Services/Impl/UIServiceImpl.js":
/*!**************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Services/Impl/UIServiceImpl.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var DEFAULT_DIALOG_HEIGHT = 400; // in pixels
var DEFAULT_DIALOG_WIDTH = 600; // in pixels
var DEFAULT_DIALOG_STYLE = api_external_contract_js_1.DialogStyle.Window;
var UIServiceImpl = /** @class */ (function (_super) {
    __extends(UIServiceImpl, _super);
    function UIServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(UIServiceImpl.prototype, "serviceName", {
        get: function () {
            return "UIService" /* UIService */;
        },
        enumerable: true,
        configurable: true
    });
    UIServiceImpl.prototype.displayDialogAsync = function (url, payload, options) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'displayDialogAsync',
            _a[api_internal_contract_js_1.ParameterId.ExtensionDialogUrl] = url,
            _a[api_internal_contract_js_1.ParameterId.ExtensionDialogPayload] = payload,
            _a);
        var h = options && options.height ? options.height : DEFAULT_DIALOG_HEIGHT;
        var w = options && options.width ? options.width : DEFAULT_DIALOG_WIDTH;
        var dialogStyle = options && options.dialogStyle ? options.dialogStyle : DEFAULT_DIALOG_STYLE;
        // On the platform side, we do something reasonable regardess of whether the passed
        // height and width are too large or too small.  But this likely indicates a developer error,
        // so we throw an error here to help with debugging.
        if (h <= 0 || w <= 0) {
            throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'Size parameters for displayDialogAsync must be positive');
        }
        parameters[api_internal_contract_js_1.ParameterId.ExtensionDialogH] = h;
        parameters[api_internal_contract_js_1.ParameterId.ExtensionDialogW] = w;
        api_shared_js_1.ErrorHelpers.verifyEnumValue(dialogStyle, api_external_contract_js_1.DialogStyle, 'DialogStyle');
        parameters[api_internal_contract_js_1.ParameterId.ExtensionDialogStyle] = api_shared_js_1.ExternalToInternalEnumMappings.dialogStyles.convert(dialogStyle);
        return this.execute(api_internal_contract_js_1.VerbId.DisplayDialog, parameters).then(function (response) {
            var dialogResult = response.result;
            switch (dialogResult) {
                case api_internal_contract_js_1.ExtensionDialogResult.DialogAlreadyOpen:
                    throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.DialogAlreadyOpen, 'There already exists an open dialog for this extension.');
                case api_internal_contract_js_1.ExtensionDialogResult.InvalidDomain:
                    throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidDomainDialog, 'The url of an extension dialog must match the domain of the parent extension.');
                default:
                    // Success case
                    return;
            }
        });
    };
    UIServiceImpl.prototype.closeDialog = function (payload) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'closeDialog',
            _a);
        if (payload) {
            parameters[api_internal_contract_js_1.ParameterId.ExtensionDialogPayload] = payload;
        }
        return this.execute(api_internal_contract_js_1.VerbId.CloseDialog, parameters).then(function () {
            return;
        });
    };
    UIServiceImpl.prototype.setClickThroughAsync = function (clickThroughEnabled, extensionZoneId) {
        var _a;
        api_shared_js_1.ErrorHelpers.verifyParameterType(clickThroughEnabled, 'boolean', 'clickThroughEnabled');
        if (extensionZoneId === undefined || extensionZoneId <= 0) {
            throw new api_shared_js_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, 'Extension Id is invalid.');
        }
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.ExtensionZoneId] = extensionZoneId,
            _a[api_internal_contract_js_1.ParameterId.ClickThroughEnabled] = clickThroughEnabled,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SetClickThrough, parameters).then(function () {
            return;
        });
    };
    return UIServiceImpl;
}(api_shared_js_1.ServiceImplBase));
exports.UIServiceImpl = UIServiceImpl;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Services/RegisterAllExtensionsServices.js":
/*!*************************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Services/RegisterAllExtensionsServices.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
var InitializationServiceImpl_1 = __webpack_require__(/*! ./Impl/InitializationServiceImpl */ "./lib/src/ExtensionsApi/Services/Impl/InitializationServiceImpl.js");
var SettingsServiceImpl_1 = __webpack_require__(/*! ./Impl/SettingsServiceImpl */ "./lib/src/ExtensionsApi/Services/Impl/SettingsServiceImpl.js");
var UIServiceImpl_1 = __webpack_require__(/*! ./Impl/UIServiceImpl */ "./lib/src/ExtensionsApi/Services/Impl/UIServiceImpl.js");
var ServiceRegistryUtil_1 = __webpack_require__(/*! ./ServiceRegistryUtil */ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js");
function registerAllExtensionsServices(dispatcher) {
    api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).registerService(new SettingsServiceImpl_1.SettingsServiceImpl(dispatcher, ServiceRegistryUtil_1.ExtensionsRegistryId));
    api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).registerService(new UIServiceImpl_1.UIServiceImpl(dispatcher, ServiceRegistryUtil_1.ExtensionsRegistryId));
}
exports.registerAllExtensionsServices = registerAllExtensionsServices;
function registerInitializationExtensionsServices(dispatcher) {
    api_shared_js_1.ApiServiceRegistry.get(ServiceRegistryUtil_1.ExtensionsRegistryId).registerService(new InitializationServiceImpl_1.InitializationServiceImpl(dispatcher, ServiceRegistryUtil_1.ExtensionsRegistryId));
}
exports.registerInitializationExtensionsServices = registerInitializationExtensionsServices;


/***/ }),

/***/ "./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js":
/*!***************************************************************!*\
  !*** ./lib/src/ExtensionsApi/Services/ServiceRegistryUtil.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ExtensionsRegistryId = 0;


/***/ }),

/***/ "../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js":
/*!***************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// This file re-exports everything which is part of the extensions api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./ExternalContract/Embedding/AskDataInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js"));
var Enums_1 = __webpack_require__(/*! ./ExternalContract/Embedding/Enums */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js");
exports.ApiMenuType = Enums_1.ApiMenuType;
exports.CrosstabFileFormat = Enums_1.CrosstabFileFormat;
exports.DeviceType = Enums_1.DeviceType;
exports.EmbeddingErrorCodes = Enums_1.EmbeddingErrorCodes;
exports.EmbeddingTableauEventType = Enums_1.TableauEventType;
exports.FileFormats = Enums_1.FileFormats;
exports.PrintOrientation = Enums_1.PrintOrientation;
exports.PrintPageSize = Enums_1.PrintPageSize;
exports.PrintScaling = Enums_1.PrintScaling;
exports.PulseLayout = Enums_1.PulseLayout;
exports.SheetSizeBehavior = Enums_1.SheetSizeBehavior;
exports.TableauDialogType = Enums_1.TableauDialogType;
exports.Toolbar = Enums_1.Toolbar;
__export(__webpack_require__(/*! ./ExternalContract/Embedding/PulseInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/PulseInterfaces.js"));
__export(__webpack_require__(/*! ./ExternalContract/Embedding/VizInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js"));
__export(__webpack_require__(/*! ./ExternalContract/Embedding/WebComponentInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js"));
__export(__webpack_require__(/*! ./SharedApiExternalContract */ "../api-external-contract-js/lib/src/SharedApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js":
/*!****************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// This file re-exports everything which is part of the extensions api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Tableau_1 = __webpack_require__(/*! ./ExternalContract/Extensions/Namespaces/Tableau */ "../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js");
exports.ErrorCodes = Tableau_1.ErrorCodes;
exports.ExtensionContext = Tableau_1.ExtensionContext;
exports.ExtensionMode = Tableau_1.ExtensionMode;
exports.TableauEventType = Tableau_1.TableauEventType;
exports.VizImageEncodingType = Tableau_1.VizImageEncodingType;
exports.VizImagePaletteType = Tableau_1.VizImagePaletteType;
exports.VizImageSizeSettingAlignmentType = Tableau_1.VizImageSizeSettingAlignmentType;
exports.VizImageSizeSettingType = Tableau_1.VizImageSizeSettingType;
exports.VizImageSortDirectionType = Tableau_1.VizImageSortDirectionType;
__export(__webpack_require__(/*! ./SharedApiExternalContract */ "../api-external-contract-js/lib/src/SharedApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract.js":
/*!***************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./EmbeddingApiExternalContract */ "../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js"));
__export(__webpack_require__(/*! ./ExtensionsApiExternalContract */ "../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js":
/*!*******************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-ask-data> web component.
 * @ignore
 * @deprecated
 */
var AskDataAttributes;
(function (AskDataAttributes) {
    AskDataAttributes["Origin"] = "origin";
    AskDataAttributes["ShowEmbed"] = "show-embed";
    AskDataAttributes["ShowPin"] = "show-pin";
    AskDataAttributes["ShowSave"] = "show-save";
    AskDataAttributes["ShowShare"] = "show-share";
})(AskDataAttributes = exports.AskDataAttributes || (exports.AskDataAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js":
/*!*******************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

// All enum values made available to Embedding developers.
// Enums should be kept in alphabetical order.
// Most of them should match an enum on the server defined at
// workgroup/vqlweb/scriptsharp/src/ApiShared/PublicEnums.cs#L398:17
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Crosstab file formats available to use with {@link Viz.exportCrosstabAsync}
 */
var CrosstabFileFormat;
(function (CrosstabFileFormat) {
    CrosstabFileFormat["CSV"] = "csv";
    CrosstabFileFormat["Excel"] = "xlsx";
})(CrosstabFileFormat = exports.CrosstabFileFormat || (exports.CrosstabFileFormat = {}));
/**
 * Device types available to use with {@link Viz.device}
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["Default"] = "default";
    DeviceType["Desktop"] = "desktop";
    DeviceType["Tablet"] = "tablet";
    DeviceType["Phone"] = "phone";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
/**
 * All error codes used by the Embedding API.
 */
var EmbeddingErrorCodes;
(function (EmbeddingErrorCodes) {
    /**
     * Raised when a request to the auth endpoint fails.
     */
    EmbeddingErrorCodes["AuthFailed"] = "auth-failed";
    /**
     * The browser is not capable of supporting the Tableau Embedding API
     */
    EmbeddingErrorCodes["BrowserNotCapable"] = "browser-not-capable";
    /**
     * The permissions on a workbook or a view do not allow downloading the workbook.
     */
    EmbeddingErrorCodes["DownloadWorkbookNotAllowed"] = "download-workbook-not-allowed";
    /**
     * Thrown when an error occurs while attempting to perform a filter operation.
     */
    EmbeddingErrorCodes["FilterCannotBePerformed"] = "filter-cannot-be-performed";
    /**
     * Thrown when attempting to switch to a sheet by index that does not exist in the workbook.
     */
    EmbeddingErrorCodes["IndexOutOfRange"] = "index-out-of-range";
    /**
     * Thrown when an error occurs within the Tableau Embedding API. Contact Tableau Support.
     */
    EmbeddingErrorCodes["InternalError"] = "internal-error";
    /**
     * An operation was attempted on a custom view that does not exist.
     */
    EmbeddingErrorCodes["InvalidCustomViewName"] = "invalid-custom-view-name";
    /**
     * An invalid date was specified in a method that required a date parameter.
     */
    EmbeddingErrorCodes["InvalidDateParameter"] = "invalid-date-parameter";
    /**
     * Either a filter operation was attempted on a field that does not exist in the data source, or the value supplied
     * in the filter operation is the wrong data type or format.
     */
    EmbeddingErrorCodes["invalidFilterFieldNameOrValue"] = "invalid-filter-field-name";
    /**
     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message
     * field.
     */
    EmbeddingErrorCodes["InvalidParameter"] = "invalid-parameter";
    /**
     * A negative size was specified or the maxSize value is less than minSize in Sheet.changeSizeAsync().
     */
    EmbeddingErrorCodes["InvalidSize"] = "invalid-size";
    /**
     * Attempted to get an authoring worksheet when the current sheet is not a worksheet.
     * @ignore
     */
    EmbeddingErrorCodes["InvalidSheetType"] = "invalid-sheet-type";
    /**
     * A behavior value was found that is not included in the SheetSizeBehavior enum.
     */
    EmbeddingErrorCodes["InvalidSizeBehavior"] = "invalid-size-behavior";
    /**
     * A behavior other than SheetSizeBehavior.Automatic was specified in Sheet.changeSizeAsync() when the sheet is a
     * Worksheet instance.
     */
    EmbeddingErrorCodes["InvalidSizeBehaviorOnWorksheet"] = "invalid-size-behavior-on-worksheet";
    /**
     * The URL specified in the Viz class constructor is not valid.
     */
    EmbeddingErrorCodes["InvalidUrl"] = "invalid-url";
    /**
     * The maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtMost.
     */
    EmbeddingErrorCodes["MissingMaxSize"] = "missing-max-size";
    /**
     * The minSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtLeast.
     */
    EmbeddingErrorCodes["MissingMinSize"] = "missing-min-size";
    /**
     * The minSize or maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.Range.
     */
    EmbeddingErrorCodes["MissingMinMaxSize"] = "missing-min-max-size";
    /**
     * Can occur if the embedding app interacts with a parameter that has been removed from the worksheet.
     */
    EmbeddingErrorCodes["MissingParameter"] = "missing-parameter";
    /**
     * The rangeN field is missing for a relative date filter of type LASTN or NEXTN.
     */
    EmbeddingErrorCodes["MissingRangeNForRelativeDateFilters"] = "missing-range-n-for-relative-date-filters";
    /**
     * An attempt was made to access Sheet.getUrl() on a hidden sheet. Hidden sheets do not have URLs.
     */
    EmbeddingErrorCodes["NoUrlForHiddenWorksheet"] = "no-url-for-hidden-worksheet";
    /**
     * One or both of the parentElement or the URL parameters is not specified in the Viz constructor.
     */
    EmbeddingErrorCodes["NoUrlOrParentElementNotFound"] = "no-url-or-parent-element-not-found";
    /**
     * An operation was attempted on a sheet that is not active or embedded within the active dashboard.
     */
    EmbeddingErrorCodes["NotActiveSheet"] = "not-active-sheet";
    /**
     * A required parameter was not specified, null, or an empty string/array.
     */
    EmbeddingErrorCodes["NullOrEmptyParameter"] = "null-or-empty-parameter";
    /**
     * An operation was attempted on a sheet that does not exist in the workbook.
     */
    EmbeddingErrorCodes["SheetNotInWorkbook"] = "sheet-not-in-workbook";
    /**
     * An operation is performed on a CustomView object that is no longer valid (it has been removed).
     */
    EmbeddingErrorCodes["StaleDataReference"] = "stale-data-reference";
    /**
     * Unknown error triggered during the auth flow.
     */
    EmbeddingErrorCodes["UnknownAuthError"] = "unknown-auth-error";
    /**
     * An unknown event name was specified in the call to Viz.addEventListener or Viz.removeEventListener.
     */
    EmbeddingErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
    /**
     * A Viz object has already been created as a child of the parentElement specified in the Viz constructor.
     */
    EmbeddingErrorCodes["VizAlreadyInManager"] = "viz-already-in-manager";
    /**
     * Function is not supported in the embedding api.
     */
    EmbeddingErrorCodes["ImplementationError"] = "wrong-implementation";
    /**
     * @NotImplemented
     */
    EmbeddingErrorCodes["NotImplemented"] = "not-implemented";
    /**
     * Unknown error during event initialization
     */
    EmbeddingErrorCodes["EventInitializationError"] = "event-initialization-error";
    /**
     * Version of the embedding api not supported by the version of tableau
     */
    EmbeddingErrorCodes["IncompatibleVersionError"] = "incompatible-version-error";
    /**
     * Unknown {@link TableauDialogType} passed in to Viz.displayDialogAsync.
     */
    EmbeddingErrorCodes["UnknownDialogType"] = "unknown-dialog-type";
    /**
     * Can occur if the API interacts with a filter that has been removed from the worksheet.
     * Can also occurs if a {@link FilterType} has not been implemented.
     */
    EmbeddingErrorCodes["FilterMissingOrNotImplemented"] = "filter-missing-not-implemented";
    /**
     * Can occur if story point ids no longer match.
     */
    EmbeddingErrorCodes["StoryPointIdMismatch"] = "storypoint-id-mismatch";
})(EmbeddingErrorCodes = exports.EmbeddingErrorCodes || (exports.EmbeddingErrorCodes = {}));
/**
 * Formats available to use with displayStaticImage in @VizInterfaces
 */
var FileFormats;
(function (FileFormats) {
    FileFormats["PDF"] = "pdf";
    FileFormats["PNG"] = "png";
})(FileFormats = exports.FileFormats || (exports.FileFormats = {}));
var PrintOrientation;
(function (PrintOrientation) {
    PrintOrientation["Portrait"] = "portrait";
    PrintOrientation["Landscape"] = "landscape";
})(PrintOrientation = exports.PrintOrientation || (exports.PrintOrientation = {}));
var PrintPageSize;
(function (PrintPageSize) {
    PrintPageSize["Letter"] = "letter";
    PrintPageSize["Legal"] = "legal";
    PrintPageSize["Note"] = "note";
    PrintPageSize["Folio"] = "folio";
    PrintPageSize["Tabloid"] = "tabloid";
    PrintPageSize["Ledger"] = "ledger";
    PrintPageSize["Statement"] = "statement";
    PrintPageSize["Executive"] = "executive";
    PrintPageSize["A3"] = "A3";
    PrintPageSize["A4"] = "A4";
    PrintPageSize["A5"] = "A5";
    PrintPageSize["B4"] = "B4";
    PrintPageSize["B5"] = "B5";
    PrintPageSize["Quarto"] = "quarto";
    PrintPageSize["Unspecified"] = "unspecified";
})(PrintPageSize = exports.PrintPageSize || (exports.PrintPageSize = {}));
var PrintScaling;
(function (PrintScaling) {
    PrintScaling["Automatic"] = "automatic";
    PrintScaling["Perc25"] = "25%";
    PrintScaling["Perc50"] = "50%";
    PrintScaling["Perc60"] = "60%";
    PrintScaling["Perc75"] = "75%";
    PrintScaling["Perc80"] = "80%";
    PrintScaling["Perc90"] = "90%";
    PrintScaling["Perc100"] = "100%";
    PrintScaling["Perc200"] = "200%";
    PrintScaling["Perc400"] = "400%";
    PrintScaling["AtMost1PageHigh"] = "at-most-1-page-high";
    PrintScaling["AtMost2PagesHigh"] = "at-most-2-pages-high";
    PrintScaling["AtMost1PageWide"] = "at-most-1-page-wide";
    PrintScaling["AtMost2PagesWide"] = "at-most-2-pages-wide";
})(PrintScaling = exports.PrintScaling || (exports.PrintScaling = {}));
var RevertVizSelection;
(function (RevertVizSelection) {
    RevertVizSelection["All"] = "all";
    RevertVizSelection["Axes"] = "axes";
    RevertVizSelection["Filters"] = "filters";
    RevertVizSelection["Sorts"] = "sorts";
    RevertVizSelection["Shelves"] = "shelves";
})(RevertVizSelection = exports.RevertVizSelection || (exports.RevertVizSelection = {}));
var ToolbarButtons;
(function (ToolbarButtons) {
    ToolbarButtons["Alerts"] = "alerts";
    ToolbarButtons["AskData"] = "askData";
    ToolbarButtons["CustomViews"] = "customViews";
    ToolbarButtons["DataDetails"] = "dataDetails";
    ToolbarButtons["Share"] = "share";
    ToolbarButtons["Subscribe"] = "subscribe";
})(ToolbarButtons = exports.ToolbarButtons || (exports.ToolbarButtons = {}));
var Toolbar;
(function (Toolbar) {
    Toolbar["Top"] = "top";
    Toolbar["Bottom"] = "bottom";
    Toolbar["Hidden"] = "hidden";
})(Toolbar = exports.Toolbar || (exports.Toolbar = {}));
var SheetSizeBehavior;
(function (SheetSizeBehavior) {
    SheetSizeBehavior["Automatic"] = "automatic";
    SheetSizeBehavior["Exactly"] = "exactly";
    SheetSizeBehavior["Range"] = "range";
    SheetSizeBehavior["AtLeast"] = "atleast";
    SheetSizeBehavior["AtMost"] = "atmost";
})(SheetSizeBehavior = exports.SheetSizeBehavior || (exports.SheetSizeBehavior = {}));
var PulseLayout;
(function (PulseLayout) {
    PulseLayout["Default"] = "default";
    PulseLayout["Card"] = "card";
    PulseLayout["Ban"] = "ban";
})(PulseLayout = exports.PulseLayout || (exports.PulseLayout = {}));
/**
 * Be careful when adding new event types. Extensions and embedding follow two different patterns on how events are named.
 * Events should be all lower case and without hyphens or underscores.
 */
/**
 * Represents the type of tableau embedding event that can be listened for.
 */
var TableauEventType;
(function (TableauEventType) {
    /**
     * Raised when a custom view has finished loading. This event is raised after the callback function for {@link FirstInteractive} (if any) has been called.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewLoaded"] = "customviewloaded";
    /**
     * Raised when a custom view has been removed.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewRemoved"] = "customviewremoved";
    /**
     * Raised when a custom view has been saved (newly created or updated).
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSaved"] = "customviewsaved";
    /**
     * Raised when a custom view has been set as the default view for a workbook.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSetDefault"] = "customviewsetdefault";
    /** Raised when the user clicks on the Edit Button.
     *
     * @category Viewing
     */
    TableauEventType["EditButtonClicked"] = "editbuttonclicked";
    /** Raised when the user clicks on the Edit In Desktop Button.
     *
     * @category Authoring, Viewing
     */
    TableauEventType["EditInDesktopButtonClicked"] = "editindesktopbuttonclicked";
    /** Raised when any filter has changed state. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["FilterChanged"] = "filterchanged";
    /** Fired when viz size is known
     *
     * @category Authoring, Viewing
     */
    TableauEventType["FirstVizSizeKnown"] = "firstvizsizeknown";
    /** Fired when a viz first becomes interactive
     *
     * @category Authoring, Viewing
     */
    TableauEventType["FirstInteractive"] = "firstinteractive";
    /** Raised when a custom mark context menu is clicked.
     *
     * @category Viewing
     */
    TableauEventType["CustomMarkContextMenuEvent"] = "custommarkcontextmenu";
    /** The selected marks on a visualization have changed. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["MarkSelectionChanged"] = "markselectionchanged";
    /** A parameter has had its value modified. You can use this event type with [[Parameter]] objects.
     *
     * @category Viewing
     */
    TableauEventType["ParameterChanged"] = "parameterchanged";
    /** Raised when a toolbar button or control becomes available or becomes unavailable.
     *
     * @category Viewing
     */
    TableauEventType["ToolbarStateChanged"] = "toolbarstatechanged";
    /** Raised when the workbook is ready to close. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookReadyToClose"] = "workbookreadytoclose";
    /** Raised when the workbook has been published. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublished"] = "workbookpublished";
    /** Raised when "publish as" is successful. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublishedAs"] = "workbookpublishedas";
    /**
     * Raised when a URL action occurs. See the {@link UrlActionEvent} class.
     *
     * @category Viewing
     */
    TableauEventType["UrlAction"] = "urlaction";
    /**
     * Raised after a tab switch occurs (the active sheet has changed). Guarantees the viz object will be interactive after this.
     *
     * @category Viewing
     */
    TableauEventType["TabSwitched"] = "tabswitched";
    /**
     *
     * Raised after a new story point becomes active.
     *
     * @category Viewing
     */
    TableauEventType["StoryPointSwitched"] = "storypointswitched";
    /**
     *
     * Raised when an error occurs while loading the contents of the webcomponent.
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["VizLoadError"] = "vizloaderror";
    /**
     * Raised after the iframe src attribute has been updated
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["IframeSrcUpdated"] = "iframesrcupdated";
    /**
     * Raised when changes are made to summary data.
     *
     * @category Viewing
     */
    TableauEventType["SummaryDataChanged"] = "summarydatachanged";
    /**
     * Raised when tableau (viz-client) is ready to receive an auth token.
     * Used for authentication in salesforce native mode.
     *
     * @hidden
     * @category Authoring, Viewing,
     */
    TableauEventType["ReadyToReceiveAuthToken"] = "readytoreceiveauthtoken";
})(TableauEventType = exports.TableauEventType || (exports.TableauEventType = {}));
/**
 * Represents the location of a context menu where users can add external menu items.
 */
var ApiMenuType;
(function (ApiMenuType) {
    /** External menu item will be injected in ubertip dialog */
    ApiMenuType["Ubertip"] = "ubertip";
})(ApiMenuType = exports.ApiMenuType || (exports.ApiMenuType = {}));
/** You can use this type with a {@link Viz} object. */
var TableauDialogType;
(function (TableauDialogType) {
    /**
     * Used to display the download PDF dialog.
     */
    TableauDialogType["ExportPDF"] = "export-pdf";
    /**
     * Used to display the download PowerPoint dialog.
     */
    TableauDialogType["ExportPowerPoint"] = "export-powerpoint";
    /**
     * Used to display the download Data dialog.
     */
    TableauDialogType["ExportData"] = "export-data";
    /**
     * Used to display the download CrossTab dialog.
     */
    TableauDialogType["ExportCrossTab"] = "export-cross-tab";
    /**
     * Used to display the download Workbook dialog.
     */
    TableauDialogType["ExportWorkbook"] = "export-workbook";
    /**
     * Used to display the Share dialog.
     */
    TableauDialogType["Share"] = "share";
})(TableauDialogType = exports.TableauDialogType || (exports.TableauDialogType = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/PulseInterfaces.js":
/*!*****************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/PulseInterfaces.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-pulse> web component.
 * @ignore
 */
var PulseAttributes;
(function (PulseAttributes) {
    PulseAttributes["DisableExploreFilter"] = "disable-explore-filter";
    PulseAttributes["Layout"] = "layout";
})(PulseAttributes = exports.PulseAttributes || (exports.PulseAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js":
/*!***************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The shared string constants you can use as HTML attributes for the <tableau-viz> and <tableau-authoring-viz> web component.
 * @ignore
 */
var VizSharedAttributes;
(function (VizSharedAttributes) {
    VizSharedAttributes["TouchOptimize"] = "touch-optimize";
    VizSharedAttributes["HideEditInDesktopButton"] = "hide-edit-in-desktop-button";
    VizSharedAttributes["SuppressDefaultEditBehavior"] = "suppress-default-edit-behavior";
    VizSharedAttributes["DisableVersionCheck"] = "disable-version-check";
    VizSharedAttributes["OnEditInDesktopButtonClicked"] = "onEditInDesktopButtonClicked";
    VizSharedAttributes["OnFirstVizSizeKnown"] = "onFirstVizSizeKnown";
    VizSharedAttributes["OnFirstInteractive"] = "onFirstInteractive";
})(VizSharedAttributes = exports.VizSharedAttributes || (exports.VizSharedAttributes = {}));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-viz> web component.
 * @ignore
 */
var VizAttributes;
(function (VizAttributes) {
    VizAttributes["DisableUrlActionsPopups"] = "disable-url-actions";
    VizAttributes["HideTabs"] = "hide-tabs";
    VizAttributes["Toolbar"] = "toolbar";
    VizAttributes["InstanceIdToClone"] = "instance-id-to-clone";
    VizAttributes["Device"] = "device";
    VizAttributes["HideEditButton"] = "hide-edit-button";
    VizAttributes["OnEditButtonClicked"] = "onEditButtonClicked";
    VizAttributes["OnFilterChanged"] = "onFilterChanged";
    VizAttributes["OnCustomMarkContextMenuEvent"] = "onCustomMarkContextMenuEvent";
    VizAttributes["OnMarkSelectionChanged"] = "onMarkSelectionChanged";
    VizAttributes["OnParameterChanged"] = "onParameterChanged";
    VizAttributes["OnToolbarStateChanged"] = "onToolbarStateChanged";
    VizAttributes["OnUrlAction"] = "onUrlAction";
    VizAttributes["OnTabSwitched"] = "onTabSwitched";
    VizAttributes["OnCustomViewLoaded"] = "onCustomViewLoaded";
    VizAttributes["OnCustomViewRemoved"] = "onCustomViewRemoved";
    VizAttributes["OnCustomViewSaved"] = "onCustomViewSaved";
    VizAttributes["OnCustomViewSetDefault"] = "onCustomViewSetDefault";
    VizAttributes["OnStoryPointSwitched"] = "onStoryPointSwitched";
    VizAttributes["OnSummaryDataChanged"] = "onSummaryDataChanged";
    VizAttributes["OnReadyToReceiveAuthToken"] = "onReadyToReceiveAuthToken";
})(VizAttributes = exports.VizAttributes || (exports.VizAttributes = {}));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-authoring-viz> web component.
 * @ignore
 */
var VizAuthoringAttributes;
(function (VizAuthoringAttributes) {
    VizAuthoringAttributes["OnWorkbookPublished"] = "onWorkbookPublished";
    VizAuthoringAttributes["OnWorkbookPublishedAs"] = "onWorkbookPublishedAs";
    VizAuthoringAttributes["OnWorkbookReadyToClose"] = "onWorkbookReadyToClose";
    VizAuthoringAttributes["HideCloseButton"] = "hide-close-button";
})(VizAuthoringAttributes = exports.VizAuthoringAttributes || (exports.VizAuthoringAttributes = {}));
/**
 * The names of the string constants you can use as child tags for TableauViz and TableauAuthoringViz custom elements.
 */
var VizChildElements;
(function (VizChildElements) {
    /**
     * Contains a list of filter parameters. Available only in viewing mode.
     */
    VizChildElements["VizFilter"] = "viz-filter";
    /**
     * Contains a name and value for a parameter. Available only in viewing mode.
     */
    VizChildElements["VizParameter"] = "viz-parameter";
    /**
     * Contains a list of custom parameters.  Available in both viewing and authoring modes.
     */
    VizChildElements["CustomParameter"] = "custom-parameter";
})(VizChildElements = exports.VizChildElements || (exports.VizChildElements = {}));
var VizChildElementAttributes;
(function (VizChildElementAttributes) {
    VizChildElementAttributes["Field"] = "field";
    VizChildElementAttributes["Value"] = "value";
    VizChildElementAttributes["Name"] = "name";
})(VizChildElementAttributes = exports.VizChildElementAttributes || (exports.VizChildElementAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js":
/*!************************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The names of the common string constants you can use as HTML attributes for the tableau web component.
 * @ignore
 */
var WebComponentAttributes;
(function (WebComponentAttributes) {
    WebComponentAttributes["Src"] = "src";
    WebComponentAttributes["Width"] = "width";
    WebComponentAttributes["Height"] = "height";
    WebComponentAttributes["Token"] = "token";
    WebComponentAttributes["Debug"] = "debug";
    WebComponentAttributes["IframeAuth"] = "iframe-auth";
    WebComponentAttributes["OnVizLoadError"] = "onvizloaderror";
    WebComponentAttributes["ForceTokenSync"] = "force-token-sync";
})(WebComponentAttributes = exports.WebComponentAttributes || (exports.WebComponentAttributes = {}));
/**
 * The names of the string constants you can use as child tags for TableauViz, TableauAuthoringViz and TableauAskData custom elements.
 * @ignore
 */
var WebComponentChildElements;
(function (WebComponentChildElements) {
    /**
     * Contains a list of custom parameters.  Available in viz viewing, viz authoring and askdata.
     */
    WebComponentChildElements["CustomParameter"] = "custom-parameter";
})(WebComponentChildElements = exports.WebComponentChildElements || (exports.WebComponentChildElements = {}));
var WebComponentChildElementAttributes;
(function (WebComponentChildElementAttributes) {
    WebComponentChildElementAttributes["Field"] = "field";
    WebComponentChildElementAttributes["Value"] = "value";
    WebComponentChildElementAttributes["Name"] = "name";
})(WebComponentChildElementAttributes = exports.WebComponentChildElementAttributes || (exports.WebComponentChildElementAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js":
/*!*********************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js ***!
  \*********************************************************************************************/
/***/ ((module) => {

"use strict";

// All enum values made available to Extensions developers.
// Enums should be kept in alphabetical order.
var Tableau;
(function (Tableau) {
    /**
     * All error codes used by the Extensions API.
     */
    var ErrorCodes;
    (function (ErrorCodes) {
        /**
         * Thrown when caller attempts to execute command before initialization has completed.
         */
        ErrorCodes["APINotInitialized"] = "api-not-initialized";
        /**
         * Thrown when caller attempts to execute command while extension is not visible.
         */
        ErrorCodes["VisibilityError"] = "visibility-error";
        /**
         * Only one dialog can be opened at time with the UI namespace functionality.
         */
        ErrorCodes["DialogAlreadyOpen"] = "dialog-already-open";
        /**
         * The open dialog was closed by the user.
         */
        ErrorCodes["DialogClosedByUser"] = "dialog-closed-by-user";
        /**
         * An error occurred within the Tableau Extensions API. Contact Tableau Support.
         */
        ErrorCodes["InternalError"] = "internal-error";
        /**
         * A dialog must start on the same domain as the parent extenion.
         */
        ErrorCodes["InvalidDomainDialog"] = "invalid-dialog-domain";
        /**
         * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message field.
         */
        ErrorCodes["InvalidParameter"] = "invalid-parameter";
        /**
         * Can occur if the extension interacts with a filter that has been removed from the worksheet.
         */
        ErrorCodes["MissingFilter"] = "missing-filter";
        /**
         * Can occur if the extension interacts with a parameter that has been removed from the worksheet.
         */
        ErrorCodes["MissingParameter"] = "missing-parameter";
        /**
         * Internal Server Error
         */
        ErrorCodes["ServerError"] = "server-error";
        /**
         * Developer cannot save settings while another save is still in progress.
         */
        ErrorCodes["SettingSaveInProgress"] = "setting-save-in-progress";
        /**
         * An unknown event name was specified in the call to `addEventListener` or `removeEventListener`.
         */
        ErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
        /**
         * A method was used for a type of data source that doesn't support that method (see getActiveTablesAsync for an example)
         */
        ErrorCodes["UnsupportedMethodForDataSourceType"] = "unsupported-method-for-data-source-type";
    })(ErrorCodes = Tableau.ErrorCodes || (Tableau.ErrorCodes = {}));
    /**
     * The context in which the Extensions is currently running.
     */
    var ExtensionContext;
    (function (ExtensionContext) {
        ExtensionContext["Desktop"] = "desktop";
        ExtensionContext["Server"] = "server";
    })(ExtensionContext = Tableau.ExtensionContext || (Tableau.ExtensionContext = {}));
    /**
     * The mode in which the Extensions is currently running.
     */
    var ExtensionMode;
    (function (ExtensionMode) {
        ExtensionMode["Authoring"] = "authoring";
        ExtensionMode["Viewing"] = "viewing";
    })(ExtensionMode = Tableau.ExtensionMode || (Tableau.ExtensionMode = {}));
    /**
     * Represents the type of event that can be listened for.
     */
    var TableauEventType;
    (function (TableauEventType) {
        /** Raised when any filter has changed state. You can use this event type with [Worksheet](../interfaces/worksheet.html) objects.*/
        TableauEventType["FilterChanged"] = "filter-changed";
        /** The selected marks on a visualization has changed.
         * You can use this event type with [Worksheet](../interfaces/worksheet.html) objects. */
        TableauEventType["MarkSelectionChanged"] = "mark-selection-changed";
        /** The summary data backing a worksheet has changed
         * You can use this event type with [Worksheet](../interfaces/worksheet.html) objects.*/
        TableauEventType["SummaryDataChanged"] = "summary-data-changed";
        /** A parameter has had its value modified. You can use this event type with [[Parameter]] objects. */
        TableauEventType["ParameterChanged"] = "parameter-changed";
        /** Settings have been changed for this extension. You can use this event type with [[Settings]] objects. */
        TableauEventType["SettingsChanged"] = "settings-changed";
        /** The dashboard layout has changed
         * @category Dashboard Extensions
         */
        TableauEventType["DashboardLayoutChanged"] = "dashboard-layout-changed";
        /** The workbook formatting has changed
         * @category Dashboard Extensions
         */
        TableauEventType["WorkbookFormattingChanged"] = "workbook-formatting-changed";
    })(TableauEventType = Tableau.TableauEventType || (Tableau.TableauEventType = {}));
    /**
     * Enum that represents the data type of encodings for createVizImageAsync.
     * @since 1.6.0
     */
    var VizImageEncodingType;
    (function (VizImageEncodingType) {
        VizImageEncodingType["Discrete"] = "discrete";
        VizImageEncodingType["Continuous"] = "continuous";
    })(VizImageEncodingType = Tableau.VizImageEncodingType || (Tableau.VizImageEncodingType = {}));
    /**
     * Enum that represents the sort direction for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSortDirectionType;
    (function (VizImageSortDirectionType) {
        VizImageSortDirectionType["Ascending"] = "ascending";
        VizImageSortDirectionType["Descending"] = "descending";
    })(VizImageSortDirectionType = Tableau.VizImageSortDirectionType || (Tableau.VizImageSortDirectionType = {}));
    /**
     * Enum that represents the palette type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImagePaletteType;
    (function (VizImagePaletteType) {
        VizImagePaletteType["CustomDiverging"] = "custom-diverging";
        VizImagePaletteType["CustomSequential"] = "custom-sequential";
    })(VizImagePaletteType = Tableau.VizImagePaletteType || (Tableau.VizImagePaletteType = {}));
    /**
     * Enum that represents the Size Setting type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSizeSettingType;
    (function (VizImageSizeSettingType) {
        VizImageSizeSettingType["Fixed"] = "fixed";
        VizImageSizeSettingType["Manual"] = "manual";
    })(VizImageSizeSettingType = Tableau.VizImageSizeSettingType || (Tableau.VizImageSizeSettingType = {}));
    /**
     * Enum that represents the Size Setting alignment type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSizeSettingAlignmentType;
    (function (VizImageSizeSettingAlignmentType) {
        VizImageSizeSettingAlignmentType["Right"] = "right";
        VizImageSizeSettingAlignmentType["Left"] = "left";
        VizImageSizeSettingAlignmentType["Center"] = "center";
    })(VizImageSizeSettingAlignmentType = Tableau.VizImageSizeSettingAlignmentType || (Tableau.VizImageSizeSettingAlignmentType = {}));
})(Tableau || (Tableau = {}));
module.exports = Tableau;


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js":
/*!****************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var SharedErrorCodes;
(function (SharedErrorCodes) {
    /**
     * A CSV or Excel file failed to be created in Viz.exportCrosstabAsync().
     */
    SharedErrorCodes["CrosstabCreationError"] = "crosstab-creation-error";
    /**
     * A CSV file failed to be created in Viz.exportDataAsync().
     */
    SharedErrorCodes["DataCreationError"] = "data-creation-error";
    /**
     * An invalid aggregation was specified for the filter, such as setting a range filter to "SUM(Sales)" instead of
     * "Sales".
     */
    SharedErrorCodes["InvalidAggregationFieldName"] = "invalid-aggregation-field-name";
    /**
     * A filter operation was attempted on a field that does not exist in the data source.
     */
    SharedErrorCodes["InvalidFilterFieldName"] = "invalid-filter-name";
    /**
     * A filter operation was attempted using a value that is the wrong data type or format.
     */
    SharedErrorCodes["InvalidFilterFieldValue"] = "invalid-filter-fieldValue";
    /**
     * An invalid date value was specified in a Sheet.selectMarksAsync() call for a date field.
     */
    SharedErrorCodes["InvalidSelectionDate"] = "invalid-selection-date";
    /**
     * A field was specified in a Sheet.selectMarksAsync() call that does not exist in the data source.
     */
    SharedErrorCodes["InvalidSelectionFieldName"] = "invalid-selection-fieldName";
    /**
     * An invalid value was specified in a Sheet.selectMarksAsync() call.
     */
    SharedErrorCodes["InvalidSelectionValue"] = "invalid-selection-value";
    /**
     * A parameter did not include a valid sheet selection for exporting.
     */
    SharedErrorCodes["InvalidSelectionSheet"] = "invalid-selection-sheet";
    /**
     * An error occurred within the Tableau API. Contact Tableau Support.
     */
    SharedErrorCodes["InternalError"] = "internal-error";
    /**
     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message field.
     */
    SharedErrorCodes["InvalidParameter"] = "invalid-parameter";
    /**
     * A PDF file failed to be created in Viz.exportPDFAsync().
     */
    SharedErrorCodes["PDFCreationError"] = "pdf-creation-error";
    /**
     * A PowerPoint file failed to be created in Viz.exportPowerPointAsync().
     */
    SharedErrorCodes["PowerPointCreationError"] = "powerpoint-creation-error";
    /**
     * An operation was attempted on a sheet that is not active or embedded within the active dashboard.
     */
    SharedErrorCodes["NotActiveSheet"] = "not-active-sheet";
    /**
     * Property or Function is not supported within the Tableau API.
     */
    SharedErrorCodes["ImplementationError"] = "wrong-implementation";
    /**
     * Can occur when two incompatible calls are triggered together.
     */
    SharedErrorCodes["ApiExecutionError"] = "api-execution-error";
    /**
     * A general-purpose server error occurred. Details are contained in the Error object.
     */
    SharedErrorCodes["ServerError"] = "server-error";
    /**
     * Can occur when an api call times out.
     */
    SharedErrorCodes["Timeout"] = "timeout";
})(SharedErrorCodes = exports.SharedErrorCodes || (exports.SharedErrorCodes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js":
/*!*****************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js ***!
  \*****************************************************************************************/
/***/ (function(module) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * The tableau namespace exists for organization and to avoid polluting
 * the global namespace. It contains no constructs other than sub-namespaces and the Tableau enumerations.
 */
var Tableau;
(function (Tableau) {
    var AnalyticsObjectType;
    (function (AnalyticsObjectType) {
        AnalyticsObjectType["Cluster"] = "cluster";
        AnalyticsObjectType["Forecast"] = "forecast";
        AnalyticsObjectType["TrendLine"] = "trend-line";
    })(AnalyticsObjectType = Tableau.AnalyticsObjectType || (Tableau.AnalyticsObjectType = {}));
    var AnnotationType;
    (function (AnnotationType) {
        AnnotationType["Mark"] = "mark";
        AnnotationType["Point"] = "point";
        AnnotationType["Area"] = "area";
    })(AnnotationType = Tableau.AnnotationType || (Tableau.AnnotationType = {}));
    var ColumnType;
    (function (ColumnType) {
        ColumnType["Discrete"] = "discrete";
        ColumnType["Continuous"] = "continuous";
        ColumnType["Unknown"] = "unknown";
    })(ColumnType = Tableau.ColumnType || (Tableau.ColumnType = {}));
    var ClassNameKey;
    (function (ClassNameKey) {
        ClassNameKey["WorksheetTitle"] = "tableau-worksheet-title";
        ClassNameKey["Worksheet"] = "tableau-worksheet";
        ClassNameKey["Tooltip"] = "tableau-tooltip";
        ClassNameKey["StoryTitle"] = "tableau-story-title";
        ClassNameKey["DashboardTitle"] = "tableau-dashboard-title";
    })(ClassNameKey = Tableau.ClassNameKey || (Tableau.ClassNameKey = {}));
    /**
     * What the object represents in a dashboard.
     */
    var DashboardObjectType;
    (function (DashboardObjectType) {
        DashboardObjectType["Blank"] = "blank";
        DashboardObjectType["Worksheet"] = "worksheet";
        DashboardObjectType["QuickFilter"] = "quick-filter";
        DashboardObjectType["ParameterControl"] = "parameter-control";
        DashboardObjectType["PageFilter"] = "page-filter";
        DashboardObjectType["Legend"] = "legend";
        DashboardObjectType["Title"] = "title";
        DashboardObjectType["Text"] = "text";
        DashboardObjectType["Image"] = "image";
        DashboardObjectType["WebPage"] = "web-page";
        DashboardObjectType["Extension"] = "extension";
    })(DashboardObjectType = Tableau.DashboardObjectType || (Tableau.DashboardObjectType = {}));
    /**
     * Enum that represents the visibility state of a dashboard object.
     * @since 1.7.0
     */
    var DashboardObjectVisibilityType;
    (function (DashboardObjectVisibilityType) {
        /** Used for turning on the visibility of a dashboard object.*/
        DashboardObjectVisibilityType["Show"] = "show";
        /** Used for turning off the visibility of a dashboard object.*/
        DashboardObjectVisibilityType["Hide"] = "hide";
    })(DashboardObjectVisibilityType = Tableau.DashboardObjectVisibilityType || (Tableau.DashboardObjectVisibilityType = {}));
    /**
     * The different types of data a value can have
     */
    var DataType;
    (function (DataType) {
        DataType["String"] = "string";
        DataType["Int"] = "int";
        DataType["Float"] = "float";
        DataType["Bool"] = "bool";
        DataType["Date"] = "date";
        DataType["DateTime"] = "date-time";
        DataType["Spatial"] = "spatial";
        DataType["Unknown"] = "unknown";
    })(DataType = Tableau.DataType || (Tableau.DataType = {}));
    /**
     * Enum that represents the changes that occur to a dashboard object.
     */
    var DashboardLayoutChange;
    (function (DashboardLayoutChange) {
        /** A dashboard object was added */
        DashboardLayoutChange["Added"] = "added";
        /** A dashboard object was removed */
        DashboardLayoutChange["Removed"] = "removed";
        /** A dashboard object's floating state changed */
        DashboardLayoutChange["IsFloatingChanged"] = "is-floating-changed";
        /** A dashboard object's visibility changed */
        DashboardLayoutChange["IsVisibleChanged"] = "is-visible-changed";
        /** A dashboard object's position changed */
        DashboardLayoutChange["PositionChanged"] = "position-changed";
        /** A dashboard object's size changed */
        DashboardLayoutChange["SizeChanged"] = "size-changed";
        /** A dashboard object was renamed */
        DashboardLayoutChange["NameChanged"] = "name-changed";
        /** A dashboard object is selected */
        DashboardLayoutChange["Selected"] = "selected";
        /** A dashboard object is deselected */
        DashboardLayoutChange["Deselected"] = "deselected";
        /** Navigate to another dashboard */
        DashboardLayoutChange["DashboardChanged"] = "dashboard-changed";
    })(DashboardLayoutChange = Tableau.DashboardLayoutChange || (Tableau.DashboardLayoutChange = {}));
    /**
     * Valid date ranges for a relative date filter.
     */
    var DateRangeType;
    (function (DateRangeType) {
        DateRangeType["Last"] = "last";
        DateRangeType["LastN"] = "last-n";
        DateRangeType["Next"] = "next";
        DateRangeType["NextN"] = "next-n";
        DateRangeType["Current"] = "current";
        DateRangeType["ToDate"] = "to-date";
    })(DateRangeType = Tableau.DateRangeType || (Tableau.DateRangeType = {}));
    /**
     * Enum that represents the types of dialog popup styles.
     */
    var DialogStyle;
    (function (DialogStyle) {
        DialogStyle["Window"] = "window";
        DialogStyle["Modal"] = "modal";
        DialogStyle["Modeless"] = "modeless";
    })(DialogStyle = Tableau.DialogStyle || (Tableau.DialogStyle = {}));
    var EncodingType;
    (function (EncodingType) {
        EncodingType["Column"] = "column";
        EncodingType["Row"] = "row";
        EncodingType["Page"] = "page";
        EncodingType["Filter"] = "filter";
        EncodingType["MarksType"] = "marks-type";
        EncodingType["MeasureValues"] = "measure-values";
        EncodingType["Color"] = "color";
        EncodingType["Size"] = "size";
        EncodingType["Label"] = "label";
        EncodingType["Detail"] = "detail";
        EncodingType["Tooltip"] = "tooltip";
        EncodingType["Shape"] = "shape";
        EncodingType["Path"] = "path";
        EncodingType["Angle"] = "angle";
        EncodingType["Geometry"] = "geometry";
        EncodingType["Custom"] = "custom";
    })(EncodingType = Tableau.EncodingType || (Tableau.EncodingType = {}));
    /**
     *  Type of aggregation on a field.
     */
    var FieldAggregationType;
    (function (FieldAggregationType) {
        FieldAggregationType["Sum"] = "sum";
        FieldAggregationType["Avg"] = "avg";
        FieldAggregationType["Min"] = "min";
        FieldAggregationType["Max"] = "max";
        FieldAggregationType["Stdev"] = "stdev";
        FieldAggregationType["Stdevp"] = "stdevp";
        FieldAggregationType["Var"] = "var";
        FieldAggregationType["Varp"] = "varp";
        FieldAggregationType["Collect"] = "collect";
        FieldAggregationType["Count"] = "count";
        FieldAggregationType["Countd"] = "countd";
        FieldAggregationType["Median"] = "median";
        FieldAggregationType["Attr"] = "attr";
        FieldAggregationType["None"] = "none";
        FieldAggregationType["Year"] = "year";
        FieldAggregationType["Qtr"] = "qtr";
        FieldAggregationType["Month"] = "month";
        FieldAggregationType["Day"] = "day";
        FieldAggregationType["Hour"] = "hour";
        FieldAggregationType["Minute"] = "minute";
        FieldAggregationType["Second"] = "second";
        FieldAggregationType["Week"] = "week";
        FieldAggregationType["Weekday"] = "weekday";
        FieldAggregationType["MonthYear"] = "month-year";
        FieldAggregationType["Mdy"] = "mdy";
        FieldAggregationType["End"] = "end";
        FieldAggregationType["TruncYear"] = "trunc-year";
        FieldAggregationType["TruncQtr"] = "trunc-qtr";
        FieldAggregationType["TruncMonth"] = "trunc-month";
        FieldAggregationType["TruncWeek"] = "trunc-week";
        FieldAggregationType["TruncDay"] = "trunc-day";
        FieldAggregationType["TruncHour"] = "trunc-hour";
        FieldAggregationType["TruncMinute"] = "trunc-minute";
        FieldAggregationType["TruncSecond"] = "trunc-second";
        FieldAggregationType["Quart1"] = "quart1";
        FieldAggregationType["Quart3"] = "quart3";
        FieldAggregationType["Skewness"] = "skewness";
        FieldAggregationType["Kurtosis"] = "kurtosis";
        FieldAggregationType["InOut"] = "in-out";
        FieldAggregationType["User"] = "user";
    })(FieldAggregationType = Tableau.FieldAggregationType || (Tableau.FieldAggregationType = {}));
    /**
     * Role of a field.
     */
    var FieldRoleType;
    (function (FieldRoleType) {
        FieldRoleType["Dimension"] = "dimension";
        FieldRoleType["Measure"] = "measure";
        FieldRoleType["Unknown"] = "unknown";
    })(FieldRoleType = Tableau.FieldRoleType || (Tableau.FieldRoleType = {}));
    /**
     * An enumeration of the valid types of filters that can be applied.
     */
    var FilterType;
    (function (FilterType) {
        FilterType["Categorical"] = "categorical";
        FilterType["Range"] = "range";
        FilterType["Hierarchical"] = "hierarchical";
        FilterType["RelativeDate"] = "relative-date";
    })(FilterType = Tableau.FilterType || (Tableau.FilterType = {}));
    /**
     * The different update types for applying filter
     */
    var FilterUpdateType;
    (function (FilterUpdateType) {
        FilterUpdateType["Add"] = "add";
        FilterUpdateType["All"] = "all";
        FilterUpdateType["Replace"] = "replace";
        FilterUpdateType["Remove"] = "remove";
    })(FilterUpdateType = Tableau.FilterUpdateType || (Tableau.FilterUpdateType = {}));
    /**
     * The domain type for a filter
     */
    var FilterDomainType;
    (function (FilterDomainType) {
        /**
         * The domain values that are relevant to the specified filter
         * i.e. the domain is restricted by a previous filter
         */
        FilterDomainType["Relevant"] = "relevant";
        /**
         * list of all possible domain values from database
         */
        FilterDomainType["Database"] = "database";
    })(FilterDomainType = Tableau.FilterDomainType || (Tableau.FilterDomainType = {}));
    /**
     * The option for specifying which values to include for filtering
     * Indicates what to do with null values for a given filter or mark selection call.
     */
    var FilterNullOption;
    (function (FilterNullOption) {
        FilterNullOption["NullValues"] = "null-values";
        FilterNullOption["NonNullValues"] = "non-null-values";
        FilterNullOption["AllValues"] = "all-values";
    })(FilterNullOption = Tableau.FilterNullOption || (Tableau.FilterNullOption = {}));
    /**
     * Enum that serves as a filter on the DataValues returned from `getSummaryDataReaderAsync`,
     * `getUnderlyingTableDataReaderAsync` and `getLogicalTableDataReaderAsync`.
     * This is an optimization of returned data values only. Tableau versions prior to 2021.2
     * will pass the data across and populate the DataValue properties.
     * Please note that all properties not requested will be `undefined` in the DataValue results.
     * @since 1.5.0
     */
    var IncludeDataValuesOption;
    (function (IncludeDataValuesOption) {
        /** DataValues will include all properties.*/
        IncludeDataValuesOption["AllValues"] = "all-values";
        /** DataValues will only include value and nativeValue properties.*/
        IncludeDataValuesOption["OnlyNativeValues"] = "only-native-values";
        /** DataValues will only include formattedValue properties. */
        IncludeDataValuesOption["OnlyFormattedValues"] = "only-formatted-values";
    })(IncludeDataValuesOption = Tableau.IncludeDataValuesOption || (Tableau.IncludeDataValuesOption = {}));
    /**
     * Type of mark for a given marks card in a viz.
     */
    var MarkType;
    (function (MarkType) {
        MarkType["Bar"] = "bar";
        MarkType["Line"] = "line";
        MarkType["Area"] = "area";
        MarkType["Square"] = "square";
        MarkType["Circle"] = "circle";
        MarkType["Shape"] = "shape";
        MarkType["Text"] = "text";
        MarkType["Map"] = "map";
        MarkType["Pie"] = "pie";
        MarkType["GanttBar"] = "gantt-bar";
        MarkType["Polygon"] = "polygon";
        MarkType["Heatmap"] = "heatmap";
        MarkType["VizExtension"] = "viz-extension";
    })(MarkType = Tableau.MarkType || (Tableau.MarkType = {}));
    /**
     * An enumeration describing the different types of allowable values.
     * This is used for restricting the domain of a parameter
     */
    var ParameterValueType;
    (function (ParameterValueType) {
        ParameterValueType["All"] = "all";
        ParameterValueType["List"] = "list";
        ParameterValueType["Range"] = "range";
    })(ParameterValueType = Tableau.ParameterValueType || (Tableau.ParameterValueType = {}));
    /**
     * Date period used in filters and in parameters.
     */
    var PeriodType;
    (function (PeriodType) {
        PeriodType["Years"] = "years";
        PeriodType["Quarters"] = "quarters";
        PeriodType["Months"] = "months";
        PeriodType["Weeks"] = "weeks";
        PeriodType["Days"] = "days";
        PeriodType["Hours"] = "hours";
        PeriodType["Minutes"] = "minutes";
        PeriodType["Seconds"] = "seconds";
    })(PeriodType = Tableau.PeriodType || (Tableau.PeriodType = {}));
    var QuickTableCalcType;
    (function (QuickTableCalcType) {
        QuickTableCalcType["RunningTotal"] = "running-total";
        QuickTableCalcType["Difference"] = "difference";
        QuickTableCalcType["PercentDifference"] = "percent-difference";
        QuickTableCalcType["PercentOfTotal"] = "percent-of-total";
        QuickTableCalcType["Rank"] = "rank";
        QuickTableCalcType["Percentile"] = "percentile";
        QuickTableCalcType["MovingAverage"] = "moving-average";
        QuickTableCalcType["YTDTotal"] = "ytd-total";
        QuickTableCalcType["CompoundGrowthRate"] = "compound-growth-rate";
        QuickTableCalcType["YearOverYearGrowth"] = "year-over-year-growth";
        QuickTableCalcType["YTDGrowth"] = "ytd-growth";
        QuickTableCalcType["Undefined"] = "undefined";
    })(QuickTableCalcType = Tableau.QuickTableCalcType || (Tableau.QuickTableCalcType = {}));
    /**
     * Enum for specifying the selection type for select marks api.
     */
    var SelectionUpdateType;
    (function (SelectionUpdateType) {
        SelectionUpdateType["Replace"] = "select-replace";
        SelectionUpdateType["Add"] = "select-add";
        SelectionUpdateType["Remove"] = "select-remove";
    })(SelectionUpdateType = Tableau.SelectionUpdateType || (Tableau.SelectionUpdateType = {}));
    /**
     * Enum for specifying the select option for the `extensions.Worksheet.selectTuplesAsync` method.
     */
    var SelectOptions;
    (function (SelectOptions) {
        /**
         * Clears existing selection before selecting the tuples specified
         */
        SelectOptions["Simple"] = "select-options-simple";
        /**
         * Adds specified tuples to the existing selection
         */
        SelectOptions["Toggle"] = "select-options-toggle";
    })(SelectOptions = Tableau.SelectOptions || (Tableau.SelectOptions = {}));
    /**
     * The type of sheet a [[Sheet]] object represents
     */
    var SheetType;
    (function (SheetType) {
        SheetType["Dashboard"] = "dashboard";
        SheetType["Story"] = "story";
        SheetType["Worksheet"] = "worksheet";
    })(SheetType = Tableau.SheetType || (Tableau.SheetType = {}));
    var SortDirection;
    (function (SortDirection) {
        SortDirection["Increasing"] = "increasing";
        SortDirection["Decreasing"] = "decreasing";
    })(SortDirection = Tableau.SortDirection || (Tableau.SortDirection = {}));
    var TrendLineModelType;
    (function (TrendLineModelType) {
        TrendLineModelType["Linear"] = "linear";
        TrendLineModelType["Logarithmic"] = "logarithmic";
        TrendLineModelType["Exponential"] = "exponential";
        TrendLineModelType["Polynomial"] = "polynomial";
    })(TrendLineModelType = Tableau.TrendLineModelType || (Tableau.TrendLineModelType = {}));
    /**
     * Enum that represents the replay speed of an animation.
     * @since 1.7.0
     */
    var ReplaySpeedType;
    (function (ReplaySpeedType) {
        /** Used for setting the replay speed of an animation to 0.5x.*/
        ReplaySpeedType["Slow"] = "slow";
        /** Used for setting the replay speed of an animation to 1.0x.*/
        ReplaySpeedType["Normal"] = "normal";
        /** Used for setting the replay speed of an animation to 2.0x.*/
        ReplaySpeedType["Fast"] = "fast";
    })(ReplaySpeedType = Tableau.ReplaySpeedType || (Tableau.ReplaySpeedType = {}));
    /**
     * Enum that represents the selection state of a level in a hierarchical filter
     * @since Extensions 1.10.0
     */
    var HierarchicalLevelSelectionState;
    (function (HierarchicalLevelSelectionState) {
        HierarchicalLevelSelectionState["AllSelected"] = "all-selected";
        HierarchicalLevelSelectionState["NoneSelected"] = "none-selected";
        HierarchicalLevelSelectionState["SomeSelected"] = "some-selected";
        HierarchicalLevelSelectionState["UnknownSelected"] = "unknown-selected";
    })(HierarchicalLevelSelectionState = Tableau.HierarchicalLevelSelectionState || (Tableau.HierarchicalLevelSelectionState = {}));
    Tableau.ZoneVisibilityType = __assign({}, DashboardObjectVisibilityType);
})(Tableau || (Tableau = {}));
module.exports = Tableau;


/***/ }),

/***/ "../api-external-contract-js/lib/src/SharedApiExternalContract.js":
/*!************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/SharedApiExternalContract.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// This file re-exports everything which is part of the shared api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./ExternalContract/Shared/Enums */ "../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js"));
var Tableau_1 = __webpack_require__(/*! ./ExternalContract/Shared/Namespaces/Tableau */ "../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js");
exports.AnalyticsObjectType = Tableau_1.AnalyticsObjectType;
exports.AnnotationType = Tableau_1.AnnotationType;
exports.ClassNameKey = Tableau_1.ClassNameKey;
exports.ColumnType = Tableau_1.ColumnType;
exports.DashboardLayoutChange = Tableau_1.DashboardLayoutChange;
exports.DashboardObjectType = Tableau_1.DashboardObjectType;
exports.DashboardObjectVisibilityType = Tableau_1.DashboardObjectVisibilityType;
exports.DataType = Tableau_1.DataType;
exports.DateRangeType = Tableau_1.DateRangeType;
exports.DialogStyle = Tableau_1.DialogStyle;
exports.EncodingType = Tableau_1.EncodingType;
exports.FieldAggregationType = Tableau_1.FieldAggregationType;
exports.FieldRoleType = Tableau_1.FieldRoleType;
exports.FilterDomainType = Tableau_1.FilterDomainType;
exports.FilterNullOption = Tableau_1.FilterNullOption;
exports.FilterType = Tableau_1.FilterType;
exports.FilterUpdateType = Tableau_1.FilterUpdateType;
exports.HierarchicalLevelSelectionState = Tableau_1.HierarchicalLevelSelectionState;
exports.IncludeDataValuesOption = Tableau_1.IncludeDataValuesOption;
exports.MarkType = Tableau_1.MarkType;
exports.ParameterValueType = Tableau_1.ParameterValueType;
exports.PeriodType = Tableau_1.PeriodType;
exports.QuickTableCalcType = Tableau_1.QuickTableCalcType;
exports.ReplaySpeedType = Tableau_1.ReplaySpeedType;
exports.SelectOptions = Tableau_1.SelectOptions;
exports.SelectionUpdateType = Tableau_1.SelectionUpdateType;
exports.SheetType = Tableau_1.SheetType;
exports.SortDirection = Tableau_1.SortDirection;
exports.TrendLineModelType = Tableau_1.TrendLineModelType;
exports.ZoneVisibilityType = Tableau_1.ZoneVisibilityType;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/JsApiInternalContract.js":
/*!********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/JsApiInternalContract.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
// The following polyfills are needed for IE11
__webpack_require__(/*! core-js/es/number/is-integer */ "../../node_modules/core-js/es/number/is-integer.js");
__webpack_require__(/*! core-js/es/number/is-nan */ "../../node_modules/core-js/es/number/is-nan.js");
__webpack_require__(/*! core-js/es/object/assign */ "../../node_modules/core-js/es/object/assign.js");
// Export the version of the internal contract to be available at runtime
//  This file is generated by yarn publish:bump via scripts/publish-check.ts
//  updateInternalContractRuntimeVersion in the monorepo root.
var internalContractVersion = __webpack_require__(/*! ../internal-contract-version.json */ "../api-internal-contract-js/lib/internal-contract-version.json");
exports.INTERNAL_CONTRACT_VERSION = internalContractVersion;
__export(__webpack_require__(/*! ./contract/DataTypeConverter */ "../api-internal-contract-js/lib/src/contract/DataTypeConverter.js"));
__export(__webpack_require__(/*! ./contract/Enums */ "../api-internal-contract-js/lib/src/contract/Enums.js"));
__export(__webpack_require__(/*! ./contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js"));
__export(__webpack_require__(/*! ./contract/Parameters */ "../api-internal-contract-js/lib/src/contract/Parameters.js"));
__export(__webpack_require__(/*! ./contract/Verbs */ "../api-internal-contract-js/lib/src/contract/Verbs.js"));
__export(__webpack_require__(/*! ./interface/AskDataInterface */ "../api-internal-contract-js/lib/src/interface/AskDataInterface.js"));
__export(__webpack_require__(/*! ./interface/PulseInterface */ "../api-internal-contract-js/lib/src/interface/PulseInterface.js"));
__export(__webpack_require__(/*! ./interface/VqlInterface */ "../api-internal-contract-js/lib/src/interface/VqlInterface.js"));
__export(__webpack_require__(/*! ./messaging/CrossFrameMessenger */ "../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js"));
__export(__webpack_require__(/*! ./messaging/interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js"));
__export(__webpack_require__(/*! ./versioning/VersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js"));
__export(__webpack_require__(/*! ./versioning/external/ExternalIdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js"));
__export(__webpack_require__(/*! ./versioning/external/ExternalVersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js"));
// Export the version number of messaging for consumers to use.
// Be very careful making any updates to this contract which break version compatibility.
exports.MESSAGING_VERSION = {
    major: 1,
    minor: 0,
    fix: 0,
};


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/DataTypeConverter.js":
/*!*************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/DataTypeConverter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Enums_1 = __webpack_require__(/*! ./Enums */ "../api-internal-contract-js/lib/src/contract/Enums.js");
var DataTypeConverter = /** @class */ (function () {
    function DataTypeConverter() {
    }
    DataTypeConverter.isSpecial = function (valueAsString) {
        // Prior to ShowDataTablePresModel, special values come to us as
        // '%null%', '%all%', '%wildcard%', '%missing%'...
        // While this function will never return true for ShowDataTablePresModel conversion,
        // it is as cheap as passing around a version and checking that.
        // (See DataValueFormatter.cpp)
        if (valueAsString.length > 2 && valueAsString[0] === '%' && valueAsString[valueAsString.length - 1] === '%') {
            return true;
        }
        return false;
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.parseBoolean = function (booleanString) {
        // boolean values come to us as 'true'|'false'
        var normalizedBoolean = booleanString.toLowerCase();
        return normalizedBoolean !== 'true' && normalizedBoolean !== 'false' ? this.specialValueIndicator : normalizedBoolean === 'true';
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.parseNumber = function (valueAsString) {
        var value = Number(valueAsString);
        return isNaN(value) ? this.specialValueIndicator : value;
    };
    DataTypeConverter.parseDate = function (dateAsString) {
        // Note that without a time, the date is assumed to be UTC
        // Input of 2020-03-25 is printed as: Mar 24 2020 17:00:00 GMT-0700
        // This matches style used in existing convertFilterValuePresModel
        var value = new Date(dateAsString);
        return Number.isNaN(value.getTime()) ? null : value;
    };
    DataTypeConverter.parseDateTime = function (dateAsString) {
        // With a time, the date is assumed to be UTC.
        // Our date format is always: yyyy-mm-dd hh:mm:ss
        // Unfortunately, IE11 can't parse that format so we add a T between the day and time.
        // We also add a Z so that it is UTC. (Without the Z, some browsers assume local, and others UTC)
        var formattedDateString = dateAsString.replace(' ', 'T').concat('Z');
        var value = new Date(formattedDateString);
        return Number.isNaN(value.getTime()) ? null : value;
    };
    // It would be nice to merge this and the method FilterConverter::convertFilterValuePresModel in api-platform-js
    DataTypeConverter.convertValueAsStringToValue = function (valueAsString, type) {
        // This is both DataDictionary and ShowDataTablePresModel compatible.
        // In the DataDictionary, valueAsString can be '%null%' or '%missing%', while in
        // ShowDataTablePresModel, we can get 'null' or 'missing', or '%null%' for string special values.
        // For either of these cases, we return specialValueIndicator (or the original special string).
        // To maintain backwards compatibilty, this converter:
        // 1. returns a string for any special values
        // 2. returns a string for any date
        // Parameter min/max values can be undefined, so result is also undefined
        if (valueAsString === undefined || valueAsString === null) {
            return undefined;
        }
        if (this.isSpecial(valueAsString)) {
            return valueAsString;
        }
        switch (type) {
            case Enums_1.DataType.Bool:
                return this.parseBoolean(valueAsString);
            case Enums_1.DataType.Int:
            case Enums_1.DataType.Float:
                // Return special value '%null%' for any failure in parsing.
                // We need to do that because ShowDataTablePresModel will give us strings like 'null'
                // for special values.
                return this.parseNumber(valueAsString);
            case Enums_1.DataType.Date:
                // For ShowDataTablePresModel, special values will be "null" which will fail to parse.
                // In that case, we return '%null%'.
                return this.parseDate(valueAsString) === null ? this.specialValueIndicator : valueAsString;
            case Enums_1.DataType.DateTime:
                // For ShowDataTablePresModel, special values will be "null" which will fail to parse.
                // In that case, we return '%null%'
                return this.parseDateTime(valueAsString) === null ? this.specialValueIndicator : valueAsString;
            case Enums_1.DataType.Spatial:
            case Enums_1.DataType.String:
            default:
                return valueAsString;
        }
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.convertValueToNativeValue = function (value, type) {
        // This converts from our 1.2 API that returns strings for specials, and dates as strings.
        // It takes the special case of '%null%' and returns a null.
        // For dates, it returns a Date object rather than a string.
        // convertValueToNativeValue should be used to build a DataValue.nativeValue field.
        // Parameter min/max can be undefined. If that is the case, nativeValue is treated like a special
        if (value === undefined || value === null) {
            return null;
        }
        switch (type) {
            case Enums_1.DataType.Bool:
                return typeof value === 'string' ? null : value;
            case Enums_1.DataType.Int:
            case Enums_1.DataType.Float:
                return typeof value === 'string' ? null : value;
            case Enums_1.DataType.Date:
                // Convert the string to Date object (or null if parsing fails ... we assume special)
                return this.parseDate(value);
            case Enums_1.DataType.DateTime:
                // Convert the string to Date object (or null if parsing fails ... we assume special)
                return this.parseDateTime(value);
            case Enums_1.DataType.String:
                return this.isSpecial(value) ? null : value;
            case Enums_1.DataType.Spatial:
            default:
                return value;
        }
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.convertStringValueToNativeValue = function (value, type) {
        // This handles the conversion from string directly to native value for all types
        return this.convertValueToNativeValue(this.convertValueAsStringToValue(value, type), type);
    };
    DataTypeConverter.specialValueIndicator = '%null%';
    return DataTypeConverter;
}());
exports.DataTypeConverter = DataTypeConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Enums.js":
/*!*************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Enums.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ExtensionContext;
(function (ExtensionContext) {
    ExtensionContext["Desktop"] = "desktop";
    ExtensionContext["Server"] = "server";
    ExtensionContext["Unknown"] = "unknown";
})(ExtensionContext = exports.ExtensionContext || (exports.ExtensionContext = {}));
var ExtensionMode;
(function (ExtensionMode) {
    ExtensionMode["Authoring"] = "authoring";
    ExtensionMode["Viewing"] = "viewing";
    ExtensionMode["Unknown"] = "unknown";
})(ExtensionMode = exports.ExtensionMode || (exports.ExtensionMode = {}));
var AnnotateEnum;
(function (AnnotateEnum) {
    AnnotateEnum["Mark"] = "mark";
    AnnotateEnum["Point"] = "point";
    AnnotateEnum["Area"] = "area";
})(AnnotateEnum = exports.AnnotateEnum || (exports.AnnotateEnum = {}));
var ColumnType;
(function (ColumnType) {
    ColumnType["Discrete"] = "discrete";
    ColumnType["Continuous"] = "continuous";
    ColumnType["Unknown"] = "unknown";
})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
var DashboardObjectType;
(function (DashboardObjectType) {
    DashboardObjectType["Blank"] = "blank";
    DashboardObjectType["Worksheet"] = "worksheet";
    DashboardObjectType["QuickFilter"] = "quick-filter";
    DashboardObjectType["ParameterControl"] = "parameter-control";
    DashboardObjectType["PageFilter"] = "page-filter";
    DashboardObjectType["Legend"] = "legend";
    DashboardObjectType["Title"] = "title";
    DashboardObjectType["Text"] = "text";
    DashboardObjectType["Image"] = "image";
    DashboardObjectType["WebPage"] = "web-page";
    DashboardObjectType["Extension"] = "extension";
})(DashboardObjectType = exports.DashboardObjectType || (exports.DashboardObjectType = {}));
var DataType;
(function (DataType) {
    DataType["String"] = "string";
    DataType["Int"] = "int";
    DataType["Float"] = "float";
    DataType["Bool"] = "bool";
    DataType["Date"] = "date";
    DataType["DateTime"] = "date-time";
    DataType["Spatial"] = "spatial";
    DataType["Unknown"] = "unknown";
})(DataType = exports.DataType || (exports.DataType = {}));
var DialogStyle;
(function (DialogStyle) {
    DialogStyle["Window"] = "window";
    DialogStyle["Modal"] = "modal";
    DialogStyle["Modeless"] = "modeless";
})(DialogStyle = exports.DialogStyle || (exports.DialogStyle = {}));
var EncodedDataType;
(function (EncodedDataType) {
    EncodedDataType["Number"] = "number";
    EncodedDataType["String"] = "string";
    EncodedDataType["Date"] = "date";
    EncodedDataType["Boolean"] = "boolean";
})(EncodedDataType = exports.EncodedDataType || (exports.EncodedDataType = {}));
var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes["INITIALIZATION_ERROR"] = "initialization-error";
    ErrorCodes["INTERNAL_ERROR"] = "internal-error";
    ErrorCodes["MISSING_ENUM_MAPPING"] = "missing-enum-mapping";
    ErrorCodes["MISSING_PARAMETER"] = "missing-parameter";
    ErrorCodes["PERMISSION_DENIED"] = "permission-denied";
    ErrorCodes["PRES_MODEL_PARSING_ERROR"] = "pres-model-parsing-error";
    ErrorCodes["VERSION_NOT_CONFIGURED"] = "version-not-configured";
    ErrorCodes["VISIBILITY_ERROR"] = "visibility-error";
    ErrorCodes["UNKNOWN_VERB_ID"] = "unknown-verb-id";
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
var FieldAggregationType;
(function (FieldAggregationType) {
    FieldAggregationType["Sum"] = "sum";
    FieldAggregationType["Avg"] = "avg";
    FieldAggregationType["Min"] = "min";
    FieldAggregationType["Max"] = "max";
    FieldAggregationType["Stdev"] = "stdev";
    FieldAggregationType["Stdevp"] = "stdevp";
    FieldAggregationType["Var"] = "var";
    FieldAggregationType["Varp"] = "varp";
    FieldAggregationType["Collect"] = "collect";
    FieldAggregationType["Count"] = "count";
    FieldAggregationType["Countd"] = "countd";
    FieldAggregationType["Median"] = "median";
    FieldAggregationType["Attr"] = "attr";
    FieldAggregationType["None"] = "none";
    FieldAggregationType["Year"] = "year";
    FieldAggregationType["Qtr"] = "qtr";
    FieldAggregationType["Month"] = "month";
    FieldAggregationType["Day"] = "day";
    FieldAggregationType["Hour"] = "hour";
    FieldAggregationType["Minute"] = "minute";
    FieldAggregationType["Second"] = "second";
    FieldAggregationType["Week"] = "week";
    FieldAggregationType["Weekday"] = "weekday";
    FieldAggregationType["MonthYear"] = "month-year";
    FieldAggregationType["Mdy"] = "mdy";
    FieldAggregationType["End"] = "end";
    FieldAggregationType["TruncYear"] = "trunc-year";
    FieldAggregationType["TruncQtr"] = "trunc-qtr";
    FieldAggregationType["TruncMonth"] = "trunc-month";
    FieldAggregationType["TruncWeek"] = "trunc-week";
    FieldAggregationType["TruncDay"] = "trunc-day";
    FieldAggregationType["TruncHour"] = "trunc-hour";
    FieldAggregationType["TruncMinute"] = "trunc-minute";
    FieldAggregationType["TruncSecond"] = "trunc-second";
    FieldAggregationType["Quart1"] = "quart1";
    FieldAggregationType["Quart3"] = "quart3";
    FieldAggregationType["Skewness"] = "skewness";
    FieldAggregationType["Kurtosis"] = "kurtosis";
    FieldAggregationType["InOut"] = "in-out";
    FieldAggregationType["User"] = "user";
})(FieldAggregationType = exports.FieldAggregationType || (exports.FieldAggregationType = {}));
var FieldRoleType;
(function (FieldRoleType) {
    FieldRoleType["Dimension"] = "dimension";
    FieldRoleType["Measure"] = "measure";
    FieldRoleType["Unknown"] = "unknown";
})(FieldRoleType = exports.FieldRoleType || (exports.FieldRoleType = {}));
/**
 *  The different update types for applying filter.
 */
var FilterUpdateType;
(function (FilterUpdateType) {
    FilterUpdateType["Add"] = "add";
    FilterUpdateType["All"] = "all";
    FilterUpdateType["Replace"] = "replace";
    FilterUpdateType["Remove"] = "remove";
})(FilterUpdateType = exports.FilterUpdateType || (exports.FilterUpdateType = {}));
var SheetType;
(function (SheetType) {
    SheetType["Dashboard"] = "dashboard";
    SheetType["Story"] = "story";
    SheetType["Worksheet"] = "worksheet";
})(SheetType = exports.SheetType || (exports.SheetType = {}));
var DomainRestrictionType;
(function (DomainRestrictionType) {
    DomainRestrictionType["All"] = "all";
    DomainRestrictionType["List"] = "list";
    DomainRestrictionType["Range"] = "range";
})(DomainRestrictionType = exports.DomainRestrictionType || (exports.DomainRestrictionType = {}));
var DateStepPeriod;
(function (DateStepPeriod) {
    DateStepPeriod["Years"] = "years";
    DateStepPeriod["Quarters"] = "quarters";
    DateStepPeriod["Months"] = "months";
    DateStepPeriod["Weeks"] = "weeks";
    DateStepPeriod["Days"] = "days";
    DateStepPeriod["Hours"] = "hours";
    DateStepPeriod["Minutes"] = "minutes";
    DateStepPeriod["Seconds"] = "seconds";
})(DateStepPeriod = exports.DateStepPeriod || (exports.DateStepPeriod = {}));
/**
 * The option for specifying which values to include for filtering.
 */
var FilterNullOption;
(function (FilterNullOption) {
    FilterNullOption["NullValues"] = "nullvalues";
    FilterNullOption["NonNullValues"] = "nonnullvalues";
    FilterNullOption["AllValues"] = "allvalues";
})(FilterNullOption = exports.FilterNullOption || (exports.FilterNullOption = {}));
/**
 * The type of filter domain
 */
var FilterDomainType;
(function (FilterDomainType) {
    FilterDomainType["Relevant"] = "relevant";
    FilterDomainType["Database"] = "database";
})(FilterDomainType = exports.FilterDomainType || (exports.FilterDomainType = {}));
/**
 * Internal enum for specifying the selection type for select marks api.
 */
var SelectionUpdateType;
(function (SelectionUpdateType) {
    SelectionUpdateType["Replace"] = "select-replace";
    SelectionUpdateType["Add"] = "select-add";
    SelectionUpdateType["Remove"] = "select-remove";
})(SelectionUpdateType = exports.SelectionUpdateType || (exports.SelectionUpdateType = {}));
/**
 * Internal enum for specifying the select option for the select tuples api.
 */
var SelectOptions;
(function (SelectOptions) {
    SelectOptions["Simple"] = "select-options-simple";
    SelectOptions["Toggle"] = "select-options-toggle";
    SelectOptions["Menu"] = "select-options-menu";
    SelectOptions["Range"] = "select-options-range";
    SelectOptions["Search"] = "select-options-search";
})(SelectOptions = exports.SelectOptions || (exports.SelectOptions = {}));
/**
 * Internal enum for specifying the included values type for range selection.
 */
var QuantitativeIncludedValues;
(function (QuantitativeIncludedValues) {
    QuantitativeIncludedValues["IncludeNull"] = "include-null";
    QuantitativeIncludedValues["IncludeNonNull"] = "include-non-null";
    QuantitativeIncludedValues["IncludeAll"] = "include-all";
})(QuantitativeIncludedValues = exports.QuantitativeIncludedValues || (exports.QuantitativeIncludedValues = {}));
/**
 * Internal enum for specifying a hierarchical level selection state.
 */
var HierarchicalLevelSelectionState;
(function (HierarchicalLevelSelectionState) {
    HierarchicalLevelSelectionState["AllSelected"] = "all-selected";
    HierarchicalLevelSelectionState["NoneSelected"] = "none-selected";
    HierarchicalLevelSelectionState["SomeSelected"] = "some-selected";
    HierarchicalLevelSelectionState["UnknownSelected"] = "unknown-selected";
})(HierarchicalLevelSelectionState = exports.HierarchicalLevelSelectionState || (exports.HierarchicalLevelSelectionState = {}));
/**
 * Type of mark for a given marks card in a viz.
 */
var MarkType;
(function (MarkType) {
    MarkType["Bar"] = "bar";
    MarkType["Line"] = "line";
    MarkType["Area"] = "area";
    MarkType["Square"] = "square";
    MarkType["Circle"] = "circle";
    MarkType["Shape"] = "shape";
    MarkType["Text"] = "text";
    MarkType["Map"] = "map";
    MarkType["Pie"] = "pie";
    MarkType["GanttBar"] = "gantt-bar";
    MarkType["Polygon"] = "polygon";
    MarkType["Heatmap"] = "heatmap";
    MarkType["VizExtension"] = "viz-extension";
})(MarkType = exports.MarkType || (exports.MarkType = {}));
/**
 * Internal enum for specifying the type of filter
 */
var FilterType;
(function (FilterType) {
    FilterType["Categorical"] = "categorical";
    FilterType["Range"] = "range";
    FilterType["RelativeDate"] = "relativeDate";
    FilterType["Hierarchical"] = "hierarchical";
})(FilterType = exports.FilterType || (exports.FilterType = {}));
/**
 * Internal enum for specifying the DateRangeType of a relative date filter
 */
var DateRangeType;
(function (DateRangeType) {
    /**
     * Refers to the last day, week, month, etc. of the date period.
     */
    DateRangeType["Last"] = "last";
    /**
     * Refers to the last N days, weeks, months, etc. of the date period.
     */
    DateRangeType["LastN"] = "lastN";
    /**
     * Refers to the next day, week, month, etc. of the date period.
     */
    DateRangeType["Next"] = "next";
    /**
     * Refers to the next N days, weeks, months, etc. of the date period.
     */
    DateRangeType["NextN"] = "nextN";
    /**
     * Refers to the current day, week, month, etc. of the date period.
     */
    DateRangeType["Current"] = "current";
    /**
     * Refers to everything up to and including the current day, week, month, etc. of the date period.
     */
    DateRangeType["ToDate"] = "toDate";
})(DateRangeType = exports.DateRangeType || (exports.DateRangeType = {}));
/**
 * Used to determine if the launching of an extension dialog succeeded or failed.
 */
var ExtensionDialogResult;
(function (ExtensionDialogResult) {
    ExtensionDialogResult["DialogAlreadyOpen"] = "dialog-already-open";
    ExtensionDialogResult["InvalidDomain"] = "invalid-domain";
    ExtensionDialogResult["Success"] = "success";
})(ExtensionDialogResult = exports.ExtensionDialogResult || (exports.ExtensionDialogResult = {}));
// Enumeration for ApiShowData table id sentinels.
var ApiShowDataTableSentinel;
(function (ApiShowDataTableSentinel) {
    // find the one logical table - used in version compatibility check for getUnderlyingDataTable and getLogicalDataTable commands
    ApiShowDataTableSentinel["SingleTableId"] = "single-table-id-sentinel";
    ApiShowDataTableSentinel["SingleTableCaption"] = "Single table id sentinel";
})(ApiShowDataTableSentinel = exports.ApiShowDataTableSentinel || (exports.ApiShowDataTableSentinel = {}));
/**
 * Used to optimize the getSummaryData/getUnderlyingTableData results
 * Mapped from external IncludeDataValuesOption
 */
var ApiShowDataTableFormat;
(function (ApiShowDataTableFormat) {
    ApiShowDataTableFormat["NativeValuesOnly"] = "native-values-only";
    ApiShowDataTableFormat["FormattedValuesOnly"] = "formatted-values-only";
    ApiShowDataTableFormat["NativeAndFormattedValues"] = "native-and-formatted-values";
})(ApiShowDataTableFormat = exports.ApiShowDataTableFormat || (exports.ApiShowDataTableFormat = {}));
/**
 * Used to set page size for export layout options.
 */
var PageSizeOption;
(function (PageSizeOption) {
    PageSizeOption["Letter"] = "letter";
    PageSizeOption["Legal"] = "legal";
    PageSizeOption["Note"] = "note";
    PageSizeOption["Folio"] = "folio";
    PageSizeOption["Tabloid"] = "tabloid";
    PageSizeOption["Ledger"] = "ledger";
    PageSizeOption["Statement"] = "statement";
    PageSizeOption["Executive"] = "executive";
    PageSizeOption["A3"] = "a3";
    PageSizeOption["A4"] = "a4";
    PageSizeOption["A5"] = "a5";
    PageSizeOption["B4"] = "b4";
    PageSizeOption["B5"] = "b5";
    PageSizeOption["Quarto"] = "quarto";
    PageSizeOption["Unspecified"] = "unspecified";
})(PageSizeOption = exports.PageSizeOption || (exports.PageSizeOption = {}));
/**
 * Used to set the page orientation mode for export layout options.
 */
var PageOrientation;
(function (PageOrientation) {
    PageOrientation["Printer"] = "printer";
    PageOrientation["Portrait"] = "portrait";
    PageOrientation["Landscape"] = "landscape";
})(PageOrientation = exports.PageOrientation || (exports.PageOrientation = {}));
/**
 * Used to set scale mode for export layout options.
 */
var ScaleMode;
(function (ScaleMode) {
    ScaleMode["ScaleAuto"] = "auto";
    ScaleMode["ScalePercentage"] = "percent";
    ScaleMode["ScaleFitPages"] = "fit-pages";
})(ScaleMode = exports.ScaleMode || (exports.ScaleMode = {}));
/**
 * Used by setFitAndScaleValues to scale percent values
 */
var PageScalingOption;
(function (PageScalingOption) {
    PageScalingOption["ScalePctAuto"] = "auto";
    PageScalingOption["ScalePct400"] = "pct400";
    PageScalingOption["ScalePct200"] = "pct200";
    PageScalingOption["ScalePct100"] = "pct100";
    PageScalingOption["ScalePct90"] = "pct90";
    PageScalingOption["ScalePct80"] = "pct80";
    PageScalingOption["ScalePct75"] = "pct75";
    PageScalingOption["ScalePct60"] = "pct60";
    PageScalingOption["ScalePct50"] = "pct50";
    PageScalingOption["ScalePct25"] = "pct25";
})(PageScalingOption = exports.PageScalingOption || (exports.PageScalingOption = {}));
/**
 * Used by setFitAndScaleValues to scale fit page values
 */
var FitPages;
(function (FitPages) {
    FitPages["FitOneHigh"] = "fit0x1";
    FitPages["FitTwoHigh"] = "fit0x2";
    FitPages["FitOneWide"] = "fit1x0";
    FitPages["FitTwoWide"] = "fit2x0";
})(FitPages = exports.FitPages || (exports.FitPages = {}));
/**
 * Used by getVisualSpecificationAsync
 */
var EncodingType;
(function (EncodingType) {
    EncodingType["Color"] = "color";
    EncodingType["Size"] = "size";
    EncodingType["Label"] = "label";
    EncodingType["Detail"] = "detail";
    EncodingType["Tooltip"] = "tooltip";
    EncodingType["Shape"] = "shape";
    EncodingType["Path"] = "path";
    EncodingType["Angle"] = "angle";
    EncodingType["Geometry"] = "geometry";
    EncodingType["Custom"] = "custom";
})(EncodingType = exports.EncodingType || (exports.EncodingType = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Notifications.js":
/*!*********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Notifications.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var NotificationId;
(function (NotificationId) {
    NotificationId["CustomMarkContextMenuClicked"] = "custom-mark-context-menu-clicked";
    NotificationId["ContextMenuClick"] = "context-menu-click";
    NotificationId["CustomViewRemoved"] = "custom-view-removed";
    NotificationId["CustomViewSaved"] = "custom-view-saved";
    NotificationId["CustomViewSetDefault"] = "custom-view-set-default";
    NotificationId["CustomViewsLoaded"] = "custom-views-loaded";
    NotificationId["DashboardLayoutChanged"] = "dashboard-layout-changed";
    NotificationId["EditButtonClicked"] = "edit-button-clicked";
    NotificationId["EditInDesktopButtonClicked"] = "edit-in-desktop-button-clicked";
    NotificationId["ExtensionDialogUpdate"] = "extension-dialog-update";
    NotificationId["FilterChanged"] = "filter-changed";
    NotificationId["FirstVizSizeKnown"] = "first-viz-size-known";
    NotificationId["ParameterChanged"] = "parameter-changed";
    NotificationId["SelectedMarksChanged"] = "selected-marks-changed";
    NotificationId["SettingsChanged"] = "settings-changed";
    NotificationId["SummaryDataChanged"] = "summary-data-changed";
    NotificationId["TestConversionNotification"] = "test-conversion-notification";
    NotificationId["ToolbarStateChanged"] = "toolbar-state-changed";
    NotificationId["VizInteractive"] = "viz-interactive";
    NotificationId["AskDataInteractive"] = "ask-data-interactive";
    NotificationId["WorkbookReadyToClose"] = "workbook-ready-to-close";
    NotificationId["WorkbookFormattingChanged"] = "workbook-formatting-changed";
    NotificationId["WorkbookPublished"] = "workbook-published";
    NotificationId["WorkbookPublishedAs"] = "workbook-published-as";
    NotificationId["UrlAction"] = "url-action";
    NotificationId["TabSwitched"] = "tab-switched";
    NotificationId["StoryPointSwitched"] = "story-point-switched";
    NotificationId["ReadyToReceiveAuthToken"] = "ready-to-receive-auth-token";
})(NotificationId = exports.NotificationId || (exports.NotificationId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Parameters.js":
/*!******************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Parameters.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// PLEASE KEEP IN ALPHABETICAL ORDER. This helps with visually finding entries, knowing where to put
// new ones, and merge conflicts.
var ParameterId;
(function (ParameterId) {
    ParameterId["ActiveTablesInfo"] = "active-tables-info";
    ParameterId["AnchorDate"] = "anchor-date";
    ParameterId["AnnotateEnum"] = "annotate-enum";
    ParameterId["AnnotationList"] = "annotation-list";
    ParameterId["CategoricalDomain"] = "categorical-domain";
    ParameterId["ClickThroughEnabled"] = "click-through-enabled";
    ParameterId["ColumnsToInclude"] = "columns-to-include";
    ParameterId["ColumnsToIncludeById"] = "columns-to-include-by-id";
    ParameterId["ConnectionDescriptionSummaries"] = "connection-description-summaries";
    ParameterId["CurrentSheetType"] = "current-sheet-type";
    ParameterId["CustomView"] = "custom-view";
    ParameterId["CustomViewIsDefault"] = "custom-view-is-default";
    ParameterId["CustomViewIsPublic"] = "custom-view-is-public";
    ParameterId["CustomViewLuid"] = "custom-view-luid";
    ParameterId["CustomViewName"] = "custom-view-name";
    ParameterId["CustomViews"] = "custom-views";
    ParameterId["Dashboard"] = "dashboard";
    ParameterId["DashboardFilters"] = "dashboard-filters";
    ParameterId["DashboardName"] = "dashboard";
    ParameterId["DashboardObjectPositionAndSizeUpdate"] = "dashboard-object-position-and-size-update";
    ParameterId["DashboardObjectPositionAndSizeUpdateList"] = "dashboard-object-position-and-size-update-list";
    ParameterId["DataRowIndex"] = "data-row-index";
    ParameterId["DataSchema"] = "data-schema";
    ParameterId["DataSource"] = "data-source";
    ParameterId["DataSourceDataTable"] = "data-source-data-table";
    ParameterId["DataSourceId"] = "data-source-id";
    ParameterId["DataSourceName"] = "data-source-name";
    ParameterId["DataTable"] = "data-table";
    ParameterId["DataTableReader"] = "data-table-reader";
    ParameterId["DateRangeType"] = "date-range-type";
    ParameterId["DeltaTimeMs"] = "delta-time-ms";
    ParameterId["DimValSelectionModels"] = "dimensionValueSelectionModels";
    ParameterId["DomainType"] = "domain-type";
    ParameterId["EmbeddingAbstractQuery"] = "embedding-abstract-query";
    ParameterId["EmbeddingBootstrapInfo"] = "embedding-bootstrap-info";
    ParameterId["ExportCrosstabSheetMap"] = "export-crosstab-sheet-map";
    ParameterId["ExportFile"] = "export-file";
    ParameterId["ExportOriginUrl"] = "export-origin-url";
    ParameterId["ExportPdfOptions"] = "export-pdf-options";
    ParameterId["ExtensionBootstrapInfo"] = "extension-bootstrap-info";
    ParameterId["ExtensionContextMenuIds"] = "extension-context-menu-ids";
    ParameterId["ExtensionDialogH"] = "extension-dialog-height";
    ParameterId["ExtensionDialogPayload"] = "extension-dialog-payload";
    ParameterId["ExtensionDialogResult"] = "extension-dialog-result";
    ParameterId["ExtensionDialogStyle"] = "extension-dialog-style";
    ParameterId["ExtensionDialogUrl"] = "extension-dialog-url";
    ParameterId["ExtensionDialogW"] = "extension-dialog-width";
    ParameterId["ExtensionLocator"] = "extension-locator";
    ParameterId["ExtensionSettingsInfo"] = "extension-settings-info";
    ParameterId["ExtensionZoneId"] = "extension-zone-id";
    ParameterId["ExternalMenuDescription"] = "external-menu-description";
    ParameterId["ExternalMenuHeader"] = "external-menu-header";
    ParameterId["ExternalMenuItemDisplayName"] = "external-menu-item-display-name";
    ParameterId["ExternalMenuItemId"] = "external-menu-item-id";
    ParameterId["Field"] = "field";
    ParameterId["FieldId"] = "field-id";
    ParameterId["FieldName"] = "field-name";
    ParameterId["FilterLevels"] = "filter-levels";
    ParameterId["FilterRangeMax"] = "filter-range-max";
    ParameterId["FilterRangeMin"] = "filter-range-min";
    ParameterId["FilterRangeNullOption"] = "filter-range-null-option";
    ParameterId["FilterUpdateType"] = "filter-update-type";
    ParameterId["FilterValues"] = "filter-values";
    ParameterId["FontNameListItems"] = "font-name-list-items";
    ParameterId["FormattedText"] = "formatted-text";
    ParameterId["FunctionName"] = "function-name";
    ParameterId["HierValSelectionModels"] = "hierarchicalValueSelectionModels";
    ParameterId["HighlightedData"] = "highlighted-data";
    ParameterId["HoverTupleInteraction"] = "hover-tuple-interaction";
    ParameterId["IgnoreAliases"] = "ignore-aliases";
    ParameterId["IgnoreSelection"] = "ignore-selection";
    ParameterId["IncludeAllColumns"] = "include-all-columns";
    ParameterId["InvalidAggFieldName"] = "invalid-agg-field-name";
    ParameterId["InvalidDates"] = "invalid-dates";
    ParameterId["InvalidFieldCaption"] = "invalid-field-caption";
    ParameterId["InvalidFields"] = "invalid-fields";
    ParameterId["InvalidValues"] = "invalid-values";
    ParameterId["IsExcludeMode"] = "is-exclude";
    ParameterId["IsExtensionDialog"] = "is-extension-dialog";
    ParameterId["JoinDescription"] = "join-description";
    ParameterId["LogicalTableId"] = "logical-table-id";
    ParameterId["LogicalTableInfoList"] = "logical-table-info-list";
    ParameterId["MaxHeight"] = "max-height";
    ParameterId["MaxRows"] = "max-rows";
    ParameterId["MaxWidth"] = "max-width";
    ParameterId["MinHeight"] = "min-height";
    ParameterId["MinWidth"] = "min-width";
    ParameterId["PageRowCount"] = "page-row-count";
    ParameterId["ParameterCaption"] = "paremeter-caption";
    ParameterId["ParameterError"] = "parameter-error";
    ParameterId["ParameterFieldName"] = "parameter-field-name";
    ParameterId["ParameterInfo"] = "parameter-info";
    ParameterId["ParameterInfos"] = "parameter-infos";
    ParameterId["ParameterValue"] = "parameter-value";
    ParameterId["PeriodType"] = "period-type";
    ParameterId["QuantitativeDomain"] = "quantitative-dmain";
    ParameterId["QuantRangeSelectionModels"] = "quantativeRangeSelectionModels";
    ParameterId["RangeN"] = "range-n";
    ParameterId["ReplaySpeed"] = "replay-speed";
    ParameterId["SelectedData"] = "selected-data";
    ParameterId["SelectedSheetNames"] = "selected-sheet-names";
    ParameterId["Selection"] = "selection";
    ParameterId["SelectionList"] = "selection-list";
    ParameterId["SelectionUpdateType"] = "selectionUpdateType";
    ParameterId["SelectTuplesInteraction"] = "select-tuples-interaction";
    ParameterId["SendNotifications"] = "send-notifications";
    ParameterId["SettingsValues"] = "settings-values";
    ParameterId["SharedFilterSheets"] = "shared-filter-sheets";
    ParameterId["SharedFiltersInfo"] = "shared-filters-info";
    ParameterId["SheetIdentifier"] = "sheet-identifier";
    ParameterId["SheetName"] = "sheet-name";
    ParameterId["SheetPath"] = "sheet-path";
    ParameterId["ShouldRefreshDS"] = "should-refresh-ds";
    ParameterId["ShowDataTableFormat"] = "show-data-table-format";
    ParameterId["State"] = "state";
    ParameterId["StoryPointIndex"] = "story-point-index";
    ParameterId["StoryPointInfo"] = "story-point-info";
    ParameterId["SwitchToSheetName"] = "switch-to-sheet-name";
    ParameterId["TargetPoint"] = "target-point";
    ParameterId["TestConversionParameter"] = "test-conversion-parameter";
    ParameterId["Text"] = "formatted-text";
    ParameterId["TooltipContext"] = "tooltip-context";
    ParameterId["TooltipTextRequest"] = "tooltip-text-request";
    ParameterId["TooltipText"] = "tooltip-text";
    ParameterId["UnderlyingDataTable"] = "underlying-data-table";
    ParameterId["UnderlyingSummaryDataTable"] = "underlying-summary-data-table";
    ParameterId["Url"] = "url";
    ParameterId["UseTabDelimiters"] = "use-tab-delimiters";
    ParameterId["ViewDataTableCacheId"] = "view-data-table-cache-id";
    ParameterId["ViewDataTableId"] = "view-data-table-id";
    ParameterId["VisualId"] = "visual-id";
    ParameterId["VisualSpecification"] = "visual-specification";
    ParameterId["VizAPIInputJson"] = "vizapi-input-json";
    ParameterId["VizAPIStateWithDataModel"] = "vizapi-state-with-data-model";
    ParameterId["VizAPIStateWarningMsg"] = "vizapi-state-warning-msg";
    ParameterId["VizAPISVG"] = "vizapi-svg";
    ParameterId["WorksheetName"] = "worksheet-name";
    ParameterId["WorksheetFilters"] = "worksheet-filters";
    ParameterId["ZoneIdsVisibilityMap"] = "zone-ids-visibility-map";
})(ParameterId = exports.ParameterId || (exports.ParameterId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Verbs.js":
/*!*************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Verbs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// Declare this key type and export the NotificationId to make this behave like a string enum.
//
// PLEASE KEEP IN ALPHABETICAL ORDER. This helps with visually finding entries, knowing where to put
// new ones, and merge conflicts.
var VerbId;
(function (VerbId) {
    VerbId["ActivateNextStoryPoint"] = "activate-next-story-point";
    VerbId["ActivatePreviousStoryPoint"] = "activate-previous-story-point";
    VerbId["ActivateSheet"] = "activateSheet";
    VerbId["ActivateStoryPoint"] = "activate-story-point";
    VerbId["AppendExternalMenuItem"] = "append-external-menu-item";
    VerbId["ApplyCategoricalFilter"] = "categorical-filter";
    VerbId["ApplyRangeFilter"] = "range-filter";
    VerbId["ApplyRelativeDateFilter"] = "apply-relative-date-Filter";
    VerbId["Authenticate"] = "authenticate";
    VerbId["BlockExtension"] = "block-extension";
    VerbId["ChangeParameterValue"] = "change-parameter-value";
    VerbId["ChangeSharedFilter"] = "change-shared-filter";
    VerbId["ClearFilter"] = "clear-filter";
    VerbId["ClearSelectedMarks"] = "clear-selected-marks";
    VerbId["CloseDialog"] = "close-dialog";
    VerbId["CreateAnnotation"] = "create-annotation";
    VerbId["DashboardCategoricalFilter"] = "dashboard-categorical-filter";
    VerbId["DisplayDialog"] = "display-dialog";
    VerbId["DownloadWorkbook"] = "download-workbook";
    VerbId["ExecuteExternalMenuItem"] = "execute-external-menu-item";
    VerbId["ExportCrosstab"] = "export-crosstab";
    VerbId["ExportCrosstabCsvDownload"] = "export-crosstab-csv-download";
    VerbId["ExportCrosstabExcelDownload"] = "export-crosstab-excel-download";
    VerbId["ExportData"] = "export-data";
    VerbId["ExportDataDownload"] = "export-data-download";
    VerbId["ExportImage"] = "export-image";
    VerbId["ExportPdf"] = "export-pdf";
    VerbId["ExportPdfDownload"] = "export-pdf-download";
    VerbId["ExportPowerpoint"] = "export-powerpoint";
    VerbId["ExportPowerpointDownload"] = "export-powerpoint-download";
    VerbId["FindParameter"] = "find-parameter";
    VerbId["GetActiveTables"] = "get-active-tables";
    VerbId["GetAllDataSources"] = "get-all-data-sources";
    VerbId["GetAnnotations"] = "get-annotations";
    VerbId["GetCategoricalDomain"] = "get-categorical-domain";
    VerbId["GetConnectionDescriptionSummaries"] = "get-connection-description-summaries";
    VerbId["GetCurrentSrc"] = "get-current-src";
    VerbId["GetCustomViews"] = "get-custom-views";
    VerbId["GetDashboardFilters"] = "get-dashboard-filters";
    VerbId["GetDataSource"] = "get-datasource";
    VerbId["GetDataSourceData"] = "get-datasource-data";
    VerbId["GetDataSources"] = "get-data-sources";
    VerbId["GetDataSummaryData"] = "get-summary-data";
    VerbId["GetDataSummaryDataReader"] = "get-summary-data-reader";
    VerbId["GetDataTableReaderPage"] = "get-data-table-reader-page";
    VerbId["GetEmbeddingAbstractQueryWithDataModel"] = "get-embedding-abstract-query-with-data-model";
    VerbId["GetEmbeddingClientInfo"] = "get-embedding-client-info";
    VerbId["GetVizStateWithDataModel"] = "get-viz-state-with-data-model";
    VerbId["GetExportCrosstabSheetMap"] = "get-export-crosstab-sheet-map";
    VerbId["GetExportPdfOptions"] = "get-export-pdf-options";
    VerbId["GetField"] = "get-field";
    VerbId["GetFieldAndDataSource"] = "get-field-and-datasource";
    VerbId["GetVisualSpecification"] = "get-visual-specification";
    VerbId["GetFilters"] = "get-filters";
    VerbId["GetFonts"] = "get-fonts";
    VerbId["GetHighlightedMarks"] = "get-highlighted-marks";
    VerbId["GetJoinDescription"] = "get-join-description";
    VerbId["GetLogicalTableData"] = "get-logical-table-data";
    VerbId["GetLogicalTableDataReader"] = "get-logical-table-data-reader";
    VerbId["GetLogicalTables"] = "get-logical-tables";
    VerbId["GetParametersForSheet"] = "get-parameters-for-sheet";
    VerbId["GetRangeDomain"] = "get-range-domain";
    VerbId["GetSelectedMarks"] = "get-selected-marks";
    VerbId["GetSharedFilter"] = "get-shared-filter";
    VerbId["GetTooltipText"] = "get-tooltip-text";
    VerbId["GetUnderlyingData"] = "get-underlying-data";
    VerbId["GetUnderlyingTableData"] = "get-underlying-table-data";
    VerbId["GetUnderlyingTableDataReader"] = "get-underlying-table-data-reader";
    VerbId["GetUnderlyingTables"] = "get-underlying-tables";
    VerbId["HierarchicalFilter"] = "hierachical-filter";
    VerbId["InitializeExtension"] = "initialize-extension";
    VerbId["MoveAndResizeZones"] = "move-and-resize-zones";
    VerbId["RaiseLeaveMarkNavNotification"] = "raise-leave-mark-nav-notification";
    VerbId["RaiseHoverTupleNotification"] = "raise-hover-tuple-notification";
    VerbId["RaiseSelectTuplesNotification"] = "raise-select-tuples-notification";
    VerbId["Redo"] = "redo";
    VerbId["RefreshDataSource"] = "refresh-data-source";
    VerbId["ReleaseDataTableReader"] = "release-data-table-reader";
    VerbId["RemoveAnnotation"] = "remove-annotation";
    VerbId["RemoveCustomView"] = "remove-custom-view";
    VerbId["RemoveExternalMenuItem"] = "remove-external-menu-item";
    VerbId["RenameExternalMenu"] = "rename-external-menu";
    VerbId["ReplayAnimation"] = "replay-animation";
    VerbId["RevertStoryPoint"] = "revert-story-point";
    VerbId["RevertWorkbook"] = "revert-workbook";
    VerbId["SaveExtensionSettings"] = "save-extension-settings";
    VerbId["SaveWorkbookAsCustomView"] = "save-workbook-as-custom-view";
    VerbId["SelectByValue"] = "select-by-value";
    VerbId["SetActiveCustomViewAsDefault"] = "set-active-custom-view-as-default";
    VerbId["SetAutoUpdate"] = "set-auto-update";
    VerbId["SetClickThrough"] = "set-click-through";
    VerbId["SetVizStateWithDataModel"] = "set-viz-state-with-data-model";
    VerbId["SetSheetSize"] = "set-sheet-size";
    VerbId["SetZoneVisibility"] = "set-zone-visibility";
    VerbId["Share"] = "share";
    VerbId["ShowCustomView"] = "show-custom-view";
    VerbId["TestConversionVerb"] = "test-conversion-verb";
    VerbId["Undo"] = "undo";
    VerbId["UpdateCustomView"] = "update-custom-view";
    VerbId["VizAPI"] = "viz-api";
})(VerbId = exports.VerbId || (exports.VerbId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/interface/AskDataInterface.js":
/*!*************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/interface/AskDataInterface.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var AskDataOptionNames;
(function (AskDataOptionNames) {
    AskDataOptionNames["token"] = "token";
    AskDataOptionNames["origin"] = "origin";
    AskDataOptionNames["showEmbed"] = "showEmbed";
    AskDataOptionNames["showPin"] = "showPin";
    AskDataOptionNames["showSave"] = "showSave";
    AskDataOptionNames["showShare"] = "showShare";
    AskDataOptionNames["debug"] = ":jsdebug";
    AskDataOptionNames["ApiID"] = ":apiID";
    AskDataOptionNames["ApiExternalVersion"] = ":apiExternalVersion";
    AskDataOptionNames["ApiInternalVersion"] = ":apiInternalVersion";
    AskDataOptionNames["AskDataWebComponent"] = ":askDataWebComponent";
})(AskDataOptionNames = exports.AskDataOptionNames || (exports.AskDataOptionNames = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/interface/PulseInterface.js":
/*!***********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/interface/PulseInterface.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var PulseOptionNames;
(function (PulseOptionNames) {
    PulseOptionNames["embed"] = "embed";
    PulseOptionNames["token"] = "token";
    PulseOptionNames["disableExploreFilter"] = "disableExploreFilter";
    PulseOptionNames["layout"] = "embed_layout";
    PulseOptionNames["ApiExternalVersion"] = ":apiExternalVersion";
    PulseOptionNames["ApiInternalVersion"] = ":apiInternalVersion";
    PulseOptionNames["PulseWebComponent"] = ":pulseWebComponent";
})(PulseOptionNames = exports.PulseOptionNames || (exports.PulseOptionNames = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/interface/VqlInterface.js":
/*!*********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/interface/VqlInterface.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * These strings were *manually copied* from the server,
 * workgroup/src/silos/tableau-server/libraries/tab-controller-vizql/src/com/tableausoftware/
 * controller/vizql/constants/ParameterKeys.java#L9
 * should be exported instead
 * parameters that vizql will accept in an embedding URL
 **/
var VqlParameterNames;
(function (VqlParameterNames) {
    VqlParameterNames["ONE"] = "1";
    VqlParameterNames["ALERTS"] = ":alerts";
    VqlParameterNames["ALIAS"] = "alias";
    VqlParameterNames["ALLOW_DEFERRED_BOOTSTRAP"] = ":allowDeferredBootstrap";
    VqlParameterNames["ALLOW_AUTOGEN_WORKSHEET_PHONE_LAYOUTS"] = "allowAutogenWorksheetPhoneLayouts";
    VqlParameterNames["API_ID"] = ":apiID";
    VqlParameterNames["APP"] = ":app";
    VqlParameterNames["ATTACHMENT"] = "attachment";
    VqlParameterNames["IS_IPAD_APP"] = "app";
    VqlParameterNames["ANIMATE_TRANSITION"] = ":animate_transition";
    VqlParameterNames["ASCENDING"] = "ascending";
    VqlParameterNames["AUTHENTICATION"] = "authentication";
    VqlParameterNames["ATTRIBUTES"] = "attributes";
    VqlParameterNames["AUTHORING_SHEET"] = ":authSheet";
    VqlParameterNames["AXIS"] = "axis";
    VqlParameterNames["BOOTSTRAP_WHEN_NOTIFIED"] = ":bootstrapWhenNotified";
    VqlParameterNames["BROWSER_BACK_BUTTON_UNDO"] = ":browserBackButtonUndo";
    VqlParameterNames["BROWSER_RENDERING_ON"] = "isBrowserRendering";
    VqlParameterNames["BROWSER_RENDERING_THRESHOLD"] = "browserRenderingThreshold";
    VqlParameterNames["CHARSET"] = "charset";
    VqlParameterNames["CLIENT_DIMENSION"] = "clientDimension";
    VqlParameterNames["CLIENT_IP"] = "client_ip";
    VqlParameterNames["CLIENT_NUM"] = "clientNum";
    VqlParameterNames["COLON_EMBEDDED"] = ":embedded";
    VqlParameterNames["COLON_MOBILE"] = ":mobile";
    VqlParameterNames["COLON_DEEP_LINKING_DISABLED"] = ":deepLinkingDisabled";
    VqlParameterNames["COLON_WATERMARK"] = ":watermark";
    VqlParameterNames["COMMENTS"] = ":comments";
    VqlParameterNames["COMMENTING_ENABLED"] = ":commentingEnabled";
    VqlParameterNames["COMMENTING_MENTIONS_ENABLED"] = ":commentingMentions";
    VqlParameterNames["CONNECTION"] = "connection";
    VqlParameterNames["CREATED_BY_FEATURE"] = "createdByFeature";
    VqlParameterNames["CRYPTED_PASSWORD"] = "crypted";
    VqlParameterNames["CSSDEBUG"] = ":cssdebug";
    VqlParameterNames["CSV"] = "csv";
    VqlParameterNames["CUSTOM_VIEWS"] = ":customViews";
    VqlParameterNames["CV"] = ":cv";
    VqlParameterNames["CV_ID"] = "cvId";
    VqlParameterNames["DASHBOARD_PORT_SIZE"] = "dashboardPortSize";
    VqlParameterNames["DATA_DETAILS"] = ":dataDetails";
    VqlParameterNames["DATASOURCE"] = "datasource";
    VqlParameterNames["DEBUG"] = ":debug";
    VqlParameterNames["DELAY"] = ":delay";
    VqlParameterNames["DEPTH"] = "depth";
    VqlParameterNames["DEVICE_TYPE"] = ":device";
    VqlParameterNames["DEVICE_PIXEL_RATIO"] = "devicePixelRatio";
    VqlParameterNames["DEVICE_PREVIEW_MODE"] = ":devicepreviewmode";
    VqlParameterNames["DIMENSIONS"] = ":dimensions";
    VqlParameterNames["DISABLE_SHARED_SESSIONS"] = ":disable_shared_sessions";
    VqlParameterNames["DISABLE_URL_ACTIONS_POPUPS"] = ":disableUrlActionsPopups";
    VqlParameterNames["DIRECTION"] = "direction";
    VqlParameterNames["DISPLAY_OVERLAY"] = ":display_overlay";
    VqlParameterNames["DISPLAY_SHARE"] = ":display_share";
    VqlParameterNames["DISPLAY_SPINNER"] = ":display_spinner";
    VqlParameterNames["DISPLAY_STATIC_IMAGE"] = ":display_static_image";
    VqlParameterNames["DISPLAY_TABS"] = "display_tabs";
    VqlParameterNames["DISPLAY_VIEW_COUNT"] = ":display_count";
    VqlParameterNames["IGNORE_STICKY_SESSION"] = ":ignore_sticky_session";
    VqlParameterNames["INCREMENT_VIEW_COUNT"] = ":increment_view_count";
    VqlParameterNames["DOCMODE"] = "docmode";
    VqlParameterNames["DOMAIN"] = "domain";
    VqlParameterNames["DO_WORK"] = "do_work";
    VqlParameterNames["DX"] = "dx";
    VqlParameterNames["DY"] = "dy";
    VqlParameterNames["EDIT_DATA_ALERT"] = ":editDataAlert";
    VqlParameterNames["EMBED"] = ":embed";
    VqlParameterNames["EMBEDDED"] = "embedded";
    VqlParameterNames["ENCRYPTED"] = "encrypted";
    VqlParameterNames["API_EXTERNAL_VERSION"] = ":apiExternalVersion";
    VqlParameterNames["API_INTERNAL_VERSION"] = ":apiInternalVersion";
    VqlParameterNames["EXCLUDE"] = "exclude";
    VqlParameterNames["EXPORT_FORMAT"] = ":export_format";
    VqlParameterNames["FIELDNAME"] = "fieldname";
    VqlParameterNames["FIELD_NAME"] = "field_name";
    VqlParameterNames["FIELD_SEP"] = "field_sep";
    VqlParameterNames["FILE"] = "file";
    VqlParameterNames["FILTER_TILE_SIZE"] = "filterTileSize";
    VqlParameterNames["FN"] = "fn";
    VqlParameterNames["FOCUS"] = "focus";
    VqlParameterNames["FORCE_CACHE"] = "force_cache";
    VqlParameterNames["FORMAT"] = "format";
    VqlParameterNames["FORMAT_DATA_VALUE_LOCALLY"] = "formatDataValueLocally";
    VqlParameterNames["FROM_WG"] = ":from_wg";
    VqlParameterNames["GRAPHQL_DATABASE_ID"] = ":graphQLDatabaseId";
    VqlParameterNames["GRAPHQL_TABLE_ID"] = ":graphQLTableId";
    VqlParameterNames["GUID"] = ":guid";
    VqlParameterNames["H"] = "h";
    VqlParameterNames["HIDDEN"] = "hidden";
    VqlParameterNames["HIDE_CLOSE_BUTTON"] = ":hideCloseButton";
    VqlParameterNames["HIDE_EDIT_BUTTON"] = ":hideEditButton";
    VqlParameterNames["HIDE_EDIT_IN_DESKTOP_BUTTON"] = ":hideEditInDesktopButton";
    VqlParameterNames["HIGH_DPI"] = ":highdpi";
    VqlParameterNames["IMAGE_SIZE_LIMIT"] = "imageSizeLimit";
    VqlParameterNames["TRANSPARENT_LINE_MARKS_LIMIT"] = "transparentLineMarkLimit";
    VqlParameterNames["CLIENT_RENDER_PIXEL_LIMIT"] = "clientRenderPixelLimit";
    VqlParameterNames["IN"] = "in";
    VqlParameterNames["INSTANCE_ID"] = ":iid";
    VqlParameterNames["IS_GUEST_REDIRECT_FROM_VIZPORTAL"] = ":isGuestRedirectFromVizportal";
    VqlParameterNames["IS_MARK_ANIMATION_ENABLED"] = "isMarkAnimationEnabled";
    VqlParameterNames["IS_VIZPORTAL"] = ":isVizPortal";
    VqlParameterNames["INPUT_"] = "input_string";
    VqlParameterNames["JSDEBUG"] = ":jsdebug";
    VqlParameterNames["JSON"] = "json";
    VqlParameterNames["JSON_ONLY"] = ":jsonOnly";
    VqlParameterNames["KEEPFILE"] = "keepfile";
    VqlParameterNames["KEY"] = "key";
    VqlParameterNames["LANGUAGE"] = "language";
    VqlParameterNames["LANGUAGE_REQUESTED"] = ":language";
    VqlParameterNames["LINKTARGET"] = ":linktarget";
    VqlParameterNames["LOAD_ORDER_ID"] = ":loadOrderID";
    VqlParameterNames["LOAD_NEWEST_REVISION"] = ":loadNewestRevision";
    VqlParameterNames["LOCAL_PATHS"] = ":localPaths";
    VqlParameterNames["LOCALE"] = "locale";
    VqlParameterNames["LOCATION_ID"] = "locationid";
    VqlParameterNames["LOCATION_TYPE"] = "locationtype";
    VqlParameterNames["WORKBOOK_LOCALE"] = "workbookLocale";
    VqlParameterNames["MAXROWS"] = "maxrows";
    VqlParameterNames["MAX_AGE"] = "maxAge";
    VqlParameterNames["MAX_ROWS"] = "maxRows";
    VqlParameterNames["METHOD"] = "method";
    VqlParameterNames["MOBILE"] = "mobile";
    VqlParameterNames["MODIFIER"] = "modifier";
    VqlParameterNames["NAME"] = "name";
    VqlParameterNames["NAV_TYPE"] = "navType";
    VqlParameterNames["NAV_SRC"] = "navSrc";
    VqlParameterNames["NOATTACHMENT"] = "no-attachment";
    VqlParameterNames["NO_OVERWRITE"] = "no_overwrite";
    VqlParameterNames["OPEN_AUTHORING_IN_TOP_WINDOW"] = ":openAuthoringInTopWindow";
    VqlParameterNames["OPENID_HD"] = ":openid_hd";
    VqlParameterNames["OPENID_LOGIN_HINT"] = ":openid_login_hint";
    VqlParameterNames["OAUTHREQUEST"] = "oauthrequest";
    VqlParameterNames["OAUTH_CREDENTIAL_IDS"] = "oauth_credential_ids";
    VqlParameterNames["OFFLINE_MODE"] = ":offlinemode";
    VqlParameterNames["ORIGIN"] = ":origin";
    VqlParameterNames["OVERLAY"] = ":overlay";
    VqlParameterNames["P"] = "p";
    VqlParameterNames["PATH"] = "path";
    VqlParameterNames["PANE_RESOLVER_X"] = "paneResolverX";
    VqlParameterNames["PANE_RESOLVER_Y"] = "paneResolverY";
    VqlParameterNames["PARAM"] = "param";
    VqlParameterNames["PARENT_ID"] = "parent_id";
    VqlParameterNames["PASSWORD"] = "password";
    VqlParameterNames["PATTERN"] = "pattern";
    VqlParameterNames["PIXEL_RATIO"] = ":pixelratio";
    VqlParameterNames["PREFIX"] = ":prefix";
    VqlParameterNames["PREVIEW"] = ":preview";
    VqlParameterNames["PRIMARY_CONTENT_URL"] = "primary_content_url";
    VqlParameterNames["PROJECT"] = "project";
    VqlParameterNames["PROTOCOL"] = "protocol";
    VqlParameterNames["PSEUDO"] = ":pseudo";
    VqlParameterNames["QUERY"] = "query";
    VqlParameterNames["R"] = "r";
    VqlParameterNames["RANGE_TYPE"] = "range_type";
    VqlParameterNames["RECORD_SEP"] = "record_sep";
    VqlParameterNames["RECORD_CLIENT_PERFORMANCE"] = ":record_client_performance";
    VqlParameterNames["RECORD_PERFORMANCE"] = ":record_performance";
    VqlParameterNames["RECOVER_OLD_SESSION_ID"] = ":recover_old_session_id";
    VqlParameterNames["RECOVER_SESSION_STATE_TICKETS"] = ":recover_session_state_tickets";
    VqlParameterNames["REFRESH"] = ":refresh";
    VqlParameterNames["REFRESHUNMODIFIED"] = ":refreshunmodified";
    VqlParameterNames["REGION"] = "region";
    VqlParameterNames["RELOAD_ON_CUSTOM_VIEW_SAVE"] = ":reloadOnCustomViewSave";
    VqlParameterNames["RENDER"] = ":render";
    VqlParameterNames["RENDER_MAPS_CLIENT_SIDE"] = "renderMapsClientSide";
    VqlParameterNames["RETRY"] = ":retry";
    VqlParameterNames["REUSE"] = "reuse";
    VqlParameterNames["REUSE_FOREVER"] = "reuse_forever";
    VqlParameterNames["REVERT"] = ":revert";
    VqlParameterNames["SAVE_DB_PASSWORDS"] = "save_db_passwords";
    VqlParameterNames["SELECT_X"] = "select_x";
    VqlParameterNames["SELECT_Y"] = "select_y";
    VqlParameterNames["SESSION_FEATURE_PREFIX"] = ":ff_";
    VqlParameterNames["SESSION_FLAGS"] = ":session_feature_flags";
    VqlParameterNames["SHARE_BUTTON"] = "share_button";
    VqlParameterNames["SHEET_ID"] = "sheet_id";
    VqlParameterNames["SHARED"] = "shared";
    VqlParameterNames["SHOWALL"] = "showall";
    VqlParameterNames["SHOW_APP_BANNER"] = ":showAppBanner";
    VqlParameterNames["SHOW_ASK_DATA"] = ":showAskData";
    VqlParameterNames["SHOW_PARAMS"] = "showParams";
    VqlParameterNames["SHOW_SHARE_OPTIONS"] = ":showShareOptions";
    VqlParameterNames["SIZE"] = ":size";
    VqlParameterNames["SOURCE"] = "source";
    VqlParameterNames["STATE"] = "state";
    VqlParameterNames["STICKY_SESSION_KEY"] = "stickySessionKey";
    VqlParameterNames["SUBSCRIPTIONS"] = ":subscriptions";
    VqlParameterNames["SUMMARY"] = "summary";
    VqlParameterNames["SUPPRESS_DEFAULT_EDIT_BEHAVIOR"] = ":suppressDefaultEditBehavior";
    VqlParameterNames["SYNC_SESSION"] = ":sync_session";
    VqlParameterNames["SYNC_SESSION_STATE"] = "sync_session_state";
    VqlParameterNames["TABS"] = ":tabs";
    VqlParameterNames["TARGET"] = "target";
    VqlParameterNames["TARGET_SITE"] = "target_site";
    VqlParameterNames["TOOLBAR"] = ":toolbar";
    VqlParameterNames["TOOLTIP"] = ":tooltip";
    VqlParameterNames["TS"] = "ts";
    VqlParameterNames["UNDERLYING_TABLE_ID"] = "underlying_table_id";
    VqlParameterNames["UNDERLYING_TABLE_CAPTION"] = "underlying_table_caption";
    VqlParameterNames["UPDATE_TYPE"] = "update_type";
    VqlParameterNames["USE_GUEST"] = ":useGuest";
    VqlParameterNames["USE_INLINE_IMAGES"] = "use_inline_images";
    VqlParameterNames["USERAGENT"] = "useragent";
    VqlParameterNames["USERNAME"] = "username";
    VqlParameterNames["VALUE"] = "value";
    VqlParameterNames["VERBOSE_MODE"] = "verboseMode";
    VqlParameterNames["VIEW_ID"] = "views_id";
    VqlParameterNames["VIZ_SNAPSHOT_ID"] = "viz_snapshot_id";
    VqlParameterNames["VW"] = ":vw";
    VqlParameterNames["W"] = "w";
    VqlParameterNames["WORKSHEET_PORT_SIZE"] = "worksheetPortSize";
    VqlParameterNames["WATERMARK"] = "watermark";
    VqlParameterNames["WATERMARK_MARGIN"] = ":watermark_margin";
    VqlParameterNames["WB"] = ":wb";
    VqlParameterNames["WHICH"] = "which";
    VqlParameterNames["X"] = "x";
    VqlParameterNames["Y"] = "y";
    VqlParameterNames["ZID"] = "zid";
    VqlParameterNames["ZONE_ID"] = "zone_id";
    VqlParameterNames["KEYCHAIN_VERSION"] = "keychain_version";
    VqlParameterNames["DATASOURCE_ID"] = "datasource_id";
    VqlParameterNames["DATASOURCE_NAME"] = "datasource_name";
    VqlParameterNames["LENS_ID"] = "lens_id";
    VqlParameterNames["WIDTH"] = "width";
    VqlParameterNames["HEIGHT"] = "height";
    // Default Layout params
    VqlParameterNames["LAYOUT_VIEWS"] = "views";
    VqlParameterNames["LAYOUT_MENUS"] = "menus";
    VqlParameterNames["LAYOUT_GEOMETRY"] = "geometry";
    VqlParameterNames["LAYOUT_PAGES"] = "pages";
    VqlParameterNames["LAYOUT_CACHEURL"] = "cacheurl";
    VqlParameterNames["LAYOUT_SHEET"] = "sheet";
    VqlParameterNames["LAYOUT_DEPTH"] = "depth";
})(VqlParameterNames || (VqlParameterNames = {}));
/**
 * parameters that are only relevant when working with Tableau Public
 * maybe not really necessry to split them out
 */
var PublicParameterNames;
(function (PublicParameterNames) {
    PublicParameterNames["SHOW_VIZ_HOME"] = ":showVizHome";
    // display view count
})(PublicParameterNames || (PublicParameterNames = {}));
/**
 * Map the parameter names as used in the url to what we call them publicly in the embedding library.
 * The only parameters listed here should be the ones that get sent to vizql
 *  - this should match the interface at external-contract:VizInterfaces:VizSettings
 */
var VizOptionNames;
(function (VizOptionNames) {
    // publicName = internalStringValue
    VizOptionNames["Size"] = ":size";
    VizOptionNames["Embed"] = ":embed";
    VizOptionNames["ApiInternalVersion"] = ":apiInternalVersion";
    VizOptionNames["ApiExternalVersion"] = ":apiExternalVersion";
    VizOptionNames["ShowVizHome"] = ":showVizHome";
    VizOptionNames["Jsdebug"] = ":jsdebug";
    VizOptionNames["BootstrapWhenNotified"] = ":bootstrapWhenNotified";
    VizOptionNames["NavType"] = "navType";
    VizOptionNames["NavSrc"] = "navSrc";
    VizOptionNames["debug"] = ":jsdebug";
    VizOptionNames["ApiID"] = ":apiID";
    VizOptionNames["disableUrlActionsPopups"] = ":disableUrlActionsPopups";
    VizOptionNames["hideTabs"] = ":tabs";
    VizOptionNames["toolbar"] = ":toolbar";
    VizOptionNames["device"] = ":device";
    VizOptionNames["instanceIdToClone"] = ":iid";
    VizOptionNames["touchOptimize"] = "mobile";
    VizOptionNames["hideEditButton"] = ":hideEditButton";
    VizOptionNames["hideEditInDesktopButton"] = ":hideEditInDesktopButton";
    VizOptionNames["suppressDefaultEditBehavior"] = ":suppressDefaultEditBehavior";
    VizOptionNames["hideCloseButton"] = ":hideCloseButton";
})(VizOptionNames = exports.VizOptionNames || (exports.VizOptionNames = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js":
/*!****************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var guid = __webpack_require__(/*! guid */ "../../node_modules/guid/guid.js");
var JsApiInternalContract_1 = __webpack_require__(/*! ../JsApiInternalContract */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CrossFramePreparedMessage_1 = __webpack_require__(/*! ./CrossFramePreparedMessage */ "../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js");
var MessageTypeChecks_1 = __webpack_require__(/*! ./MessageTypeChecks */ "../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js");
var MessageTypes_1 = __webpack_require__(/*! ./interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js");
/**
 * The CrossFrameMessenger is the primary export from the api-messaging module. An instance of
 * this class can be instantiated on both sides of a frame boundary to facilitate communication
 * in both directions between the frames. This class implements both the dispatcher and the listener
 * portions, but doesn't require callers to care about both.
 */
var CrossFrameMessenger = /** @class */ (function () {
    /**
     * Creates an instance of CrossFrameMessenger. If you would like to use the CrossFrameMessenger as a MessageListener,
     * be sure to call StartListening and register message handlers.
     * @param thisWindow The window object which the CrossFrameMessenger lives. An onMessage listener will be added here.
     * @param [otherWindow] Optional otherWindow which messages will be posted to.
     *                      If defined, incoming messages must originate from otherWindow to be passed on
     * @param [otherWindowOrigin] The target origin which otherWindow must have in order to receive dispatched messages.
     *                            This value will be sent as the targetOrigin of a postMessage
     *                            (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
     */
    function CrossFrameMessenger(thisWindow, otherWindow, otherWindowOrigin) {
        this.thisWindow = thisWindow;
        this.otherWindow = otherWindow;
        this.otherWindowOrigin = otherWindowOrigin;
        // Make sure to call StartListening
    }
    ///// MessageListener Implementation
    CrossFrameMessenger.prototype.startListening = function () {
        var _this = this;
        // Check if we already are listening, if not, hook up a message listener
        if (!this.unregisterFunction) {
            var boundHandler_1 = this.onMessageReceived.bind(this);
            this.thisWindow.addEventListener('message', boundHandler_1, true);
            this.unregisterFunction = function () { return _this.thisWindow.removeEventListener('message', boundHandler_1, true); };
        }
    };
    CrossFrameMessenger.prototype.stopListening = function () {
        // Stop listening if we have started listening
        if (this.unregisterFunction) {
            this.unregisterFunction();
            this.unregisterFunction = undefined;
        }
    };
    CrossFrameMessenger.prototype.setInitializeMessageHandler = function (handler) {
        this.initializeMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setCommandResponseMessageHandler = function (handler) {
        this.commandResponseMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setCommandMessageHandler = function (handler) {
        this.commandMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setNotificationMessageHandler = function (handler) {
        this.notificationMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setHandshakeMessageHandler = function (handler) {
        this.handshakeMessageHandler = handler;
    };
    ///// MessageDispatcher Implementation
    /**
     * @param apiVersion api-internal-contract-js version (exported in JsApiInternalConntract)
     * @param crossFrameVersion crossframe messaging version (exported in JsApiInternalConntract)
     * @param options additional options that can be passed at initialization (information about the version of
     *                external being used for example)
     */
    CrossFrameMessenger.prototype.prepareInitializationMessage = function (apiVersion, crossFrameVersion, options) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Initialize,
            crossFrameVersion: crossFrameVersion,
            apiVersion: apiVersion,
            options: options,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareCommandMessage = function (verbId, parameters) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Command,
            verbId: verbId,
            parameters: parameters,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareCommandResponseMessage = function (commandGuid, data, error) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.CommandResponse,
            commandGuid: commandGuid,
            data: data,
            error: error,
        };
        if (error) {
            // stringify error object to remove unserializable fields like functions and prevent serialization errors
            message.error = JSON.parse(JSON.stringify(error));
        }
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareNotificationMessage = function (notificationId, data) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Notification,
            notificationId: notificationId,
            data: data,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareAckMessage = function () {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Ack,
            platformVersion: JsApiInternalContract_1.INTERNAL_CONTRACT_VERSION,
        };
        return this.prepareMessage(message);
    };
    /**
     * Prepares a pending message for sending and returns the prepared message
     *
     * @param msg The message to be sent to this.otherWindow
     * @returns The prepared message
     */
    CrossFrameMessenger.prototype.prepareMessage = function (msg) {
        if (!this.otherWindow || !this.otherWindowOrigin) {
            throw 'Other window not initialized, cannot dispatch messages';
        }
        var preparedMessage = new CrossFramePreparedMessage_1.CrossFramePreparedMessage(msg, this.otherWindow, this.otherWindowOrigin);
        return preparedMessage;
    };
    /**
     * Called when a message is received. Does some validation of the message, and then
     * calls an appropriate message handler if one is defined
     *
     * @param event The incoming MessageEvent
     */
    CrossFrameMessenger.prototype.onMessageReceived = function (event) {
        // If we have an otherWindow defined, make sure the message is coming from there
        if (this.otherWindow && event.source !== this.otherWindow) {
            return;
        }
        // Do some validation on event.data to make sure that we have received a real message
        if (!event.data) {
            return;
        }
        var message = event.data;
        if (!MessageTypeChecks_1.isMessage(message)) {
            return;
        }
        // Check the declared message type, validate the message, and call an appropriate hander if one exists
        switch (message.msgType) {
            case MessageTypes_1.MessageType.Initialize: {
                if (!MessageTypeChecks_1.isInitMessage(message) || !this.initializeMessageHandler) {
                    return;
                }
                this.initializeMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.CommandResponse: {
                if (!MessageTypeChecks_1.isCommandResponseMessage(message) || !this.commandResponseMessageHandler) {
                    return;
                }
                this.commandResponseMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Command: {
                if (!MessageTypeChecks_1.isCommandMessage(message) || !this.commandMessageHandler) {
                    return;
                }
                this.commandMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Notification: {
                if (!MessageTypeChecks_1.isNotificationMessage(message) || !this.notificationMessageHandler) {
                    return;
                }
                this.notificationMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Handshake: {
                if (!MessageTypeChecks_1.isHandshakeMessage(message) || !this.handshakeMessageHandler) {
                    return;
                }
                this.handshakeMessageHandler(message, event.source);
                break;
            }
            default:
            // Just ignore this since we don't know how to handle the message type
        }
    };
    CrossFrameMessenger.prototype.setOtherWindow = function (otherWindow) {
        this.otherWindow = otherWindow;
    };
    CrossFrameMessenger.prototype.setOtherWindowOrigin = function (origin) {
        this.otherWindowOrigin = origin;
    };
    return CrossFrameMessenger;
}());
exports.CrossFrameMessenger = CrossFrameMessenger;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the PreparedMessage interface used to post messages between
 * two frames using window.postMessage
 */
var CrossFramePreparedMessage = /** @class */ (function () {
    /**
     * Creates an instance of CrossFramePreparedMessage.
     * @param _message The message to be sent
     * @param _target The target window where the message will be sent
     * @param _origin The targetOrigin where this message can be received
     */
    function CrossFramePreparedMessage(_message, _target, _origin) {
        this._message = _message;
        this._target = _target;
        this._origin = _origin;
    }
    Object.defineProperty(CrossFramePreparedMessage.prototype, "messageGuid", {
        get: function () {
            return this._message.msgGuid;
        },
        enumerable: true,
        configurable: true
    });
    CrossFramePreparedMessage.prototype.send = function () {
        this._target.postMessage(this._message, this._origin);
        return this;
    };
    return CrossFramePreparedMessage;
}());
exports.CrossFramePreparedMessage = CrossFramePreparedMessage;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js":
/*!**************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var guid = __webpack_require__(/*! guid */ "../../node_modules/guid/guid.js");
var Notifications_1 = __webpack_require__(/*! ../contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js");
var MessageTypes_1 = __webpack_require__(/*! ./interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js");
var expectedEmptyNotifications = new Set([
    Notifications_1.NotificationId.EditButtonClicked,
    Notifications_1.NotificationId.EditInDesktopButtonClicked,
    Notifications_1.NotificationId.WorkbookPublished,
    Notifications_1.NotificationId.WorkbookReadyToClose,
    Notifications_1.NotificationId.ReadyToReceiveAuthToken,
]);
/* tslint:disable no-any */
function isMessage(data) {
    if (!data) {
        return false;
    }
    var message = data;
    if (!message || !message.msgGuid || !message.msgType) {
        return false;
    }
    if (!guid.isGuid(message.msgGuid)) {
        return false;
    }
    if (typeof message.msgType !== 'string') {
        return false;
    }
    var messageTypes = [
        MessageTypes_1.MessageType.Command,
        MessageTypes_1.MessageType.CommandResponse,
        MessageTypes_1.MessageType.Initialize,
        MessageTypes_1.MessageType.Notification,
        MessageTypes_1.MessageType.Handshake,
    ];
    if (messageTypes.indexOf(message.msgType) < 0) {
        return false;
    }
    return true;
}
exports.isMessage = isMessage;
function isVersion(versionNumber) {
    if (!versionNumber) {
        return false;
    }
    var v = versionNumber;
    if (typeof v !== 'object') {
        return false;
    }
    if (typeof v.fix !== 'number' || typeof v.minor !== 'number' || typeof v.major !== 'number') {
        return false;
    }
    return true;
}
exports.isVersion = isVersion;
function isInitMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var initMessage = message;
    if (initMessage.msgType !== MessageTypes_1.MessageType.Initialize) {
        return false;
    }
    if (!initMessage.apiVersion || !isVersion(initMessage.apiVersion)) {
        return false;
    }
    if (!initMessage.crossFrameVersion || !isVersion(initMessage.crossFrameVersion)) {
        return false;
    }
    return true;
}
exports.isInitMessage = isInitMessage;
function isCommandResponseMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var crMessage = message;
    if (crMessage.msgType !== MessageTypes_1.MessageType.CommandResponse) {
        return false;
    }
    if (!guid.isGuid(crMessage.commandGuid)) {
        return false;
    }
    if (!crMessage.data && !crMessage.error) {
        return false;
    }
    return true;
}
exports.isCommandResponseMessage = isCommandResponseMessage;
function isCommandMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var commandMessage = message;
    if (commandMessage.msgType !== MessageTypes_1.MessageType.Command) {
        return false;
    }
    if (!commandMessage.parameters || typeof commandMessage.parameters !== 'object') {
        return false;
    }
    if (!commandMessage.verbId || typeof commandMessage.verbId !== 'string') {
        return false;
    }
    return true;
}
exports.isCommandMessage = isCommandMessage;
function isNotificationMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var notificationMessage = message;
    if (notificationMessage.msgType !== MessageTypes_1.MessageType.Notification) {
        return false;
    }
    if (!notificationMessage.data && !expectedEmptyNotifications.has(notificationMessage.notificationId)) {
        return false;
    }
    if (!notificationMessage.notificationId || typeof notificationMessage.notificationId !== 'string') {
        return false;
    }
    return true;
}
exports.isNotificationMessage = isNotificationMessage;
function isHandshakeMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var handshakeMessage = message;
    if (handshakeMessage.msgType !== MessageTypes_1.MessageType.Handshake) {
        return false;
    }
    return true;
}
exports.isHandshakeMessage = isHandshakeMessage;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js":
/*!*******************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Enum defining the 4 different types of messages we have defined
 */
var MessageType;
(function (MessageType) {
    MessageType["Initialize"] = "initialize";
    MessageType["Notification"] = "notification";
    MessageType["Command"] = "command";
    MessageType["CommandResponse"] = "command-response";
    MessageType["Handshake"] = "v-handshake";
    MessageType["Ack"] = "v-ack";
})(MessageType = exports.MessageType || (exports.MessageType = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * This version converter doesn't actually do anything but is useful for testing or when we have
 * a matching platform and internal version number
 */
var IdentityVersionConverter = /** @class */ (function () {
    function IdentityVersionConverter() {
    }
    IdentityVersionConverter.prototype.upgradeExecuteCall = function (verb, parameters) {
        return {
            verb: verb,
            parameters: parameters,
        };
    };
    IdentityVersionConverter.prototype.downgradeExecuteReturn = function (executeResponse) {
        return executeResponse;
    };
    IdentityVersionConverter.prototype.downgradeNotification = function (notification) {
        return notification;
    };
    return IdentityVersionConverter;
}());
exports.IdentityVersionConverter = IdentityVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. The only
 * mode it supports is external's version <= platform's version. When executing
 * commands, it is used to upgrade the external representation to what platform knows on the way in
 * and downgrade the representations on the way out. Similarly for notifications, it can
 * downgrade those on the way from platform to external.
 */
var StackingVersionConverter = /** @class */ (function () {
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalMajorVersion The major version of the internal contract api-external-js is using
     * @param _platformMajorVersion The major version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    function StackingVersionConverter(_externalMajorVersion, _platformMajorVersion, _upgradeExecuteTranslations, _downgradeExecuteTranslations, _downgradeNotificationTranslations) {
        this._externalMajorVersion = _externalMajorVersion;
        this._platformMajorVersion = _platformMajorVersion;
        this._upgradeExecuteTranslations = _upgradeExecuteTranslations;
        this._downgradeExecuteTranslations = _downgradeExecuteTranslations;
        this._downgradeNotificationTranslations = _downgradeNotificationTranslations;
        if (this._externalMajorVersion > this._platformMajorVersion) {
            throw new Error("Cannot convert between external version " + this._externalMajorVersion + " and " + this._platformMajorVersion);
        }
    }
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    StackingVersionConverter.fromData = function (externalVersion, platformVersion, upgradeExecuteTranslations, downgradeExecuteTranslations, downgradeNotificationTranslations) {
        return new this(externalVersion.major, platformVersion.major, upgradeExecuteTranslations, downgradeExecuteTranslations, downgradeNotificationTranslations);
    };
    StackingVersionConverter.prototype.upgradeExecuteCall = function (verb, parameters) {
        // Perform the upgrade of the verb and parameters to the level that platform is using
        var upgraded = { verb: verb, parameters: parameters };
        for (var _i = 0, _a = this._upgradeExecuteTranslations; _i < _a.length; _i++) {
            var upgradeTranslation = _a[_i];
            upgraded = upgradeTranslation(upgraded.verb, upgraded.parameters);
        }
        return upgraded;
    };
    StackingVersionConverter.prototype.downgradeExecuteReturn = function (executeResponse) {
        // Downgrade the response to what the external module is expecting
        var downgraded = executeResponse;
        for (var _i = 0, _a = this._downgradeExecuteTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded);
        }
        return downgraded;
    };
    StackingVersionConverter.prototype.downgradeNotification = function (notification) {
        // Downgrade the notification to what the external module is expecting
        var downgraded = notification;
        for (var _i = 0, _a = this._downgradeNotificationTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded);
        }
        return downgraded;
    };
    return StackingVersionConverter;
}());
exports.StackingVersionConverter = StackingVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js":
/*!*********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var IdentityVersionConverter_1 = __webpack_require__(/*! ./IdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js");
var StackingVersionConverter_1 = __webpack_require__(/*! ./StackingVersionConverter */ "../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js");
var VersionTranslations_1 = __webpack_require__(/*! ./VersionTranslations */ "../api-internal-contract-js/lib/src/versioning/VersionTranslations.js");
/**
 * @returns true if lhs < rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
function VersionLessThan(lhs, rhs) {
    if (lhs.major > rhs.major) {
        return false;
    }
    if (lhs.major < rhs.major) {
        return true;
    }
    return lhs.minor < rhs.minor;
}
exports.VersionLessThan = VersionLessThan;
/**
 * @returns true if lhs == rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
function VersionEqualTo(lhs, rhs) {
    return lhs.major === rhs.major && lhs.minor === rhs.minor;
}
exports.VersionEqualTo = VersionEqualTo;
// A mapping from an older client version of internal-contract to the current platform version of this contract.
// Each version bump can have an array of translations to perform in order. Notice that this is
// different than the major upgrades/downgrades above because it handles both major and minor version changes.
// Also please note: downgradeExecuteCall is handled on the client/external side rather than platform side.
// When updating the major or minor version of our internal-contract, you will need to update these data structures.
// * If there are translations to add, add them to the version to "upgrade from" or "downgrade to".
exports.ExecuteMinorUpgrades = {
    1: {
        9: [],
    },
};
exports.ExecuteMinorDowngrades = {
    1: {
        5: [VersionTranslations_1.DowngradeWorksheetNames],
        9: [],
    },
};
exports.NotificationMinorDowngrades = {
    1: {
        9: [],
        10: [VersionTranslations_1.DowngradeFlipboardZoneID],
    },
};
/**
 * Creates a new InternalContractVersionConverter which has the ability to upgrade and downgrade the contract
 * between the two versions, which are specified. If externalMajorVersion is greater than platformMajorVersion,
 * an error will be thrown because we won't know how to do those conversions.
 * This converter can handle both major and minor updates when the platform version is greater than external version.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
function CreateVersionConverter(externalVersion, platformVersion) {
    return CreateVersionConverterWithTranslators(externalVersion, platformVersion, exports.ExecuteMinorUpgrades, exports.ExecuteMinorDowngrades, exports.NotificationMinorDowngrades);
}
exports.CreateVersionConverter = CreateVersionConverter;
/**
 * Implementation of CreateVersionConverter. This function takes the upgrade, downgrade, and
 * notification arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 * @param upgrades MajorMinorTranslators for upgrades
 * @param downgrades MajorMinorTranslators for downgrades
 * @param notificationDowngrades MajorMinorTranslators for notification downgrades
 */
function CreateVersionConverterWithTranslators(externalVersion, platformVersion, upgrades, downgrades, notificationDowngrades) {
    var externalMajorVersion = externalVersion.major;
    var externalMinorVersion = externalVersion.minor;
    var platformMajorVersion = platformVersion.major;
    if (externalMajorVersion > platformMajorVersion) {
        throw new Error("External version must be less than or equal to platform version.\n    externalMajorVersion=" + externalMajorVersion + " platformMajorVersion=" + platformMajorVersion);
    }
    // If we are using the exact same versions (major.minor), just use the identity converter
    if (VersionEqualTo(externalVersion, platformVersion)) {
        return new IdentityVersionConverter_1.IdentityVersionConverter();
    }
    // Walk the span between the versions we have here and collect the upgrade and downgrades necessary
    var neededExecuteUpgrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, upgrades);
    var neededExecuteDowngrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, downgrades);
    var neededNotificationDowngrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, notificationDowngrades);
    // We want to apply the downgrades in reverse order in case of dependencies between them
    neededExecuteDowngrades.reverse();
    neededNotificationDowngrades.reverse();
    return StackingVersionConverter_1.StackingVersionConverter.fromData(externalVersion, platformVersion, neededExecuteUpgrades, neededExecuteDowngrades, neededNotificationDowngrades);
}
exports.CreateVersionConverterWithTranslators = CreateVersionConverterWithTranslators;
function GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, majorMinorTranslators) {
    var neededTranslations = [];
    for (var major = externalMajorVersion; major <= platformMajorVersion; major++) {
        if (major in majorMinorTranslators) {
            var start = major === externalMajorVersion ? externalMinorVersion : 0;
            var maximumMinorVersion = GetMaximumMinorIndex(Object.keys(majorMinorTranslators[major]));
            for (var minor = start; minor <= maximumMinorVersion; minor++) {
                if (minor in majorMinorTranslators[major]) {
                    neededTranslations.push.apply(neededTranslations, majorMinorTranslators[major][minor]);
                }
            }
        }
    }
    return neededTranslations;
}
function GetMaximumMinorIndex(minorVersions) {
    return minorVersions.map(function (a) { return Number(a); }).reduce(function (a, b) { return (a > b ? a : b); });
}
exports.GetMaximumMinorIndex = GetMaximumMinorIndex;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/VersionTranslations.js":
/*!*****************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/VersionTranslations.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Notifications_1 = __webpack_require__(/*! ../contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js");
// This is where we will start to define some of these translations.
// When modifying existing models, add the requisite conversion functions here, then use them
// in the VersionConverterFactory implementation. Import old versions as you would any other module
// 0 <-> Translations
// Uncomment this line to import from the V0 definition of the API
// import * as V0 from '@tableau-api-internal-contract-js_v0';
// 1 <-> 2 Translations
// Uncomment this line to import from the V1 definition of the API
// import * as V1 from '@tableau-api-internal-contract-js_v1';
function DowngradeWorksheetNames(executeResponse) {
    // Fix the dashboard friendly name issue. The structures are compatible,
    // so we still return the original reply, but we copy the SheetInfo.name
    // into the DashboardZone.name, where v1 wants to find it.
    var bootstrapInfo = executeResponse.result;
    if (bootstrapInfo.extensionDashboardInfo !== undefined) {
        bootstrapInfo.extensionDashboardInfo.zones.forEach(function (zone) {
            if (zone.sheetInfo) {
                zone.name = zone.sheetInfo.name;
            }
        });
    }
    return executeResponse;
}
exports.DowngradeWorksheetNames = DowngradeWorksheetNames;
function DowngradeFlipboardZoneID(notification) {
    // Fix the FlipboardZoneId issue. Older external versions still check for flipboardZoneIDs.
    // When running against a newer server, if flipboardZoneId is absent, set it to default(0).
    if (notification.notificationId === Notifications_1.NotificationId.SelectedMarksChanged) {
        var visualModel = notification.data;
        if (visualModel.flipboardZoneID === undefined) {
            visualModel.flipboardZoneID = 0;
        }
    }
    return notification;
}
exports.DowngradeFlipboardZoneID = DowngradeFlipboardZoneID;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js":
/*!***************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * This version converter doesn't actually do anything but is useful for testing or when we have
 * a matching platform and external version number
 */
var ExternalIdentityVersionConverter = /** @class */ (function () {
    function ExternalIdentityVersionConverter() {
    }
    ExternalIdentityVersionConverter.prototype.downgradeExecuteCall = function (verb, parameters) {
        return {
            verb: verb,
            parameters: parameters,
        };
    };
    ExternalIdentityVersionConverter.prototype.upgradeExecuteReturn = function (executeResponse, verb, parameters) {
        return executeResponse;
    };
    ExternalIdentityVersionConverter.prototype.upgradeNotification = function (notification) {
        return notification;
    };
    return ExternalIdentityVersionConverter;
}());
exports.ExternalIdentityVersionConverter = ExternalIdentityVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js":
/*!***************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. This converter
 * supports external's version(minor) >= platform's version(minor). When executing
 * commands, it is used to downgrade the external representation to what platform knows on the way in
 * and upgrade the representations on the way out.
 */
var ExternalStackingVersionConverter = /** @class */ (function () {
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _downgradeExecuteCallTranslations Ordered list of the translations to perform when downgrading cmd parameters
     * @param _upgradeExecuteReturnTranslations Ordered list of upgrade translations to perform after a cmd is executed
     * @param _upgradeNotificationTranslations Ordered list of upgrade notfications to perform on events
     */
    function ExternalStackingVersionConverter(_externalVersion, _platformVersion, _downgradeExecuteCallTranslations, _upgradeExecuteReturnTranslations, _upgradeNotificationTranslations) {
        this._externalVersion = _externalVersion;
        this._platformVersion = _platformVersion;
        this._downgradeExecuteCallTranslations = _downgradeExecuteCallTranslations;
        this._upgradeExecuteReturnTranslations = _upgradeExecuteReturnTranslations;
        this._upgradeNotificationTranslations = _upgradeNotificationTranslations;
        if (this._externalVersion.major > this._platformVersion.major) {
            throw new Error("Cannot convert between external version " + this._externalVersion.major + "\n      and " + this._platformVersion.major);
        }
    }
    ExternalStackingVersionConverter.prototype.downgradeExecuteCall = function (verb, parameters) {
        // Perform the downgrade of the verb and parameters to the level that platform is using
        var downgraded = { verb: verb, parameters: parameters };
        for (var _i = 0, _a = this._downgradeExecuteCallTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded.verb, downgraded.parameters);
        }
        return downgraded;
    };
    ExternalStackingVersionConverter.prototype.upgradeExecuteReturn = function (executeResponse, verb, parameters) {
        // Perform the upgrade of the response to what the external module is expecting
        var upgraded = executeResponse;
        for (var _i = 0, _a = this._upgradeExecuteReturnTranslations; _i < _a.length; _i++) {
            var upgradeTranslation = _a[_i];
            upgraded = upgradeTranslation(upgraded, verb, parameters);
        }
        return upgraded;
    };
    ExternalStackingVersionConverter.prototype.upgradeNotification = function (notification) {
        // Perform the upgrade of notification to what the external module is expecting
        var upgraded = notification;
        for (var _i = 0, _a = this._upgradeNotificationTranslations; _i < _a.length; _i++) {
            var upgradeNotification = _a[_i];
            upgraded = upgradeNotification(upgraded);
        }
        return upgraded;
    };
    return ExternalStackingVersionConverter;
}());
exports.ExternalStackingVersionConverter = ExternalStackingVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js":
/*!**************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var VersionConverterFactory_1 = __webpack_require__(/*! ../VersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js");
var ExternalIdentityVersionConverter_1 = __webpack_require__(/*! ./ExternalIdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js");
var ExternalStackingVersionConverter_1 = __webpack_require__(/*! ./ExternalStackingVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js");
var ExternalVersionTranslations_1 = __webpack_require__(/*! ./ExternalVersionTranslations */ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js");
// A mapping from the current client version of internal-contract to an older platform version of the contract.
// Each version bump can have an array of translations to perform in order.
// These translations handle downgradeExecuteCall and upgradeExecuteReturn and are meant to be called on the
// client/external side.
// When updating the major or minor version of our internal-contract, you will need to update these data structures.
// * If there are translations to add, add them to the version to 'upgrade from' or 'downgrade to'.
exports.ExecuteMinorDowngradeCallExternal = {
    1: {
        9: [],
        13: [ExternalVersionTranslations_1.DowngradeUnderlyingTableDataAsync, ExternalVersionTranslations_1.DowngradeLogicalTableDataAsync],
    },
};
exports.ExecuteMinorUpgradeReturnExternal = {
    1: {
        9: [ExternalVersionTranslations_1.UpgradeDataTableTypes],
        29: [ExternalVersionTranslations_1.UpgradeDataTableRowsAndColumns],
    },
};
exports.ExecuteMinorUpgradeNotification = {
    1: {
        9: [],
    },
};
/**
 * Creates a new ExternalContractVersionConverter which has the ability to upgrade and downgrade
 * the contract between the two versions which are specified. If externalMajorVersion is less than
 * platformMajorVersion, an ExternalIdentityVersionConverter will be returned.
 * Handles upgrade/downgrade for both major and minor updates.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
function CreateExternalCompatibleVersionConverter(externalVersion, platformVersion) {
    return CreateExternalCompatibleVersionConverterWithTranslators(externalVersion, platformVersion, exports.ExecuteMinorDowngradeCallExternal, exports.ExecuteMinorUpgradeReturnExternal, exports.ExecuteMinorUpgradeNotification);
}
exports.CreateExternalCompatibleVersionConverter = CreateExternalCompatibleVersionConverter;
/**
 * Implementation of CreateExternalCompatibleVersionConverterWithTranslators.
 * This function takes the upgrade, downgrade arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal contract which the external module is using
 * @param platformVersion VersionNumber of the internal contract which the platform is using
 * @param upgrades MajorMinorTranslators for response upgrades
 * @param downgrades MajorMinorTranslators for execute call downgrades
 */
function CreateExternalCompatibleVersionConverterWithTranslators(externalVersion, platformVersion, downgrades, upgrades, upgradeNotifications) {
    var externalMajorVersion = externalVersion.major;
    var platformMajorVersion = platformVersion.major;
    var platformMinorVersion = platformVersion.minor;
    // This check is present in VersionConverterFactory. We throw the same error here as well.
    // Hence we only need to check the minor versions for translations.
    if (externalMajorVersion > platformMajorVersion) {
        throw new Error("External version must be less than or equal to platform version.\n    externalMajorVersion=" + externalMajorVersion + " platformMajorVersion=" + platformMajorVersion);
    }
    if (externalMajorVersion < platformMajorVersion || VersionConverterFactory_1.VersionEqualTo(externalVersion, platformVersion)) {
        return new ExternalIdentityVersionConverter_1.ExternalIdentityVersionConverter();
    }
    // Walk the span between the versions we have here and collect the upgrade and downgrades necessary
    var neededExecuteCallDowngrade = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, downgrades);
    var neededExecuteReturnUpgrades = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, upgrades);
    var neededNotificationUpgrades = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, upgradeNotifications);
    // Reverse the downgrade calls, so that we start the downgrade from the external version to the platform version
    neededExecuteCallDowngrade.reverse();
    return new ExternalStackingVersionConverter_1.ExternalStackingVersionConverter(externalVersion, platformVersion, neededExecuteCallDowngrade, neededExecuteReturnUpgrades, neededNotificationUpgrades);
}
exports.CreateExternalCompatibleVersionConverterWithTranslators = CreateExternalCompatibleVersionConverterWithTranslators;
function GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, majorMinorTranslators) {
    var neededTranslations = [];
    if (platformMajorVersion in majorMinorTranslators) {
        var start = platformMinorVersion;
        var maximumMinorVersion = VersionConverterFactory_1.GetMaximumMinorIndex(Object.keys(majorMinorTranslators[platformMajorVersion]));
        for (var minor = start; minor <= maximumMinorVersion; minor++) {
            if (minor in majorMinorTranslators[platformMajorVersion]) {
                neededTranslations.push.apply(neededTranslations, majorMinorTranslators[platformMajorVersion][minor]);
            }
        }
    }
    return neededTranslations;
}


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js":
/*!**********************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var JsApiInternalContract_1 = __webpack_require__(/*! ../../JsApiInternalContract */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
// 1.2 -> 1.0 Translations
// Uncomment this line to import from the V1 definition of the API
// import * as V1 from '@tableau-api-internal-contract-js_v1';
/**
 * Prior to 2019.2 (internal-contract v1.9), DataValue.value were all strings.
 * Go through all DataValue objects. If we have a string, but the type should not be a string,
 * convert it to the correct type. The type of DataValue.value is 'any' in the contract, so
 * this change doesn't need any updates to classes or types.
 */
function UpgradeDataTableTypes(executeResponse, verb, parameters) {
    if (!executeResponse) {
        return executeResponse;
    }
    var oldUnderlyingDataTable = executeResponse.result;
    if (oldUnderlyingDataTable.data !== undefined && oldUnderlyingDataTable.isSummary !== undefined) {
        convertDataValues(oldUnderlyingDataTable.data);
        return executeResponse;
    }
    var oldSelectedMarksTable = executeResponse.result;
    if (oldSelectedMarksTable.data !== undefined && Array.isArray(oldSelectedMarksTable.data)) {
        oldSelectedMarksTable.data.forEach(function (marksTable) {
            convertDataValues(marksTable);
        });
        return executeResponse;
    }
    return executeResponse;
}
exports.UpgradeDataTableTypes = UpgradeDataTableTypes;
/**
 * Prior to 2020.2 (internal-contract v1.13 and older), worksheet.getUnderlyingTableDataAsync doesn't exist.
 * Map it to the older GetUnderlyingData verb and validate the the logical table Id.
 **/
function DowngradeUnderlyingTableDataAsync(verb, parameters) {
    if (verb === JsApiInternalContract_1.VerbId.GetUnderlyingTableData) {
        validateParametersForObjectModel(verb, parameters);
        verb = JsApiInternalContract_1.VerbId.GetUnderlyingData;
    }
    return {
        verb: verb,
        parameters: parameters,
    };
}
exports.DowngradeUnderlyingTableDataAsync = DowngradeUnderlyingTableDataAsync;
/**
 * Prior to 2020.2 (internal-contract v1.13 and older), datasource.getLogicalTableDataAsync doesn't exist.
 * Map it to the older GetDataSourceData verb and validate the the logical table Id.
 **/
function DowngradeLogicalTableDataAsync(verb, parameters) {
    if (verb === JsApiInternalContract_1.VerbId.GetLogicalTableData) {
        validateParametersForObjectModel(verb, parameters);
        verb = JsApiInternalContract_1.VerbId.GetDataSourceData;
    }
    return {
        verb: verb,
        parameters: parameters,
    };
}
exports.DowngradeLogicalTableDataAsync = DowngradeLogicalTableDataAsync;
function convertDataValues(table) {
    // dataTable is a two-dimensional array of data. First index is the row, second is the column.
    if (table === undefined || table.dataTable === undefined || !Array.isArray(table.dataTable)) {
        return;
    }
    table.dataTable.forEach(function (row) {
        row.forEach(function (dataValue, columnIndex) {
            var value = dataValue.value;
            if (value !== null) {
                dataValue.value = JsApiInternalContract_1.DataTypeConverter.convertValueAsStringToValue(value, table.headers[columnIndex].dataType);
            }
        });
    });
}
// ToDo: TFS1069027 Refactor input verbs & parameters in api-internal-contract Upgrade/Downgrade framework
function validateParametersForObjectModel(verb, parameters) {
    if (parameters[JsApiInternalContract_1.ParameterId.LogicalTableId] !== JsApiInternalContract_1.ApiShowDataTableSentinel.SingleTableId) {
        throw new Error("Invalid logical table id passed to " + verb + ".");
    }
}
/**
 * Prior to 2021.2 (internal-contract v1.29 and below), getSummaryDataAsync did not support maxRows,
 * and any get...DataAsync did not support columnsToIncludeById.
 * Trim result to maxRows if it is included in the parameters for getSummaryDataAsync
 * Trim columns to columnsToInclude if included in the parameters for any get...DataAsync
 */
function UpgradeDataTableRowsAndColumns(executeResponse, verb, parameters) {
    if (isGetSummaryDataVerb(verb) && parameters[JsApiInternalContract_1.ParameterId.MaxRows]) {
        executeResponse = adjustDataRowLength(executeResponse, parameters[JsApiInternalContract_1.ParameterId.MaxRows]);
    }
    if (isGetTableDataVerb(verb) && parameters[JsApiInternalContract_1.ParameterId.ColumnsToIncludeById]) {
        executeResponse = adjustDataColumns(executeResponse, parameters[JsApiInternalContract_1.ParameterId.ColumnsToIncludeById]);
    }
    return executeResponse;
}
exports.UpgradeDataTableRowsAndColumns = UpgradeDataTableRowsAndColumns;
function isGetSummaryDataVerb(verb) {
    return verb === JsApiInternalContract_1.VerbId.GetDataSummaryData;
}
function isGetTableDataVerb(verb) {
    return (verb === JsApiInternalContract_1.VerbId.GetDataSummaryData ||
        verb === JsApiInternalContract_1.VerbId.GetUnderlyingTableData ||
        verb === JsApiInternalContract_1.VerbId.GetLogicalTableData ||
        verb === JsApiInternalContract_1.VerbId.GetDataSourceData ||
        verb === JsApiInternalContract_1.VerbId.GetUnderlyingData);
}
function adjustDataRowLength(executeResponse, maxRows) {
    var underlyingDataTable = executeResponse.result;
    if (!underlyingDataTable.data || !Array.isArray(underlyingDataTable.data.dataTable)) {
        return executeResponse;
    }
    if (maxRows > 0 && maxRows < underlyingDataTable.data.dataTable.length) {
        underlyingDataTable.data.dataTable.length = maxRows;
    }
    return executeResponse;
}
function adjustDataColumns(executeResponse, columnsToInclude) {
    if (columnsToInclude.length === 0) {
        return executeResponse;
    }
    // verify that we have a valid UnderlyingDataTable
    var underlyingDataTable = executeResponse.result;
    if (!underlyingDataTable.data || !Array.isArray(underlyingDataTable.data.dataTable) || !Array.isArray(underlyingDataTable.data.headers)) {
        return executeResponse;
    }
    // 1. filter the headers to only columnsToInclude
    // 2. use the new headers to filter all rows
    // 3. update the indices in our new headers
    var newHeaders = underlyingDataTable.data.headers.filter(function (header, index) {
        return columnsToInclude.find(function (name) { return name === header.fieldName; });
    });
    underlyingDataTable.data.dataTable.forEach(function (row, index) {
        underlyingDataTable.data.dataTable[index] = row.filter(function (value, valueIndex) { return newHeaders.findIndex(function (header) { return header.index === valueIndex; }) !== -1; });
    });
    var newIndex = 0;
    underlyingDataTable.data.headers = newHeaders.map(function (header) {
        header.index = newIndex++;
        return header;
    });
    return executeResponse;
}


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared.js":
/*!*********************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

// Export everything which had been previously in the api-shared module
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ApiVersion_1 = __webpack_require__(/*! ./ApiShared/ApiVersion */ "../api-shared-js/lib/src/ApiShared/ApiVersion.js");
exports.ApiVersion = ApiVersion_1.ApiVersion;
__export(__webpack_require__(/*! ./ApiShared/CrossFrame/CrossFrameBootstrap */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js"));
var CrossFrameDispatcher_1 = __webpack_require__(/*! ./ApiShared/CrossFrame/CrossFrameDispatcher */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js");
exports.CrossFrameDispatcher = CrossFrameDispatcher_1.CrossFrameDispatcher;
var DataSource_1 = __webpack_require__(/*! ./ApiShared/DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
exports.DataSource = DataSource_1.DataSource;
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ./ApiShared/EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
exports.ExternalToInternalEnumMappings = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings;
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ./ApiShared/EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings;
var EventListenerManager_1 = __webpack_require__(/*! ./ApiShared/EventListenerManager */ "../api-shared-js/lib/src/ApiShared/EventListenerManager.js");
exports.EventListenerManager = EventListenerManager_1.EventListenerManager;
var Field_1 = __webpack_require__(/*! ./ApiShared/Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
exports.Field = Field_1.Field;
var CustomViewImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/CustomViewImpl */ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js");
exports.CustomViewImpl = CustomViewImpl_1.CustomViewImpl;
var DashboardImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DashboardImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js");
exports.DashboardImpl = DashboardImpl_1.DashboardImpl;
var DashboardObjectImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DashboardObjectImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js");
exports.DashboardObjectImpl = DashboardObjectImpl_1.DashboardObjectImpl;
var DataSourceImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
exports.DataSourceImpl = DataSourceImpl_1.DataSourceImpl;
var ParameterImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/ParameterImpl */ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js");
exports.ParameterImpl = ParameterImpl_1.ParameterImpl;
var SheetImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
exports.SheetImpl = SheetImpl_1.SheetImpl;
var SheetInfoImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
exports.SheetInfoImpl = SheetInfoImpl_1.SheetInfoImpl;
var SingleEventManagerImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SingleEventManagerImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js");
exports.SingleEventManagerImpl = SingleEventManagerImpl_1.SingleEventManagerImpl;
var StoryImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js");
exports.StoryImpl = StoryImpl_1.StoryImpl;
var StoryPointImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryPointImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js");
exports.StoryPointImpl = StoryPointImpl_1.StoryPointImpl;
var StoryPointInfoImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryPointInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js");
exports.StoryPointInfoImpl = StoryPointInfoImpl_1.StoryPointInfoImpl;
var WorkbookImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/WorkbookImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js");
exports.WorkbookImpl = WorkbookImpl_1.WorkbookImpl;
var WorksheetImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
exports.WorksheetImpl = WorksheetImpl_1.WorksheetImpl;
var Point_1 = __webpack_require__(/*! ./ApiShared/Point */ "../api-shared-js/lib/src/ApiShared/Point.js");
exports.Point = Point_1.Point;
__export(__webpack_require__(/*! ./ApiShared/Services/RegisterAllSharedServices */ "../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js"));
__export(__webpack_require__(/*! ./ApiShared/Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js"));
var ClientInfoServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/ClientInfoServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js");
exports.ClientInfoServiceImpl = ClientInfoServiceImpl_1.ClientInfoServiceImpl;
var NotificationServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/NotificationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js");
exports.NotificationServiceImpl = NotificationServiceImpl_1.NotificationServiceImpl;
var NotificationServiceImplBase_1 = __webpack_require__(/*! ./ApiShared/Services/impl/NotificationServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js");
exports.NotificationServiceImplBase = NotificationServiceImplBase_1.NotificationServiceImplBase;
exports.Registration = NotificationServiceImplBase_1.Registration;
var ServiceImplBase_1 = __webpack_require__(/*! ./ApiShared/Services/impl/ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
exports.ServiceImplBase = ServiceImplBase_1.ServiceImplBase;
var SizeServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/SizeServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js");
exports.SizeServiceImpl = SizeServiceImpl_1.SizeServiceImpl;
var StoryActivationServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/StoryActivationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js");
exports.StoryActivationServiceImpl = StoryActivationServiceImpl_1.StoryActivationServiceImpl;
var TableauError_1 = __webpack_require__(/*! ./ApiShared/TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
exports.TableauError = TableauError_1.TableauError;
var Deferred_1 = __webpack_require__(/*! ./ApiShared/Utils/Deferred */ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js");
exports.Deferred = Deferred_1.Deferred;
var ErrorHelpers_1 = __webpack_require__(/*! ./ApiShared/Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
exports.ErrorHelpers = ErrorHelpers_1.ErrorHelpers;
var ExportHelpers_1 = __webpack_require__(/*! ./ApiShared/Utils/ExportHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js");
exports.ExportHelpers = ExportHelpers_1.ExportHelpers;
var SheetUtils_1 = __webpack_require__(/*! ./ApiShared/Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
exports.SheetUtils = SheetUtils_1.SheetUtils;
var VersionNumber_1 = __webpack_require__(/*! ./ApiShared/VersionNumber */ "../api-shared-js/lib/src/ApiShared/VersionNumber.js");
exports.VersionNumber = VersionNumber_1.VersionNumber;
var VersionedExternalApiDispatcher_1 = __webpack_require__(/*! ./VersionedExternalApiDispatcher */ "../api-shared-js/lib/src/VersionedExternalApiDispatcher.js");
exports.VersionedExternalApiDispatcher = VersionedExternalApiDispatcher_1.VersionedExternalApiDispatcher;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/ApiVersion.js":
/*!********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/ApiVersion.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var VersionNumber_1 = __webpack_require__(/*! ./VersionNumber */ "../api-shared-js/lib/src/ApiShared/VersionNumber.js");
/**
 * This is the singleton wrapper of VersionNumber
 */
var ApiVersion = /** @class */ (function () {
    function ApiVersion() {
    }
    Object.defineProperty(ApiVersion, "Instance", {
        /**
         * Gets the singleton instance of the version number.
         */
        get: function () {
            return ApiVersion._instance;
        },
        enumerable: true,
        configurable: true
    });
    ApiVersion.SetVersionNumber = function (numString, isAlpha) {
        ApiVersion._instance = new VersionNumber_1.VersionNumber(numString, isAlpha);
    };
    return ApiVersion;
}());
exports.ApiVersion = ApiVersion;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/ConnectionSummary.js":
/*!***************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/ConnectionSummary.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a connection summary.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var ConnectionSummary = /** @class */ (function () {
    function ConnectionSummary(_connectionInfo) {
        this._connectionInfo = _connectionInfo;
    }
    Object.defineProperty(ConnectionSummary.prototype, "name", {
        get: function () {
            return this._connectionInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "id", {
        get: function () {
            return this._connectionInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "serverURI", {
        get: function () {
            return this._connectionInfo.serverURI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "type", {
        get: function () {
            return this._connectionInfo.type;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionSummary;
}());
exports.ConnectionSummary = ConnectionSummary;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js":
/*!****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CrossFrameDispatcher_1 = __webpack_require__(/*! ./CrossFrameDispatcher */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js");
// Checks to see if we are running in an iframe currently: https://stackoverflow.com/a/326076/8821153
function inIframe(thisWindow) {
    try {
        return thisWindow.self !== thisWindow.parent;
    }
    catch (e) {
        return true;
    }
}
/**
 * Attempts to bootstrap the extension with a cross-frame parent where Tableau is running
 *
 * @param thisWindow The window which we are running in (injected for unit testing purposes)
 * @param internalContractVersion The version number of the internal contract we are using
 * @returns A promise which is doing the actual bootstrapping
 */
function doCrossFrameBootstrap(thisWindow, internalContractVersion, options) {
    return new Promise(function (resolve, reject) {
        var parent;
        // Normally, we are running inside an iframe.  The exception to this is
        // when we are running as an extension inside a dialog as part of the UINamespace
        // functionality.  In that case, we want the opener of this window rather than the parent.
        if (!inIframe(thisWindow)) {
            parent = thisWindow.opener;
        }
        else {
            parent = thisWindow.parent;
        }
        if (!parent) {
            reject('This extension is not running inside an iframe, desktop, or popup window. Initialization failed.');
        }
        // Create the messenger which will do he communication between this window and our parent
        // Since we don't know where we are running yet, we have to make this initial origin '*'. Once
        // we have successfully initialized our extension, we will limit where we send messages
        var messenger = new api_internal_contract_js_1.CrossFrameMessenger(thisWindow, parent, '*');
        // Prepare to send an initialization message to the parent frame
        var initializationMessage = messenger.prepareInitializationMessage(internalContractVersion, api_internal_contract_js_1.MESSAGING_VERSION, options);
        // When we receive a response back from the parent, we check to make sure the guids match and then we know
        // that the parent is aware of us and we can start communicating
        messenger.setCommandResponseMessageHandler(function (msg) {
            // Verify we are getting a response from our initialize message
            if (msg.commandGuid === initializationMessage.messageGuid) {
                // The versioning of the dispatcher happens on the other side of our frame, and
                // in a wrapper on this side. This one doesn't have any version knowledge.
                var dispatcherFactory = function () { return new CrossFrameDispatcher_1.CrossFrameDispatcher(messenger); };
                resolve(dispatcherFactory);
            }
        });
        // Now that our handlers are ready, start listening and send our initialization message
        messenger.startListening();
        initializationMessage.send();
    });
}
exports.doCrossFrameBootstrap = doCrossFrameBootstrap;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
/**
 * This is an implementation of the InternalApiDispatcher interface which functions by passing messages
 * across a frame boundary. This is usually between the code where our javscript library has been included
 * by a 3rd party dev and another frame where Tableau server has content.
 */
var CrossFrameDispatcher = /** @class */ (function () {
    /**
     * Creates an instance of CrossFrameDispatcher which will use the given messenger to communicate
     * @param _messenger an instantiated and listening messenger object
     */
    function CrossFrameDispatcher(_messenger) {
        this._messenger = _messenger;
        // Collection of pending promises which are waiting to be resolved. When we receive a response back from the other frame,
        // these promises can be either resolved or rejected
        this._pendingPromises = {};
        // The collection of notification handlers which have been registered with this dispatcher
        this._notificationHandlers = [];
        if (!this._messenger) {
            throw 'Missing messenger object';
        }
        // Set up our message handlers. We only care about incoming notifications and command responses
        this._messenger.setCommandResponseMessageHandler(this.onCommandResponse.bind(this));
        this._messenger.setNotificationMessageHandler(this.onNotification.bind(this));
    }
    ////// Start InternalApiDispatcher implementation
    CrossFrameDispatcher.prototype.execute = function (verb, parameters) {
        var _this = this;
        // To execute a verb, we first prepare a command message and then define a promise.
        var preparedMessage = this._messenger.prepareCommandMessage(verb, parameters);
        var promise = new Promise(function (resolve, reject) {
            // Save off the pending promise by the messageGuid we are about to send. When a response is
            // received, we'll be able to resolve this promise with the result
            _this._pendingPromises[preparedMessage.messageGuid] = { resolve: resolve, reject: reject };
        });
        // Actually send the message and return the promise
        preparedMessage.send();
        return promise;
    };
    CrossFrameDispatcher.prototype.registerNotificationHandler = function (handler) {
        this._notificationHandlers.push(handler);
    };
    CrossFrameDispatcher.prototype.unregisterNotificationHandler = function (handler) {
        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
    };
    ////// End InternalApiDispatcher implementation
    CrossFrameDispatcher.prototype.onCommandResponse = function (response) {
        // We got a command response, look through the pending promises and resolve
        if (Object.keys(this._pendingPromises).indexOf(response.commandGuid) < 0) {
            return; // We don't have any reference to this command, just return
        }
        var pendingPromise = this._pendingPromises[response.commandGuid];
        // If we have an error defined, reject the promise
        if (response.error) {
            pendingPromise.reject(response.error);
        }
        // If we have data defined, resolve the promise
        if (response.data) {
            pendingPromise.resolve({ result: response.data });
        }
        // Clean up our pending promises object
        delete this._pendingPromises[response.commandGuid];
    };
    CrossFrameDispatcher.prototype.onNotification = function (notificationMessage) {
        // Go through each notification handler we have registered and let them know a notification came in
        for (var _i = 0, _a = this._notificationHandlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            try {
                handler({ notificationId: notificationMessage.notificationId, data: notificationMessage.data });
            }
            catch (e) {
                // Incase of a IncompatibleVersionError, re-throw the error.
                if (e.errorCode === api_external_contract_js_1.EmbeddingErrorCodes.IncompatibleVersionError) {
                    throw e;
                }
                // Else Ignore  so if one handler errors, the other still get the message.
            }
        }
    };
    return CrossFrameDispatcher;
}());
exports.CrossFrameDispatcher = CrossFrameDispatcher;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/DataSource.js":
/*!********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/DataSource.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataSource = /** @class */ (function () {
    function DataSource(_dataSourceImpl) {
        this._dataSourceImpl = _dataSourceImpl;
    }
    Object.defineProperty(DataSource.prototype, "name", {
        get: function () {
            return this._dataSourceImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "id", {
        get: function () {
            return this._dataSourceImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "fields", {
        get: function () {
            return this._dataSourceImpl.fields;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "extractUpdateTime", {
        get: function () {
            return this._dataSourceImpl.extractUpdateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "isExtract", {
        get: function () {
            return this._dataSourceImpl.isExtract;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "isPublished", {
        get: function () {
            return this._dataSourceImpl.isPublished;
        },
        enumerable: true,
        configurable: true
    });
    DataSource.prototype.publishedUrl = function () {
        return this._dataSourceImpl.publishedUrl();
    };
    DataSource.prototype.refreshAsync = function () {
        return this._dataSourceImpl.refreshAsync();
    };
    DataSource.prototype.getActiveTablesAsync = function () {
        console.warn('DataSource.getActiveTablesAsync is deprecated. Please use DataSource.getLogicalTablesAsync.');
        return this._dataSourceImpl.getActiveTablesAsync();
    };
    DataSource.prototype.getConnectionSummariesAsync = function () {
        return this._dataSourceImpl.getConnectionSummariesAsync();
    };
    DataSource.prototype.getUnderlyingDataAsync = function (options) {
        console.warn('DataSource.getUnderlyingDataAsync is deprecated. Please use ' +
            'DataSource.getLogicalTablesAsync and DataSource.getLogicalTableDataAsync.');
        return this._dataSourceImpl.getUnderlyingDataAsync(options);
    };
    DataSource.prototype.getLogicalTablesAsync = function () {
        return this._dataSourceImpl.getLogicalTablesAsync();
    };
    DataSource.prototype.getLogicalTableDataAsync = function (logicalTableId, options) {
        return this._dataSourceImpl.getLogicalTableDataAsync(logicalTableId, options);
    };
    DataSource.prototype.getLogicalTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        return this._dataSourceImpl.getLogicalTableDataReaderAsync(logicalTableId, pageRowCount, options);
    };
    return DataSource;
}());
exports.DataSource = DataSource;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js":
/*!*****************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var EnumConverter_1 = __webpack_require__(/*! ../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
/**
 * Maps enums used by the external-api-contract to the enums used
 * in the internal-api-contract, which developers code against.
 */
var ExternalToInternalEnumMappings = /** @class */ (function () {
    function ExternalToInternalEnumMappings() {
    }
    ExternalToInternalEnumMappings.filterDomainType = new EnumConverter_1.EnumConverter((_a = {},
        _a[api_external_contract_js_1.FilterDomainType.Relevant] = api_internal_contract_js_1.FilterDomainType.Relevant,
        _a[api_external_contract_js_1.FilterDomainType.Database] = api_internal_contract_js_1.FilterDomainType.Database,
        _a));
    ExternalToInternalEnumMappings.nullOptions = new EnumConverter_1.EnumConverter((_b = {},
        _b[api_external_contract_js_1.FilterNullOption.AllValues] = api_internal_contract_js_1.FilterNullOption.AllValues,
        _b[api_external_contract_js_1.FilterNullOption.NonNullValues] = api_internal_contract_js_1.FilterNullOption.NonNullValues,
        _b[api_external_contract_js_1.FilterNullOption.NullValues] = api_internal_contract_js_1.FilterNullOption.NullValues,
        _b));
    ExternalToInternalEnumMappings.filterUpdateType = new EnumConverter_1.EnumConverter((_c = {},
        _c[api_external_contract_js_1.FilterUpdateType.Add] = api_internal_contract_js_1.FilterUpdateType.Add,
        _c[api_external_contract_js_1.FilterUpdateType.All] = api_internal_contract_js_1.FilterUpdateType.All,
        _c[api_external_contract_js_1.FilterUpdateType.Remove] = api_internal_contract_js_1.FilterUpdateType.Remove,
        _c[api_external_contract_js_1.FilterUpdateType.Replace] = api_internal_contract_js_1.FilterUpdateType.Replace,
        _c));
    ExternalToInternalEnumMappings.setVisibilityType = new EnumConverter_1.EnumConverter((_d = {},
        _d[api_external_contract_js_1.ZoneVisibilityType.Show] = true,
        _d[api_external_contract_js_1.ZoneVisibilityType.Hide] = false,
        _d));
    ExternalToInternalEnumMappings.setReplaySpeedType = new EnumConverter_1.EnumConverter((_e = {},
        // these numbers are duration multipliers
        // 2.0, for example, doubles the duration of the replay, slowing it down to 0.5x speed
        _e[api_external_contract_js_1.ReplaySpeedType.Slow] = 2.0,
        _e[api_external_contract_js_1.ReplaySpeedType.Normal] = 1.0,
        _e[api_external_contract_js_1.ReplaySpeedType.Fast] = 0.5,
        _e));
    ExternalToInternalEnumMappings.sheetType = new EnumConverter_1.EnumConverter((_f = {},
        _f[api_external_contract_js_1.SheetType.Dashboard] = api_internal_contract_js_1.SheetType.Dashboard,
        _f[api_external_contract_js_1.SheetType.Worksheet] = api_internal_contract_js_1.SheetType.Worksheet,
        _f[api_external_contract_js_1.SheetType.Story] = api_internal_contract_js_1.SheetType.Story,
        _f));
    ExternalToInternalEnumMappings.showDataTableFormatType = new EnumConverter_1.EnumConverter((_g = {},
        _g[api_external_contract_js_1.IncludeDataValuesOption.AllValues] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeAndFormattedValues,
        _g[api_external_contract_js_1.IncludeDataValuesOption.OnlyNativeValues] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeValuesOnly,
        _g[api_external_contract_js_1.IncludeDataValuesOption.OnlyFormattedValues] = api_internal_contract_js_1.ApiShowDataTableFormat.FormattedValuesOnly,
        _g));
    ExternalToInternalEnumMappings.periodType = new EnumConverter_1.EnumConverter((_h = {},
        _h[api_external_contract_js_1.PeriodType.Years] = api_internal_contract_js_1.DateStepPeriod.Years,
        _h[api_external_contract_js_1.PeriodType.Quarters] = api_internal_contract_js_1.DateStepPeriod.Quarters,
        _h[api_external_contract_js_1.PeriodType.Months] = api_internal_contract_js_1.DateStepPeriod.Months,
        _h[api_external_contract_js_1.PeriodType.Weeks] = api_internal_contract_js_1.DateStepPeriod.Weeks,
        _h[api_external_contract_js_1.PeriodType.Days] = api_internal_contract_js_1.DateStepPeriod.Days,
        _h[api_external_contract_js_1.PeriodType.Hours] = api_internal_contract_js_1.DateStepPeriod.Hours,
        _h[api_external_contract_js_1.PeriodType.Minutes] = api_internal_contract_js_1.DateStepPeriod.Minutes,
        _h[api_external_contract_js_1.PeriodType.Seconds] = api_internal_contract_js_1.DateStepPeriod.Seconds,
        _h));
    ExternalToInternalEnumMappings.dateRangeType = new EnumConverter_1.EnumConverter((_j = {},
        _j[api_external_contract_js_1.DateRangeType.Last] = api_internal_contract_js_1.DateRangeType.Last,
        _j[api_external_contract_js_1.DateRangeType.LastN] = api_internal_contract_js_1.DateRangeType.LastN,
        _j[api_external_contract_js_1.DateRangeType.Next] = api_internal_contract_js_1.DateRangeType.Next,
        _j[api_external_contract_js_1.DateRangeType.NextN] = api_internal_contract_js_1.DateRangeType.NextN,
        _j[api_external_contract_js_1.DateRangeType.Current] = api_internal_contract_js_1.DateRangeType.Current,
        _j[api_external_contract_js_1.DateRangeType.ToDate] = api_internal_contract_js_1.DateRangeType.ToDate,
        _j));
    ExternalToInternalEnumMappings.dialogStyles = new EnumConverter_1.EnumConverter((_k = {},
        _k[api_external_contract_js_1.DialogStyle.Window] = api_internal_contract_js_1.DialogStyle.Window,
        _k[api_external_contract_js_1.DialogStyle.Modal] = api_internal_contract_js_1.DialogStyle.Modal,
        _k[api_external_contract_js_1.DialogStyle.Modeless] = api_internal_contract_js_1.DialogStyle.Modeless,
        _k));
    return ExternalToInternalEnumMappings;
}());
exports.ExternalToInternalEnumMappings = ExternalToInternalEnumMappings;
/* tslint:enable:typedef */


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js":
/*!*****************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var EnumConverter_1 = __webpack_require__(/*! ../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
/**
 * Maps enums used by the internal-api-contract to the enums used
 * in the external-api-contract, which developers code against.
 */
var InternalToExternalEnumMappings = /** @class */ (function () {
    function InternalToExternalEnumMappings() {
    }
    InternalToExternalEnumMappings.extensionContext = new EnumConverter_1.EnumConverter((_a = {},
        _a[api_internal_contract_js_1.ExtensionContext.Desktop] = api_external_contract_js_1.ExtensionContext.Desktop,
        _a[api_internal_contract_js_1.ExtensionContext.Server] = api_external_contract_js_1.ExtensionContext.Server,
        _a));
    InternalToExternalEnumMappings.extensionMode = new EnumConverter_1.EnumConverter((_b = {},
        _b[api_internal_contract_js_1.ExtensionMode.Authoring] = api_external_contract_js_1.ExtensionMode.Authoring,
        _b[api_internal_contract_js_1.ExtensionMode.Viewing] = api_external_contract_js_1.ExtensionMode.Viewing,
        _b));
    InternalToExternalEnumMappings.columnType = new EnumConverter_1.EnumConverter((_c = {},
        _c[api_internal_contract_js_1.ColumnType.Continuous] = api_external_contract_js_1.ColumnType.Continuous,
        _c[api_internal_contract_js_1.ColumnType.Discrete] = api_external_contract_js_1.ColumnType.Discrete,
        _c[api_internal_contract_js_1.ColumnType.Unknown] = api_external_contract_js_1.ColumnType.Unknown,
        _c));
    InternalToExternalEnumMappings.fieldAggregationType = new EnumConverter_1.EnumConverter((_d = {},
        _d[api_internal_contract_js_1.FieldAggregationType.Attr] = api_external_contract_js_1.FieldAggregationType.Attr,
        _d[api_internal_contract_js_1.FieldAggregationType.Avg] = api_external_contract_js_1.FieldAggregationType.Avg,
        _d[api_internal_contract_js_1.FieldAggregationType.Collect] = api_external_contract_js_1.FieldAggregationType.Collect,
        _d[api_internal_contract_js_1.FieldAggregationType.Count] = api_external_contract_js_1.FieldAggregationType.Count,
        _d[api_internal_contract_js_1.FieldAggregationType.Countd] = api_external_contract_js_1.FieldAggregationType.Countd,
        _d[api_internal_contract_js_1.FieldAggregationType.Day] = api_external_contract_js_1.FieldAggregationType.Day,
        _d[api_internal_contract_js_1.FieldAggregationType.End] = api_external_contract_js_1.FieldAggregationType.End,
        _d[api_internal_contract_js_1.FieldAggregationType.Hour] = api_external_contract_js_1.FieldAggregationType.Hour,
        _d[api_internal_contract_js_1.FieldAggregationType.InOut] = api_external_contract_js_1.FieldAggregationType.InOut,
        _d[api_internal_contract_js_1.FieldAggregationType.Kurtosis] = api_external_contract_js_1.FieldAggregationType.Kurtosis,
        _d[api_internal_contract_js_1.FieldAggregationType.Max] = api_external_contract_js_1.FieldAggregationType.Max,
        _d[api_internal_contract_js_1.FieldAggregationType.Mdy] = api_external_contract_js_1.FieldAggregationType.Mdy,
        _d[api_internal_contract_js_1.FieldAggregationType.Median] = api_external_contract_js_1.FieldAggregationType.Median,
        _d[api_internal_contract_js_1.FieldAggregationType.Min] = api_external_contract_js_1.FieldAggregationType.Min,
        _d[api_internal_contract_js_1.FieldAggregationType.Minute] = api_external_contract_js_1.FieldAggregationType.Minute,
        _d[api_internal_contract_js_1.FieldAggregationType.MonthYear] = api_external_contract_js_1.FieldAggregationType.MonthYear,
        _d[api_internal_contract_js_1.FieldAggregationType.None] = api_external_contract_js_1.FieldAggregationType.None,
        _d[api_internal_contract_js_1.FieldAggregationType.Qtr] = api_external_contract_js_1.FieldAggregationType.Qtr,
        _d[api_internal_contract_js_1.FieldAggregationType.Quart1] = api_external_contract_js_1.FieldAggregationType.Quart1,
        _d[api_internal_contract_js_1.FieldAggregationType.Quart3] = api_external_contract_js_1.FieldAggregationType.Quart3,
        _d[api_internal_contract_js_1.FieldAggregationType.Second] = api_external_contract_js_1.FieldAggregationType.Second,
        _d[api_internal_contract_js_1.FieldAggregationType.Skewness] = api_external_contract_js_1.FieldAggregationType.Skewness,
        _d[api_internal_contract_js_1.FieldAggregationType.Stdev] = api_external_contract_js_1.FieldAggregationType.Stdev,
        _d[api_internal_contract_js_1.FieldAggregationType.Stdevp] = api_external_contract_js_1.FieldAggregationType.Stdevp,
        _d[api_internal_contract_js_1.FieldAggregationType.Sum] = api_external_contract_js_1.FieldAggregationType.Sum,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncDay] = api_external_contract_js_1.FieldAggregationType.TruncDay,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncHour] = api_external_contract_js_1.FieldAggregationType.TruncHour,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncMinute] = api_external_contract_js_1.FieldAggregationType.TruncMinute,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncMonth] = api_external_contract_js_1.FieldAggregationType.TruncMonth,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncQtr] = api_external_contract_js_1.FieldAggregationType.TruncQtr,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncSecond] = api_external_contract_js_1.FieldAggregationType.TruncSecond,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncWeek] = api_external_contract_js_1.FieldAggregationType.TruncWeek,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncYear] = api_external_contract_js_1.FieldAggregationType.TruncYear,
        _d[api_internal_contract_js_1.FieldAggregationType.User] = api_external_contract_js_1.FieldAggregationType.User,
        _d[api_internal_contract_js_1.FieldAggregationType.Var] = api_external_contract_js_1.FieldAggregationType.Var,
        _d[api_internal_contract_js_1.FieldAggregationType.Varp] = api_external_contract_js_1.FieldAggregationType.Varp,
        _d[api_internal_contract_js_1.FieldAggregationType.Week] = api_external_contract_js_1.FieldAggregationType.Week,
        _d[api_internal_contract_js_1.FieldAggregationType.Weekday] = api_external_contract_js_1.FieldAggregationType.Weekday,
        _d[api_internal_contract_js_1.FieldAggregationType.Year] = api_external_contract_js_1.FieldAggregationType.Year,
        _d));
    InternalToExternalEnumMappings.fieldRoleType = new EnumConverter_1.EnumConverter((_e = {},
        _e[api_internal_contract_js_1.FieldRoleType.Dimension] = api_external_contract_js_1.FieldRoleType.Dimension,
        _e[api_internal_contract_js_1.FieldRoleType.Measure] = api_external_contract_js_1.FieldRoleType.Measure,
        _e[api_internal_contract_js_1.FieldRoleType.Unknown] = api_external_contract_js_1.FieldRoleType.Unknown,
        _e));
    InternalToExternalEnumMappings.sheetType = new EnumConverter_1.EnumConverter((_f = {},
        _f[api_internal_contract_js_1.SheetType.Dashboard] = api_external_contract_js_1.SheetType.Dashboard,
        _f[api_internal_contract_js_1.SheetType.Story] = api_external_contract_js_1.SheetType.Story,
        _f[api_internal_contract_js_1.SheetType.Worksheet] = api_external_contract_js_1.SheetType.Worksheet,
        _f));
    InternalToExternalEnumMappings.dashboardObjectType = new EnumConverter_1.EnumConverter((_g = {},
        _g[api_internal_contract_js_1.DashboardObjectType.Extension] = api_external_contract_js_1.DashboardObjectType.Extension,
        _g[api_internal_contract_js_1.DashboardObjectType.Blank] = api_external_contract_js_1.DashboardObjectType.Blank,
        _g[api_internal_contract_js_1.DashboardObjectType.Image] = api_external_contract_js_1.DashboardObjectType.Image,
        _g[api_internal_contract_js_1.DashboardObjectType.Legend] = api_external_contract_js_1.DashboardObjectType.Legend,
        _g[api_internal_contract_js_1.DashboardObjectType.PageFilter] = api_external_contract_js_1.DashboardObjectType.PageFilter,
        _g[api_internal_contract_js_1.DashboardObjectType.ParameterControl] = api_external_contract_js_1.DashboardObjectType.ParameterControl,
        _g[api_internal_contract_js_1.DashboardObjectType.QuickFilter] = api_external_contract_js_1.DashboardObjectType.QuickFilter,
        _g[api_internal_contract_js_1.DashboardObjectType.Text] = api_external_contract_js_1.DashboardObjectType.Text,
        _g[api_internal_contract_js_1.DashboardObjectType.Title] = api_external_contract_js_1.DashboardObjectType.Title,
        _g[api_internal_contract_js_1.DashboardObjectType.WebPage] = api_external_contract_js_1.DashboardObjectType.WebPage,
        _g[api_internal_contract_js_1.DashboardObjectType.Worksheet] = api_external_contract_js_1.DashboardObjectType.Worksheet,
        _g));
    InternalToExternalEnumMappings.dataType = new EnumConverter_1.EnumConverter((_h = {},
        _h[api_internal_contract_js_1.DataType.Bool] = api_external_contract_js_1.DataType.Bool,
        _h[api_internal_contract_js_1.DataType.Date] = api_external_contract_js_1.DataType.Date,
        _h[api_internal_contract_js_1.DataType.DateTime] = api_external_contract_js_1.DataType.DateTime,
        _h[api_internal_contract_js_1.DataType.Float] = api_external_contract_js_1.DataType.Float,
        _h[api_internal_contract_js_1.DataType.Int] = api_external_contract_js_1.DataType.Int,
        _h[api_internal_contract_js_1.DataType.Spatial] = api_external_contract_js_1.DataType.Spatial,
        _h[api_internal_contract_js_1.DataType.String] = api_external_contract_js_1.DataType.String,
        _h));
    InternalToExternalEnumMappings.filterUpdateType = new EnumConverter_1.EnumConverter((_j = {},
        _j[api_internal_contract_js_1.FilterUpdateType.Add] = api_external_contract_js_1.FilterUpdateType.Add,
        _j[api_internal_contract_js_1.FilterUpdateType.All] = api_external_contract_js_1.FilterUpdateType.All,
        _j[api_internal_contract_js_1.FilterUpdateType.Remove] = api_external_contract_js_1.FilterUpdateType.Remove,
        _j[api_internal_contract_js_1.FilterUpdateType.Replace] = api_external_contract_js_1.FilterUpdateType.Replace,
        _j));
    InternalToExternalEnumMappings.allowableValues = new EnumConverter_1.EnumConverter((_k = {},
        _k[api_internal_contract_js_1.DomainRestrictionType.All] = api_external_contract_js_1.ParameterValueType.All,
        _k[api_internal_contract_js_1.DomainRestrictionType.List] = api_external_contract_js_1.ParameterValueType.List,
        _k[api_internal_contract_js_1.DomainRestrictionType.Range] = api_external_contract_js_1.ParameterValueType.Range,
        _k));
    InternalToExternalEnumMappings.dateStepPeriod = new EnumConverter_1.EnumConverter((_l = {},
        _l[api_internal_contract_js_1.DateStepPeriod.Years] = api_external_contract_js_1.PeriodType.Years,
        _l[api_internal_contract_js_1.DateStepPeriod.Quarters] = api_external_contract_js_1.PeriodType.Quarters,
        _l[api_internal_contract_js_1.DateStepPeriod.Months] = api_external_contract_js_1.PeriodType.Months,
        _l[api_internal_contract_js_1.DateStepPeriod.Weeks] = api_external_contract_js_1.PeriodType.Weeks,
        _l[api_internal_contract_js_1.DateStepPeriod.Days] = api_external_contract_js_1.PeriodType.Days,
        _l[api_internal_contract_js_1.DateStepPeriod.Hours] = api_external_contract_js_1.PeriodType.Hours,
        _l[api_internal_contract_js_1.DateStepPeriod.Minutes] = api_external_contract_js_1.PeriodType.Minutes,
        _l[api_internal_contract_js_1.DateStepPeriod.Seconds] = api_external_contract_js_1.PeriodType.Seconds,
        _l));
    InternalToExternalEnumMappings.dateRangeType = new EnumConverter_1.EnumConverter((_m = {},
        _m[api_internal_contract_js_1.DateRangeType.Current] = api_external_contract_js_1.DateRangeType.Current,
        _m[api_internal_contract_js_1.DateRangeType.Last] = api_external_contract_js_1.DateRangeType.Last,
        _m[api_internal_contract_js_1.DateRangeType.LastN] = api_external_contract_js_1.DateRangeType.LastN,
        _m[api_internal_contract_js_1.DateRangeType.Next] = api_external_contract_js_1.DateRangeType.Next,
        _m[api_internal_contract_js_1.DateRangeType.NextN] = api_external_contract_js_1.DateRangeType.NextN,
        _m[api_internal_contract_js_1.DateRangeType.ToDate] = api_external_contract_js_1.DateRangeType.ToDate,
        _m));
    InternalToExternalEnumMappings.errorCode = new EnumConverter_1.EnumConverter((_o = {},
        _o[api_internal_contract_js_1.ErrorCodes.INITIALIZATION_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.INTERNAL_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.MISSING_ENUM_MAPPING] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.MISSING_PARAMETER] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.PERMISSION_DENIED] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.PRES_MODEL_PARSING_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.UNKNOWN_VERB_ID] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.VERSION_NOT_CONFIGURED] = api_external_contract_js_1.ErrorCodes.APINotInitialized,
        _o[api_internal_contract_js_1.ErrorCodes.VISIBILITY_ERROR] = api_external_contract_js_1.ErrorCodes.VisibilityError,
        _o), api_external_contract_js_1.ErrorCodes.InternalError);
    InternalToExternalEnumMappings.filterType = new EnumConverter_1.EnumConverter((_p = {},
        _p[api_internal_contract_js_1.FilterType.Categorical] = api_external_contract_js_1.FilterType.Categorical,
        _p[api_internal_contract_js_1.FilterType.Range] = api_external_contract_js_1.FilterType.Range,
        _p[api_internal_contract_js_1.FilterType.RelativeDate] = api_external_contract_js_1.FilterType.RelativeDate,
        _p[api_internal_contract_js_1.FilterType.Hierarchical] = api_external_contract_js_1.FilterType.Hierarchical,
        _p));
    InternalToExternalEnumMappings.classNameKey = new EnumConverter_1.EnumConverter((_q = {},
        _q["tableau-dashboard-title" /* DashboardTitle */] = api_external_contract_js_1.ClassNameKey.DashboardTitle,
        _q["tableau-story-title" /* StoryTitle */] = api_external_contract_js_1.ClassNameKey.StoryTitle,
        _q["tableau-tooltip" /* Tooltip */] = api_external_contract_js_1.ClassNameKey.Tooltip,
        _q["tableau-worksheet" /* Worksheet */] = api_external_contract_js_1.ClassNameKey.Worksheet,
        _q["tableau-worksheet-title" /* WorksheetTitle */] = api_external_contract_js_1.ClassNameKey.WorksheetTitle,
        // Temporary until we fix 1317266 - Platform hasn't been updated currently because near branch is closed
        _q['dashboard-title'] = api_external_contract_js_1.ClassNameKey.DashboardTitle,
        _q['story-title'] = api_external_contract_js_1.ClassNameKey.StoryTitle,
        _q['tooltip'] = api_external_contract_js_1.ClassNameKey.Tooltip,
        _q['worksheet'] = api_external_contract_js_1.ClassNameKey.Worksheet,
        _q['worksheet-title'] = api_external_contract_js_1.ClassNameKey.WorksheetTitle,
        _q));
    InternalToExternalEnumMappings.hierarchicalLevelSelectionState = new EnumConverter_1.EnumConverter((_r = {},
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.AllSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.AllSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.NoneSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.NoneSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.SomeSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.SomeSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.UnknownSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.UnknownSelected,
        _r));
    InternalToExternalEnumMappings.annotationType = new EnumConverter_1.EnumConverter((_s = {},
        _s[api_internal_contract_js_1.AnnotateEnum.Area] = api_external_contract_js_1.AnnotationType.Area,
        _s[api_internal_contract_js_1.AnnotateEnum.Mark] = api_external_contract_js_1.AnnotationType.Mark,
        _s[api_internal_contract_js_1.AnnotateEnum.Point] = api_external_contract_js_1.AnnotationType.Point,
        _s));
    InternalToExternalEnumMappings.markType = new EnumConverter_1.EnumConverter((_t = {},
        _t[api_internal_contract_js_1.MarkType.Area] = api_external_contract_js_1.MarkType.Area,
        _t[api_internal_contract_js_1.MarkType.Bar] = api_external_contract_js_1.MarkType.Bar,
        _t[api_internal_contract_js_1.MarkType.Circle] = api_external_contract_js_1.MarkType.Circle,
        _t[api_internal_contract_js_1.MarkType.GanttBar] = api_external_contract_js_1.MarkType.GanttBar,
        _t[api_internal_contract_js_1.MarkType.Heatmap] = api_external_contract_js_1.MarkType.Heatmap,
        _t[api_internal_contract_js_1.MarkType.Line] = api_external_contract_js_1.MarkType.Line,
        _t[api_internal_contract_js_1.MarkType.Map] = api_external_contract_js_1.MarkType.Map,
        _t[api_internal_contract_js_1.MarkType.Pie] = api_external_contract_js_1.MarkType.Pie,
        _t[api_internal_contract_js_1.MarkType.Polygon] = api_external_contract_js_1.MarkType.Polygon,
        _t[api_internal_contract_js_1.MarkType.Shape] = api_external_contract_js_1.MarkType.Shape,
        _t[api_internal_contract_js_1.MarkType.Square] = api_external_contract_js_1.MarkType.Square,
        _t[api_internal_contract_js_1.MarkType.Text] = api_external_contract_js_1.MarkType.Text,
        _t[api_internal_contract_js_1.MarkType.VizExtension] = api_external_contract_js_1.MarkType.VizExtension,
        _t));
    return InternalToExternalEnumMappings;
}());
exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings;
/* tslint:enable:typedef */


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EventListenerManager.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EventListenerManager.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ./TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Class designed to register and unregister handlers from a user. Only those events
 * which are added via AddNewEventType will be supported by this instance
 */
var EventListenerManager = /** @class */ (function () {
    function EventListenerManager() {
        this._eventListenerManagers = {};
    }
    EventListenerManager.prototype.addEventListener = function (eventType, handler) {
        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedEventName, "Cannot add event, unsupported event type: " + eventType);
        }
        return this._eventListenerManagers[eventType].addEventListener(handler);
    };
    EventListenerManager.prototype.removeEventListener = function (eventType, handler) {
        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedEventName, "Cannot remove event, unsupported event type: " + eventType);
        }
        return this._eventListenerManagers[eventType].removeEventListener(handler);
    };
    EventListenerManager.prototype.addNewEventType = function (eventManager) {
        this._eventListenerManagers[eventManager.eventType] = eventManager;
    };
    return EventListenerManager;
}());
exports.EventListenerManager = EventListenerManager;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Field.js":
/*!***************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Field.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Field = /** @class */ (function () {
    function Field(_fieldImpl) {
        this._fieldImpl = _fieldImpl;
    }
    Object.defineProperty(Field.prototype, "name", {
        get: function () {
            return this._fieldImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "id", {
        get: function () {
            return this._fieldImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "description", {
        get: function () {
            return this._fieldImpl.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "dataType", {
        get: function () {
            return this._fieldImpl.dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "aggregation", {
        get: function () {
            return this._fieldImpl.aggregation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "dataSource", {
        get: function () {
            return this._fieldImpl.dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "role", {
        get: function () {
            return this._fieldImpl.role;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "columnType", {
        get: function () {
            return this._fieldImpl.columnType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isCalculatedField", {
        get: function () {
            return this._fieldImpl.isCalculatedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isCombinedField", {
        get: function () {
            return this._fieldImpl.isCombinedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isGenerated", {
        get: function () {
            return this._fieldImpl.isGenerated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isGeospatial", {
        get: function () {
            return this._fieldImpl.isGeospatial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isHidden", {
        get: function () {
            return this._fieldImpl.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isPresentOnPublishedDatasource", {
        get: function () {
            return this._fieldImpl.isPresentOnPublishedDatasource;
        },
        enumerable: true,
        configurable: true
    });
    return Field;
}());
exports.Field = Field;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ApiShared_1 = __webpack_require__(/*! ../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var CustomViewImpl = /** @class */ (function () {
    function CustomViewImpl(customViewModel, _registryId) {
        this._registryId = _registryId;
        this._luid = customViewModel.luid;
        this._name = customViewModel.name;
        this._shared = customViewModel.shared;
        this._isDefault = customViewModel.isDefault;
        this._ownerName = customViewModel.owner.userFriendlyName;
        this._url = customViewModel.url;
    }
    Object.defineProperty(CustomViewImpl.prototype, "luid", {
        get: function () {
            return this._luid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "shared", {
        get: function () {
            return this._shared;
        },
        set: function (shared) {
            this._shared = shared;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "isDefault", {
        get: function () {
            return this._isDefault;
        },
        set: function (isDefault) {
            this._isDefault = isDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "ownerName", {
        get: function () {
            return this._ownerName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    CustomViewImpl.prototype.saveAsync = function () {
        var service = ApiShared_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.saveAsync(this);
    };
    return CustomViewImpl;
}());
exports.CustomViewImpl = CustomViewImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var Point_1 = __webpack_require__(/*! ../Point */ "../api-shared-js/lib/src/ApiShared/Point.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DashboardObjectImpl_1 = __webpack_require__(/*! ./DashboardObjectImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var SheetInfoImpl_1 = __webpack_require__(/*! ./SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
var WorksheetImpl_1 = __webpack_require__(/*! ./WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
var DashboardImpl = /** @class */ (function (_super) {
    __extends(DashboardImpl, _super);
    function DashboardImpl(_sheetInfo, _zones, _sheetPath, _registryId, _parentStoryPointImpl, _activeDashboardObjectId) {
        if (_activeDashboardObjectId === void 0) { _activeDashboardObjectId = 0; }
        var _this = _super.call(this, _sheetInfo, _registryId) || this;
        _this._zones = _zones;
        _this._sheetPath = _sheetPath;
        _this._parentStoryPointImpl = _parentStoryPointImpl;
        _this._activeDashboardObjectId = _activeDashboardObjectId;
        return _this;
    }
    Object.defineProperty(DashboardImpl.prototype, "worksheetsImpl", {
        get: function () {
            return this._worksheetsImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "objects", {
        get: function () {
            return this._objects;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "parentStoryPoint", {
        get: function () {
            return this._parentStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "activeDashboardObjectId", {
        get: function () {
            return this._activeDashboardObjectId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "activeDashboardName", {
        get: function () {
            return this._sheetPath.sheetName;
        },
        enumerable: true,
        configurable: true
    });
    DashboardImpl.prototype.initializeWithPublicInterfaces = function () {
        this._worksheetsImpl = new Array();
        this._objects = new Array();
        this.zoneMap = new Map();
        // Process all the zones which are contained in this dashboard
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            var worksheetImpl = undefined;
            var zoneSize = { width: zone.width, height: zone.height };
            // As the dashboard is active, all other zones in the dashboard are inactive.
            var isActive = false;
            if (zone.zoneType === api_internal_contract_js_1.DashboardObjectType.Worksheet || zone.zoneType === api_internal_contract_js_1.DashboardObjectType.QuickFilter) {
                var worksheetName = '';
                var worksheetUrl = '';
                var isHidden = false;
                if (zone.sheetInfo) {
                    // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
                    worksheetName = zone.sheetInfo.name;
                    // worksheetUrl & isHidden is for Embedding only
                    worksheetUrl = zone.sheetInfo.url || '';
                    // If there's a url, then it's not hidden
                    isHidden = worksheetUrl === '';
                }
                else {
                    worksheetName = zone.name;
                }
                // Indexes, isActive and some more properties in sheetInfoImpl are embedding specific.
                // But we init them for both extensions and embedding as the Models will only use what is relevant.
                var sheetInfoImpl = new SheetInfoImpl_1.SheetInfoImpl(worksheetName, api_external_contract_js_1.SheetType.Worksheet, zoneSize, this._worksheetsImpl.length, isActive, isHidden, worksheetUrl);
                var vizId = {
                    worksheet: worksheetName,
                    dashboard: this._sheetInfoImpl.name,
                    storyboard: this._sheetPath.storyboard,
                    flipboardZoneID: this._sheetPath.flipboardZoneID,
                    storyPointID: this._sheetPath.storyPointID,
                };
                worksheetImpl = new WorksheetImpl_1.WorksheetImpl(sheetInfoImpl, this._registryId, vizId, this, this._parentStoryPointImpl);
                if (zone.zoneType === api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                    this._worksheetsImpl.push(worksheetImpl);
                }
            }
            var zonePoint = new Point_1.Point(zone.x, zone.y);
            var dashboardObjectImpl = new DashboardObjectImpl_1.DashboardObjectImpl(this, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dashboardObjectType.convert(zone.zoneType), zonePoint, zoneSize, worksheetImpl, zone.name, zone.isFloating !== undefined ? zone.isFloating : false, // before 1.6.0 we didn't have isFloating, so we assume false
            zone.isVisible !== undefined ? zone.isVisible : true, // before 1.6.0 we didn't have isVisible, so we assume true
            zone.zoneId, zone.fieldId);
            this._objects.push(dashboardObjectImpl);
            this.zoneMap.set(zone.zoneId, dashboardObjectImpl);
        }
    };
    DashboardImpl.prototype.setDashboardObjectVisibilityAsync = function (dashboardObjectVisibilityMap) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.setVisibilityAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectVisibilityMap);
    };
    DashboardImpl.prototype.getDashboardObjectById = function (dashboardObjectId) {
        return this.zoneMap.get(dashboardObjectId);
    };
    DashboardImpl.prototype.updateZones = function (newZones, newActiveZoneId, newActiveDashboardName) {
        var _this = this;
        if (newActiveZoneId === void 0) { newActiveZoneId = 0; }
        if (newActiveDashboardName === void 0) { newActiveDashboardName = ''; }
        // getting previous dashboard objects, active zone ID and active dashboard name
        var oldDashboardObjects = this._objects;
        var oldZoneMap = this.zoneMap;
        var oldActiveZoneId = this._activeDashboardObjectId;
        var oldActiveDashboardName = this._sheetPath.sheetName;
        // updating zones and reinitializing instance variables
        this._zones = newZones;
        this._activeDashboardObjectId = newActiveZoneId;
        this._sheetPath.sheetName = newActiveDashboardName;
        this._sheetInfoImpl.name = newActiveDashboardName;
        this.initializeWithPublicInterfaces();
        // getting new dashboard objects
        var newDashboardObjects = this._objects;
        var newZoneMap = this.zoneMap;
        // initializing map for changes
        var zoneChanges = new Map();
        // comparing old dashboard objects with new ones
        oldDashboardObjects.forEach(function (oldObject) {
            var oldId = oldObject.id;
            // checking if zone was removed
            if (!newZoneMap.has(oldId)) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Removed);
                return;
            }
            var newObject = newZoneMap.get(oldId);
            if (oldObject.isFloating !== newObject.isFloating) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsFloatingChanged);
            }
            if (oldObject.isVisible !== newObject.isVisible) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsVisibleChanged);
            }
            if (oldObject.name !== newObject.name) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.NameChanged);
            }
            if (oldObject.position.x !== newObject.position.x || oldObject.position.y !== newObject.position.y) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.PositionChanged);
            }
            if (oldObject.size.width !== newObject.size.width || oldObject.size.height !== newObject.size.height) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.SizeChanged);
            }
        });
        // Checking for any added zones
        newDashboardObjects.forEach(function (newObject) {
            if (!oldZoneMap.has(newObject.id)) {
                _this.addChange(newObject.id, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Added);
            }
        });
        // Checking if zone selection has changed
        if (oldActiveZoneId !== newActiveZoneId) {
            if (newActiveZoneId !== 0) {
                this.addChange(newActiveZoneId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Selected);
            }
            if (oldActiveZoneId !== 0) {
                this.addChange(oldActiveZoneId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Deselected);
            }
        }
        // Checking if switched to another dashboard
        if (oldActiveDashboardName !== newActiveDashboardName) {
            this.addChange(0, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.DashboardChanged);
        }
        return zoneChanges;
    };
    DashboardImpl.prototype.addChange = function (zoneId, zoneChanges, change) {
        if (!zoneChanges.has(zoneId)) {
            zoneChanges.set(zoneId, []);
        }
        zoneChanges.get(zoneId).push(change);
    };
    DashboardImpl.prototype.moveAndResizeDashboardObjectsAsync = function (dashboardObjectPositionAndSizeUpdateArray) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.moveAndResizeAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectPositionAndSizeUpdateArray);
    };
    DashboardImpl.prototype.replayAnimationAsync = function (replaySpeed) {
        var animationService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("animation-service" /* Animation */);
        return animationService.replayAsync(replaySpeed);
    };
    DashboardImpl.prototype.getFiltersAsync = function () {
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getDashboardFiltersAsync();
    };
    DashboardImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'FilterUpdateType');
        ErrorHelpers_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        if (!Array.isArray(values)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyDashboardFilterAsync must be an array');
        }
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyDashboardFilterAsync(fieldName, values, updateType, options);
    };
    // @W-12986439: remove once initializeWithPublicInterfaces is moved to the constructor for this class
    // This method only exists since worksheetsImpl can be undefined, but we need the worksheet names in the Export APIs
    DashboardImpl.prototype.getWorksheetNamesFromZones = function () {
        var worksheetNames = [];
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            if (zone.zoneType !== api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                continue;
            }
            // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
            var worksheetName = zone.sheetInfo ? zone.sheetInfo.name : zone.name;
            worksheetNames.push(worksheetName);
        }
        return worksheetNames;
    };
    DashboardImpl.prototype.verifyActiveSheetOrEmbeddedInActiveStoryPoint = function () {
        var isRootAndActiveDashboard = this.active;
        var isWithinActiveStoryPoint = this.parentStoryPoint != null && this.parentStoryPoint.active;
        if (!isRootAndActiveDashboard && !isWithinActiveStoryPoint) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');
        }
    };
    return DashboardImpl;
}(SheetImpl_1.SheetImpl));
exports.DashboardImpl = DashboardImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the dashboard objects - the zones in a dashboard.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var DashboardObjectImpl = /** @class */ (function () {
    function DashboardObjectImpl(_dashboardImpl, _type, _position, _size, _worksheetImpl, _name, _isFloating, _isVisible, _id, _fieldId) {
        this._dashboardImpl = _dashboardImpl;
        this._type = _type;
        this._position = _position;
        this._size = _size;
        this._worksheetImpl = _worksheetImpl;
        this._name = _name;
        this._isFloating = _isFloating;
        this._isVisible = _isVisible;
        this._id = _id;
        this._fieldId = _fieldId;
    }
    Object.defineProperty(DashboardObjectImpl.prototype, "dashboardImpl", {
        get: function () {
            return this._dashboardImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "position", {
        get: function () {
            return this._position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "worksheetImpl", {
        get: function () {
            return this._worksheetImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "isFloating", {
        get: function () {
            return this._isFloating;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "isVisible", {
        get: function () {
            return this._isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    return DashboardObjectImpl;
}());
exports.DashboardObjectImpl = DashboardObjectImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ConnectionSummary_1 = __webpack_require__(/*! ../ConnectionSummary */ "../api-shared-js/lib/src/ApiShared/ConnectionSummary.js");
var Field_1 = __webpack_require__(/*! ../Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
var LogicalTable_1 = __webpack_require__(/*! ../LogicalTable */ "../api-shared-js/lib/src/ApiShared/LogicalTable.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableSummary_1 = __webpack_require__(/*! ../TableSummary */ "../api-shared-js/lib/src/ApiShared/TableSummary.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var FieldImpl_1 = __webpack_require__(/*! ./FieldImpl */ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js");
var DataSourceImpl = /** @class */ (function () {
    function DataSourceImpl(_dataSourceInfo, _registryId) {
        var _this = this;
        this._dataSourceInfo = _dataSourceInfo;
        this._registryId = _registryId;
        this._fields = _dataSourceInfo.fields.map(function (fieldModel) {
            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, _this);
            return new Field_1.Field(fieldImpl);
        });
    }
    Object.defineProperty(DataSourceImpl.prototype, "name", {
        get: function () {
            return this._dataSourceInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "id", {
        get: function () {
            return this._dataSourceInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "extractUpdateTime", {
        get: function () {
            return this._dataSourceInfo.extractUpdateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "isExtract", {
        get: function () {
            return this._dataSourceInfo.isExtract;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "isPublished", {
        get: function () {
            return this._dataSourceInfo.isPublished;
        },
        enumerable: true,
        configurable: true
    });
    DataSourceImpl.prototype.publishedUrl = function () {
        return this._dataSourceInfo.publishedUrl;
    };
    DataSourceImpl.prototype.getMaxPageRowLimit = function () {
        return 10000;
    };
    DataSourceImpl.prototype.refreshAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.refreshAsync(this._dataSourceInfo.id);
    };
    DataSourceImpl.prototype.getConnectionSummariesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getConnectionSummariesAsync(this._dataSourceInfo.id).then(function (summaries) {
            return summaries.map(function (summary) { return new ConnectionSummary_1.ConnectionSummary(summary); });
        });
    };
    DataSourceImpl.prototype.getActiveTablesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getActiveTablesAsync(this._dataSourceInfo.id).then(function (tableInfos) {
            return tableInfos.map(function (tableInfo) { return new TableSummary_1.TableSummary(tableInfo); });
        });
    };
    DataSourceImpl.prototype.getUnderlyingDataAsync = function (options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getDataSourceDataAsync(this.id, !!options.ignoreAliases, options.maxRows || 0, // 0 and [] are defaults
        options.columnsToInclude || [], options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.getLogicalTableDataAsync = function (logicalTableId, options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getLogicalTableDataAsync(this.id, logicalTableId, !!options.ignoreAliases, options.maxRows || 0, // 0 and [] are defaults
        options.columnsToInclude || [], options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.getLogicalTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getLogicalTableDataReaderAsync(this.id, logicalTableId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.initializeWithPublicInterfaces = function (dataSource) {
        ErrorHelpers_1.ErrorHelpers.verifyInternalValue(dataSource, 'dataSource');
        this._fields = this._dataSourceInfo.fields.map(function (fieldModel) {
            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, dataSource);
            return new Field_1.Field(fieldImpl);
        });
    };
    DataSourceImpl.prototype.getLogicalTablesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getLogicalTablesAsync(this.id).then(function (logicalTableInfos) {
            return logicalTableInfos.map(function (logicalTableInfo) { return new LogicalTable_1.LogicalTable(logicalTableInfo); });
        });
    };
    return DataSourceImpl;
}());
exports.DataSourceImpl = DataSourceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var FieldImpl = /** @class */ (function () {
    function FieldImpl(_fieldInfo, _parentDataSource) {
        this._fieldInfo = _fieldInfo;
        this._parentDataSource = _parentDataSource;
    }
    Object.defineProperty(FieldImpl.prototype, "name", {
        get: function () {
            return this._fieldInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "id", {
        get: function () {
            return this._fieldInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "description", {
        get: function () {
            return this._fieldInfo.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "dataType", {
        get: function () {
            var _a;
            return _a = this._fieldInfo.dataType, (_a !== null && _a !== void 0 ? _a : Contract.DataType.Unknown);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "aggregation", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldAggregationType.convert(this._fieldInfo.aggregation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "dataSource", {
        get: function () {
            if (!this._parentDataSource)
                throw new Error("Data source information is not available for this field. Please use getFieldAsync method to get field's data source information");
            return this._parentDataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "role", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldRoleType.convert(this._fieldInfo.role);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "columnType", {
        get: function () {
            var definedValue = this._fieldInfo.columnType || InternalContract.ColumnType.Unknown;
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.columnType.convert(definedValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isCalculatedField", {
        get: function () {
            return this._fieldInfo.isCalculatedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isCombinedField", {
        get: function () {
            return this._fieldInfo.isCombinedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isGenerated", {
        get: function () {
            return this._fieldInfo.isGenerated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isGeospatial", {
        get: function () {
            return this._fieldInfo.isGeospatial;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isHidden", {
        get: function () {
            return this._fieldInfo.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isPresentOnPublishedDatasource", {
        get: function () {
            return this._fieldInfo.isPresentOnPublishedDatasource;
        },
        enumerable: true,
        configurable: true
    });
    return FieldImpl;
}());
exports.FieldImpl = FieldImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var DataValueFactory_1 = __webpack_require__(/*! ../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ParameterImpl = /** @class */ (function () {
    function ParameterImpl(parameterInfo, _registryId) {
        this._registryId = _registryId;
        this.setParameterInfo(parameterInfo);
    }
    Object.defineProperty(ParameterImpl.prototype, "name", {
        get: function () {
            return this._parameterInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "currentValue", {
        get: function () {
            return DataValueFactory_1.DataValueFactory.MakeParameterDataValue(this._parameterInfo.currentValue, this._parameterInfo.dataType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "dataType", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dataType.convert(this._parameterInfo.dataType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "id", {
        get: function () {
            return this._globalFieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "allowableValues", {
        get: function () {
            return this._allowableValues;
        },
        enumerable: true,
        configurable: true
    });
    ParameterImpl.prototype.changeValueAsync = function (newValue) {
        var _this = this;
        ErrorHelpers_1.ErrorHelpers.verifyParameter(newValue, 'newValue');
        var coercedValue = Param_1.Param.serializeParameterValue(newValue);
        var parametersService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return parametersService.changeParameterValueAsync(this._globalFieldName, coercedValue).then(function (parameterInfo) {
            _this.setParameterInfo(parameterInfo);
            return _this.currentValue;
        });
    };
    ParameterImpl.prototype.setParameterInfo = function (parameterInfo) {
        this._parameterInfo = parameterInfo;
        this._globalFieldName = parameterInfo.fieldName;
        var type = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.allowableValues.convert(parameterInfo.allowableValuesType);
        var listValues;
        var minValue;
        var maxValue;
        var stepSize;
        var dateStepPeriod;
        if (type === api_external_contract_js_1.ParameterValueType.List) {
            var values = parameterInfo.allowableValues || [];
            listValues = values.map(function (val) { return DataValueFactory_1.DataValueFactory.MakeParameterDataValue(val, parameterInfo.dataType); });
        }
        else if (type === api_external_contract_js_1.ParameterValueType.Range) {
            minValue = parameterInfo.minValue && DataValueFactory_1.DataValueFactory.MakeParameterDataValue(parameterInfo.minValue, parameterInfo.dataType);
            maxValue = parameterInfo.maxValue && DataValueFactory_1.DataValueFactory.MakeParameterDataValue(parameterInfo.maxValue, parameterInfo.dataType);
            stepSize = parameterInfo.stepSize;
            dateStepPeriod = parameterInfo.dateStepPeriod && InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(parameterInfo.dateStepPeriod);
        }
        this._allowableValues = {
            type: type,
            allowableValues: listValues,
            minValue: minValue,
            maxValue: maxValue,
            stepSize: stepSize,
            dateStepPeriod: dateStepPeriod,
        };
    };
    return ParameterImpl;
}());
exports.ParameterImpl = ParameterImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var SheetUtils_1 = __webpack_require__(/*! ../Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
var SheetImpl = /** @class */ (function () {
    function SheetImpl(_sheetInfoImpl, _registryId) {
        this._sheetInfoImpl = _sheetInfoImpl;
        this._registryId = _registryId;
    }
    Object.defineProperty(SheetImpl.prototype, "name", {
        get: function () {
            return this._sheetInfoImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetType", {
        get: function () {
            return this._sheetInfoImpl.sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetPath", {
        get: function () {
            return this._sheetInfoImpl.sheetPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "size", {
        get: function () {
            return this._sheetInfoImpl.sheetSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "hidden", {
        get: function () {
            if (this._sheetInfoImpl.isHidden !== undefined) {
                return this._sheetInfoImpl.isHidden;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "isHidden not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "active", {
        get: function () {
            if (this._sheetInfoImpl.isActive !== undefined) {
                return this._sheetInfoImpl.isActive;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "active not implemented");
        },
        set: function (active) {
            if (this._sheetInfoImpl.isActive !== undefined) {
                this._sheetInfoImpl.active = active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "index", {
        get: function () {
            if (this._sheetInfoImpl.index !== undefined) {
                return this._sheetInfoImpl.index;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "index not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "url", {
        get: function () {
            if (this._sheetInfoImpl.url !== undefined) {
                return this._sheetInfoImpl.url;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "url not implemented");
        },
        enumerable: true,
        configurable: true
    });
    SheetImpl.prototype.getSheetSize = function () {
        if (!SheetUtils_1.SheetUtils.isValidSheetSize(this.size)) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'size is not of type SheetSize');
        }
        return this.size;
    };
    SheetImpl.prototype.findParameterAsync = function (parameterName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(parameterName, 'parameterName');
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.findParameterByNameAsync(parameterName);
    };
    SheetImpl.prototype.getParametersAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.getParametersForSheetAsync(this.sheetPath);
    };
    SheetImpl.prototype.changeSizeAsync = function (newSize) {
        var _this = this;
        var invalidSizeError = new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
        if (!newSize || !newSize.behavior) {
            throw invalidSizeError;
        }
        var partialSheetSize = this.normalizeSheetSize(newSize);
        var isAutomatic = partialSheetSize.behavior === Contract.SheetSizeBehavior.Automatic;
        if (!isAutomatic && !partialSheetSize.minSize && !partialSheetSize.maxSize) {
            throw invalidSizeError;
        }
        if (!isAutomatic && this.sheetType === Contract.SheetType.Worksheet) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSizeBehaviorOnWorksheet, 'Only SheetSizeBehavior.Automatic is allowed on Worksheets');
        }
        if (isAutomatic && this.getSheetSize().behavior === partialSheetSize.behavior) {
            return Promise.resolve(newSize);
        }
        var processedNewSize = this.processNewSize(partialSheetSize);
        var sizeService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("size-service" /* Size */);
        return sizeService.changeSizeAsync(this.name, processedNewSize).then(function () {
            var clientInfoService = ServiceRegistry_1.ApiServiceRegistry.get(_this._registryId).getService("client-info-service" /* ClientInfo */);
            return clientInfoService.getClientInfoAsync().then(function (bootstrapInfo) {
                var sheet = bootstrapInfo.publishedSheets.find(function (s) { return s.name === _this.name; });
                if (!sheet) {
                    throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Can't find sheet with name " + _this.name);
                }
                var sheetSize = SheetUtils_1.SheetUtils.getSheetSizeFromSizeConstraints(sheet.sizeConstraint);
                _this._sheetInfoImpl.sheetSize = sheetSize;
                return sheetSize;
            });
        });
    };
    SheetImpl.prototype.normalizeSheetSize = function (newSize) {
        var behavior = newSize.behavior;
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(behavior, Contract.SheetSizeBehavior, 'SheetSizeBehavior');
        var minSize = SheetImpl.parseDimensions(newSize.minSize);
        var maxSize = SheetImpl.parseDimensions(newSize.maxSize);
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetImpl.prototype.processNewSize = function (newSize) {
        var _a, _b, _c, _d;
        var behavior = newSize.behavior, minSizeMaybe = newSize.minSize, maxSizeMaybe = newSize.maxSize;
        var hasMinWidth = !Param_1.Param.isNullOrUndefined((_a = minSizeMaybe) === null || _a === void 0 ? void 0 : _a.width);
        var hasMinHeight = !Param_1.Param.isNullOrUndefined((_b = minSizeMaybe) === null || _b === void 0 ? void 0 : _b.height);
        var hasMaxWidth = !Param_1.Param.isNullOrUndefined((_c = maxSizeMaybe) === null || _c === void 0 ? void 0 : _c.width);
        var hasMaxHeight = !Param_1.Param.isNullOrUndefined((_d = maxSizeMaybe) === null || _d === void 0 ? void 0 : _d.height);
        var hasValidMinSize = hasMinWidth && hasMinHeight;
        var hasValidMaxSize = hasMaxWidth && hasMaxHeight;
        switch (behavior) {
            case Contract.SheetSizeBehavior.Automatic: {
                return { behavior: behavior };
            }
            case Contract.SheetSizeBehavior.AtMost: {
                if (!maxSizeMaybe || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMaxSize, 'Missing maxSize for SheetSizeBehavior.AtMost');
                }
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (maxSize.width < 0 || maxSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.AtLeast: {
                if (!minSizeMaybe || !hasValidMinSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinSize, 'Missing minSize for SheetSizeBehavior.AtLeast');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                if (minSize.width < 0 || minSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, minSize: minSize };
            }
            case Contract.SheetSizeBehavior.Range: {
                if (!minSizeMaybe || !maxSizeMaybe || !hasValidMinSize || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinMaxSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (minSize.width < 0 ||
                    minSize.height < 0 ||
                    maxSize.width < 0 ||
                    maxSize.height < 0 ||
                    minSize.width > maxSize.width ||
                    minSize.height > maxSize.height) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                return { behavior: behavior, minSize: minSize, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.Exactly: {
                if (minSizeMaybe && maxSizeMaybe) {
                    if (hasValidMinSize && hasValidMaxSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        if (minSize.width !== maxSize.width || minSize.height !== maxSize.height) {
                            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Conflicting size values for SheetSizeBehavior.Exactly');
                        }
                        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
                    }
                    if (hasValidMinSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        return { behavior: behavior, minSize: minSize, maxSize: minSize };
                    }
                    if (hasValidMaxSize) {
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        return { behavior: behavior, minSize: maxSize, maxSize: maxSize };
                    }
                }
                throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Unsupported sheet size behavior: " + behavior);
            }
        }
    };
    SheetImpl.parseDimensions = function (size) {
        var empty = { width: undefined, height: undefined };
        if (!size) {
            return empty;
        }
        var _a = Param_1.Param.tryParseNumber(size.width), widthParsed = _a.success, parsedWidth = _a.parsed;
        var _b = Param_1.Param.tryParseNumber(size.height), heightParsed = _b.success, parsedHeight = _b.parsed;
        if (widthParsed && heightParsed) {
            return { width: parsedWidth, height: parsedHeight };
        }
        if (widthParsed) {
            return { width: parsedWidth };
        }
        if (heightParsed) {
            return { height: parsedHeight };
        }
        return empty;
    };
    return SheetImpl;
}());
exports.SheetImpl = SheetImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var SheetInfoImpl = /** @class */ (function () {
    function SheetInfoImpl(_name, _sheetType, _sheetSize, _index, _isActive, _isHidden, _url) {
        this._name = _name;
        this._sheetType = _sheetType;
        this._sheetSize = _sheetSize;
        this._index = _index;
        this._isActive = _isActive;
        this._isHidden = _isHidden;
        this._url = _url;
    }
    Object.defineProperty(SheetInfoImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (sheetName) {
            this._name = sheetName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetSize", {
        get: function () {
            return this._sheetSize;
        },
        set: function (value) {
            this._sheetSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetType", {
        get: function () {
            return this._sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetPath", {
        get: function () {
            return {
                sheetName: this.name,
                isDashboard: this.sheetType === api_external_contract_js_1.SheetType.Dashboard,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "active", {
        set: function (active) {
            this._isActive = active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "isHidden", {
        get: function () {
            return this._isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    return SheetInfoImpl;
}());
exports.SheetInfoImpl = SheetInfoImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js":
/*!*************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * This class implements the SingleEventManager interface for a single type of Tableau event
 *
 * @template TEventType The Tableau event type this class specializes
 */
var SingleEventManagerImpl = /** @class */ (function () {
    function SingleEventManagerImpl(eventType) {
        this._eventType = eventType;
        this._handlers = [];
    }
    Object.defineProperty(SingleEventManagerImpl.prototype, "eventType", {
        get: function () {
            return this._eventType;
        },
        enumerable: true,
        configurable: true
    });
    SingleEventManagerImpl.prototype.addEventListener = function (handler) {
        var _this = this;
        this._handlers.push(handler);
        return function () { return _this.removeEventListener(handler); };
    };
    SingleEventManagerImpl.prototype.removeEventListener = function (handler) {
        var beforeCount = this._handlers.length;
        this._handlers = this._handlers.filter(function (h) { return h !== handler; });
        return beforeCount > this._handlers.length;
    };
    SingleEventManagerImpl.prototype.triggerEvent = function (eventGenerator) {
        for (var _i = 0, _a = this._handlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            try {
                var eventModel = eventGenerator();
                handler(eventModel);
            }
            catch (e) {
                // Since this handler could be outside our control, just catch anything it throws and continue on
                continue;
            }
        }
    };
    return SingleEventManagerImpl;
}());
exports.SingleEventManagerImpl = SingleEventManagerImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var ShortLivedDeferred_1 = __webpack_require__(/*! ../Utils/ShortLivedDeferred */ "../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var StoryPointImpl_1 = __webpack_require__(/*! ./StoryPointImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js");
var StoryPointInfoImpl_1 = __webpack_require__(/*! ./StoryPointInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js");
var StoryImpl = /** @class */ (function (_super) {
    __extends(StoryImpl, _super);
    function StoryImpl(_sheetInfoImpl, storyModel, _publishedSheetInfos, _registryId) {
        var _this = _super.call(this, _sheetInfoImpl, _registryId) || this;
        _this._sheetInfoImpl = _sheetInfoImpl;
        _this._publishedSheetInfos = _publishedSheetInfos;
        _this._registryId = _registryId;
        _this._storyPointInfoImpls = [];
        _this._deferred = new ShortLivedDeferred_1.ShortLivedDeferred();
        _this.initializeStory(storyModel);
        return _this;
    }
    StoryImpl.prototype.initializeStory = function (storyModel) {
        var _this = this;
        storyModel.storyPoints.forEach(function (storyPointModel) {
            var isActive = storyPointModel.index === storyModel.activeStoryPointIndex;
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(storyPointModel.caption, storyPointModel.index, storyPointModel.storyPointId, isActive, storyPointModel.updated, _this);
            _this._storyPointInfoImpls.push(storyPointInfoImpl);
            if (isActive) {
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
        });
    };
    StoryImpl.prototype.updateStoryInfo = function (index, storyPointModel) {
        if (!this._storyPointInfoImpls) {
            return;
        }
        var storyInfoImpl = this._storyPointInfoImpls[index];
        if (storyInfoImpl.storyPointId !== storyPointModel.storyPointId) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.StoryPointIdMismatch, "We should not be updating a story point when the IDs don't match. Existing storyPointID=" + storyInfoImpl.storyPointId + ", newStoryPointID=" + storyPointModel.storyPointId);
        }
        storyInfoImpl.caption = storyPointModel.caption;
        storyInfoImpl.updated = storyPointModel.updated;
        if (this._activeStoryPointImpl.storyPointId === storyPointModel.storyPointId) {
            this._activeStoryPointImpl.updated = storyInfoImpl.updated;
        }
    };
    StoryImpl.prototype.updateStory = function (storyPointModel) {
        var _this = this;
        if (!this._storyPointInfoImpls) {
            return;
        }
        this._storyPointInfoImpls.forEach(function (storyPointInfoImpl) {
            var isActive = storyPointInfoImpl.storyPointId === storyPointModel.storyPointId;
            if (isActive) {
                // update the state
                storyPointInfoImpl.caption = storyPointModel.caption;
                storyPointInfoImpl.index = storyPointModel.index;
                storyPointInfoImpl.active = true;
                storyPointInfoImpl.updated = storyPointModel.updated;
                // re-initialize activeStoryPointImpl
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
            else {
                // set old ones to false
                storyPointInfoImpl.active = false;
            }
        });
        if (this.activeStoryPoint) {
            this._deferred.resolve(this.activeStoryPoint);
        }
    };
    Object.defineProperty(StoryImpl.prototype, "activeStoryPoint", {
        get: function () {
            return this._activeStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "storyPointsInfo", {
        get: function () {
            return this._storyPointInfoImpls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isActive", {
        get: function () {
            return this._sheetInfoImpl.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isHidden", {
        get: function () {
            return !!this._sheetInfoImpl.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    StoryImpl.prototype.activateNextStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === this._storyPointInfoImpls.length - 1) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateNextStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activatePreviousStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === 0) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activatePreviousStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activateStoryPointAsync = function (index) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        if (index === this._activeStoryPointImpl.index) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateStoryPointAsync(index);
        return promise;
    };
    StoryImpl.prototype.revertStoryPointAsync = function (index) {
        var _this = this;
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        return service.revertStoryPointAsync(index).then(function (response) {
            _this.updateStoryInfo(response.index, response);
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(response.caption, response.index, response.storyPointId, false, response.updated, _this);
            return storyPointInfoImpl;
        });
    };
    StoryImpl.prototype.clearPendingPromises = function () {
        if (this._deferred) {
            this._deferred.reject('All pending promises cleared');
        }
    };
    return StoryImpl;
}(SheetImpl_1.SheetImpl));
exports.StoryImpl = StoryImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var SheetUtils_1 = __webpack_require__(/*! ../Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
var DashboardImpl_1 = __webpack_require__(/*! ./DashboardImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js");
var SheetInfoImpl_1 = __webpack_require__(/*! ./SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
var WorksheetImpl_1 = __webpack_require__(/*! ./WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
var StoryPointImpl = /** @class */ (function () {
    function StoryPointImpl(_storyPointInfoImpl, sheetInfos, registryId, containedSheetInfo) {
        this._storyPointInfoImpl = _storyPointInfoImpl;
        if (containedSheetInfo) {
            this._containedSheetImpl = this.createContainedSheet(containedSheetInfo, sheetInfos, registryId);
        }
    }
    Object.defineProperty(StoryPointImpl.prototype, "index", {
        get: function () {
            return this._storyPointInfoImpl.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "caption", {
        get: function () {
            return this._storyPointInfoImpl.caption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "active", {
        get: function () {
            return this._storyPointInfoImpl.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "updated", {
        get: function () {
            return this._storyPointInfoImpl.updated;
        },
        set: function (updated) {
            this._storyPointInfoImpl.updated = updated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "parentStory", {
        get: function () {
            return this._storyPointInfoImpl.parentStory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "containedSheet", {
        get: function () {
            return this._containedSheetImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "storyPointId", {
        get: function () {
            return this._storyPointInfoImpl.storyPointId;
        },
        enumerable: true,
        configurable: true
    });
    StoryPointImpl.prototype.createContainedSheet = function (containedSheetInfo, sheetInfos, registryId) {
        var containedSheetIdx = -1;
        var publishedSheetInfo = SheetUtils_1.SheetUtils.getPublishedSheetInfoByName(containedSheetInfo.name, sheetInfos);
        var containedSheetSize = SheetUtils_1.SheetUtils.createAutomaticSize();
        var isContainedSheetHidden = publishedSheetInfo === undefined;
        var containedSheetUrl = publishedSheetInfo ? publishedSheetInfo.url : '';
        // Contained sheets aren't active - the containing sheet is active.
        var containedSheetActive = false;
        var containedSheetInfoImpl = new SheetInfoImpl_1.SheetInfoImpl(containedSheetInfo.name, SheetUtils_1.SheetUtils.getSheetTypeEnum(containedSheetInfo.sheetType), containedSheetSize, containedSheetIdx, containedSheetActive, isContainedSheetHidden, containedSheetUrl);
        var sheetImpl;
        switch (containedSheetInfoImpl.sheetType) {
            case Contract.SheetType.Worksheet: {
                var vizId = {
                    worksheet: containedSheetInfoImpl.name,
                };
                sheetImpl = new WorksheetImpl_1.WorksheetImpl(containedSheetInfoImpl, registryId, vizId, null, this);
                break;
            }
            case Contract.SheetType.Dashboard: {
                var sheetPath = {
                    sheetName: containedSheetInfoImpl.name,
                    isDashboard: true,
                };
                sheetImpl = new DashboardImpl_1.DashboardImpl(containedSheetInfoImpl, containedSheetInfo.dashboardZones, sheetPath, registryId, this);
                break;
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
            }
        }
        return sheetImpl;
    };
    return StoryPointImpl;
}());
exports.StoryPointImpl = StoryPointImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js":
/*!*********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var StoryPointInfoImpl = /** @class */ (function () {
    function StoryPointInfoImpl(_caption, _index, _storyPointId, _active, _updated, _parentStoryImpl) {
        this._caption = _caption;
        this._index = _index;
        this._storyPointId = _storyPointId;
        this._active = _active;
        this._updated = _updated;
        this._parentStoryImpl = _parentStoryImpl;
    }
    Object.defineProperty(StoryPointInfoImpl.prototype, "caption", {
        get: function () {
            return this._caption;
        },
        set: function (caption) {
            this._caption = caption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (index) {
            this._index = index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "storyPointId", {
        get: function () {
            return this._storyPointId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (isActive) {
            this._active = isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "updated", {
        get: function () {
            return this._updated;
        },
        set: function (isUpdated) {
            this._updated = isUpdated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "parentStory", {
        get: function () {
            return this._parentStoryImpl;
        },
        enumerable: true,
        configurable: true
    });
    return StoryPointInfoImpl;
}());
exports.StoryPointInfoImpl = StoryPointInfoImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js":
/*!***************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var WorkbookImpl = /** @class */ (function () {
    function WorkbookImpl() {
    }
    return WorkbookImpl;
}());
exports.WorkbookImpl = WorkbookImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var DataSource_1 = __webpack_require__(/*! ../DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
var LogicalTable_1 = __webpack_require__(/*! ../LogicalTable */ "../api-shared-js/lib/src/ApiShared/LogicalTable.js");
var GetDataService_1 = __webpack_require__(/*! ../Services/GetDataService */ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DataSourceImpl_1 = __webpack_require__(/*! ./DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var WorksheetImpl = /** @class */ (function (_super) {
    __extends(WorksheetImpl, _super);
    function WorksheetImpl(sheetInfoImpl, _registryId, _visualId, _parentDashboardImpl, _parentStoryPointImpl) {
        var _this = _super.call(this, sheetInfoImpl, _registryId) || this;
        _this._visualId = _visualId;
        _this._parentDashboardImpl = _parentDashboardImpl;
        _this._parentStoryPointImpl = _parentStoryPointImpl;
        return _this;
    }
    Object.defineProperty(WorksheetImpl.prototype, "parentDashboard", {
        get: function () {
            return this._parentDashboardImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetImpl.prototype, "parentStoryPoint", {
        get: function () {
            return this._parentStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetImpl.prototype, "visualId", {
        get: function () {
            return this._visualId;
        },
        enumerable: true,
        configurable: true
    });
    WorksheetImpl.prototype.getMaxPageRowLimit = function () {
        return 10000;
    };
    WorksheetImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'Contract.FilterUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyFilterAsync(this.visualId, fieldName, values, updateType, options);
    };
    WorksheetImpl.prototype.applyRangeFilterAsync = function (fieldName, filterOptions) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(filterOptions, 'filterOptions');
        if (filterOptions.nullOption) {
            ErrorHelpers_1.ErrorHelpers.verifyEnumValue(filterOptions.nullOption, api_external_contract_js_1.FilterNullOption, 'FilterNullOption');
        }
        else {
            ErrorHelpers_1.ErrorHelpers.verifyRangeParamType(filterOptions.min, filterOptions.max);
        }
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyRangeFilterAsync(this.visualId, fieldName, filterOptions);
    };
    WorksheetImpl.prototype.applyHierarchicalFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(values, 'values');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'Contract.FilterUpdateType');
        if (!Array.isArray(values) && !values.levels) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyHierarchicalFilterAsync must be an array or contain a levels key');
        }
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyHierarchicalFilterAsync(this.visualId, fieldName, values, updateType, options);
    };
    WorksheetImpl.prototype.clearFilterAsync = function (fieldName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.clearFilterAsync(this.visualId, fieldName);
    };
    WorksheetImpl.prototype.applyRelativeDateFilterAsync = function (fieldName, options) {
        ErrorHelpers_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(options, 'options');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(options.periodType, api_external_contract_js_1.PeriodType, 'PeriodType');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(options.rangeType, api_external_contract_js_1.DateRangeType, 'DateRangeType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyRelativeDateFilterAsync(this.visualId, fieldName, options);
    };
    WorksheetImpl.prototype.getDataSourcesAsync = function () {
        var _this = this;
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getDataSourcesAsync(this.visualId).then(function (result) {
            var dataSchema = result;
            var worksheetDataSourceInfo = dataSchema.worksheetDataSchemaMap[_this.name];
            var dataSources = [];
            // First, add the primary datasource.  By convention, it comes first in the returned array.
            var primaryId = worksheetDataSourceInfo.primaryDataSource;
            dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[primaryId]));
            // Then, loop through any secondary data sources and add them.
            for (var _i = 0, _a = worksheetDataSourceInfo.referencedDataSourceList; _i < _a.length; _i++) {
                var secondaryId = _a[_i];
                if (secondaryId !== primaryId) {
                    dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[secondaryId]));
                }
            }
            return dataSources;
        });
    };
    WorksheetImpl.prototype.getFiltersAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getFiltersAsync(this.visualId);
    };
    WorksheetImpl.prototype.getSelectedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getSelectedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.getHighlightedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getHighlightedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.getSummaryDataAsync = function (options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Summary, !!options.ignoreAliases, !!options.ignoreSelection, true, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getSummaryDataReaderAsync = function (pageRowCount, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getSummaryDataReaderAsync(this.visualId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, !!options.ignoreSelection, true, // includeAllColumns (can be overridden by columnsToIncludeById)
        options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getVisualSpecificationAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("visual-model-service" /* VisualModel */);
        return service.getVisualSpecificationAsync(this.visualId);
    };
    WorksheetImpl.prototype.getSummaryColumnsInfoAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getSummaryColumnsInfoAsync(this.visualId);
    };
    WorksheetImpl.prototype.getUnderlyingDataAsync = function (options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Underlying, !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getUnderlyingTablesAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getUnderlyingTablesAsync(this.visualId).then(function (logicalTableInfos) {
            return logicalTableInfos.map(function (logicalTableInfo) { return new LogicalTable_1.LogicalTable(logicalTableInfo); });
        });
    };
    WorksheetImpl.prototype.getUnderlyingTableDataAsync = function (logicalTableId, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingTableDataAsync(this.visualId, logicalTableId, !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getUnderlyingTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingTableDataReaderAsync(this.visualId, logicalTableId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.clearSelectedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.clearSelectedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.selectMarksByValueAsync = function (selections, selectionUpdateType) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(selections, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(selectionUpdateType, api_external_contract_js_1.SelectionUpdateType, 'SelectionUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.selectMarksByValueAsync(this.visualId, selections, selectionUpdateType);
    };
    WorksheetImpl.prototype.selectMarksByIdAsync = function (selections, selectionUpdateType) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(selections, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(selectionUpdateType, api_external_contract_js_1.SelectionUpdateType, 'SelectionUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.selectMarksByIdAsync(this.visualId, selections, selectionUpdateType);
    };
    WorksheetImpl.prototype.annotateMarkAsync = function (mark, annotationText) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(mark, 'mark');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.annotateMarkAsync(this.visualId, mark, annotationText);
    };
    WorksheetImpl.prototype.getAnnotationsAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.getAnnotationsAsync(this.visualId);
    };
    WorksheetImpl.prototype.removeAnnotationAsync = function (annotation) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(annotation, 'annotation');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.removeAnnotationAsync(this.visualId, annotation);
    };
    WorksheetImpl.prototype.appendContextMenuAsync = function (targetMenu, config) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.appendContextMenuAsync(this.visualId.worksheet, targetMenu, config);
    };
    WorksheetImpl.prototype.removeContextMenuAsync = function (targetMenu, menuItemId) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.removeContextMenuAsync(this.visualId.worksheet, targetMenu, menuItemId);
    };
    WorksheetImpl.prototype.executeContextMenuAsync = function (targetMenu, menuItemId) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.executeContextMenuAsync(this.visualId.worksheet, targetMenu, menuItemId);
    };
    WorksheetImpl.prototype.renameContextMenuAsync = function (targetMenu, menuHeader, menuDescription) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.renameContextMenuAsync(this.visualId.worksheet, targetMenu, menuHeader, menuDescription);
    };
    WorksheetImpl.prototype.hoverTupleAsync = function (hoveredTuple, tooltip, allowHoverActions) {
        if (this.isInsideDashboardExtension()) {
            return Promise.reject(new TableauError_1.TableauError(Contract.SharedErrorCodes.ImplementationError, "hoverTupleAsync is not supported in dashboard extensions"));
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.hoverTupleAsync(this.visualId, hoveredTuple, tooltip, allowHoverActions);
    };
    WorksheetImpl.prototype.selectTuplesAsync = function (selectedTuples, selectOption, tooltip) {
        if (this.isInsideDashboardExtension()) {
            return Promise.reject(new TableauError_1.TableauError(Contract.SharedErrorCodes.ImplementationError, "selectTuplesAsync is not supported in dashboard extensions"));
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.selectTuplesAsync(this.visualId, selectedTuples, selectOption, tooltip);
    };
    WorksheetImpl.prototype.getTooltipTextAsync = function (tupleId) {
        if (this.isInsideDashboardExtension()) {
            return Promise.reject(new TableauError_1.TableauError(Contract.SharedErrorCodes.ImplementationError, "getTooltipTextAsync is not supported in dashboard extensions"));
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("accessibility" /* Accessibility */);
        return service.getTooltipTextAsync(this.visualId, tupleId);
    };
    WorksheetImpl.prototype.leaveMarkNavigationAsync = function () {
        if (this.isInsideDashboardExtension()) {
            return Promise.reject(new TableauError_1.TableauError(Contract.SharedErrorCodes.ImplementationError, "leaveMarkNavigationAsync is not supported in dashboard extensions"));
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("accessibility" /* Accessibility */);
        return service.leaveMarkNavigationAsync(this.visualId);
    };
    WorksheetImpl.prototype.createDataSourceFromInfo = function (dataSourceInfo) {
        var dataSourceImpl = new DataSourceImpl_1.DataSourceImpl(dataSourceInfo, this._registryId);
        var dataSource = new DataSource_1.DataSource(dataSourceImpl);
        dataSourceImpl.initializeWithPublicInterfaces(dataSource);
        return dataSource;
    };
    WorksheetImpl.prototype.verifyActiveSheet = function () {
        var isRootAndActiveWorksheet = this.active;
        var isInsideActiveDashboard = this.isInsideActiveDashboard();
        var isInsideActiveStoryPoint = this.isInsideActiveStoryPoint();
        if (!isRootAndActiveWorksheet && !isInsideActiveDashboard && !isInsideActiveStoryPoint) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');
        }
    };
    WorksheetImpl.prototype.isInsideActiveStoryPoint = function () {
        return this._parentStoryPointImpl && this._parentStoryPointImpl.active;
    };
    WorksheetImpl.prototype.isInsideActiveDashboard = function () {
        return this._parentDashboardImpl && this._parentDashboardImpl.active;
    };
    WorksheetImpl.prototype.isInsideDashboardExtension = function () {
        return this._parentDashboardImpl !== null;
    };
    return WorksheetImpl;
}(SheetImpl_1.SheetImpl));
exports.WorksheetImpl = WorksheetImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/LogicalTable.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/LogicalTable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a logical table.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var LogicalTable = /** @class */ (function () {
    function LogicalTable(_logicalTable) {
        this._logicalTable = _logicalTable;
    }
    Object.defineProperty(LogicalTable.prototype, "id", {
        get: function () {
            return this._logicalTable.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalTable.prototype, "caption", {
        get: function () {
            return this._logicalTable.caption;
        },
        enumerable: true,
        configurable: true
    });
    return LogicalTable;
}());
exports.LogicalTable = LogicalTable;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/AccessibilityModels.js":
/*!************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/AccessibilityModels.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var TooltipTextRequestModel = /** @class */ (function () {
    function TooltipTextRequestModel(visualIdPresModel, tupleId) {
        this.visualIdPresModel = visualIdPresModel;
        this.tupleId = tupleId;
    }
    return TooltipTextRequestModel;
}());
exports.TooltipTextRequestModel = TooltipTextRequestModel;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/FilterModels.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/FilterModels.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Filter = /** @class */ (function () {
    function Filter(_worksheetName, _fieldName, _filterType, _fieldId, _registryId) {
        this._worksheetName = _worksheetName;
        this._fieldName = _fieldName;
        this._filterType = _filterType;
        this._fieldId = _fieldId;
        this._registryId = _registryId;
    }
    Object.defineProperty(Filter.prototype, "worksheetName", {
        get: function () {
            return this._worksheetName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "fieldName", {
        get: function () {
            return this._fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "filterType", {
        get: function () {
            return this._filterType;
        },
        enumerable: true,
        configurable: true
    });
    Filter.prototype.getFieldAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getFieldAsync(this._fieldId);
    };
    Filter.prototype.getAppliedWorksheetsAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getAppliedWorksheetsAsync(this._worksheetName, this._fieldId);
    };
    Filter.prototype.setAppliedWorksheetsAsync = function (applyToWorksheets) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(applyToWorksheets, 'applyToWorksheets');
        var uniqueWorksheets = new Set(applyToWorksheets);
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.setAppliedWorksheetsAsync(this._worksheetName, this._fieldName, this._fieldId, Array.from(uniqueWorksheets));
    };
    return Filter;
}());
exports.Filter = Filter;
var CategoricalFilter = /** @class */ (function (_super) {
    __extends(CategoricalFilter, _super);
    function CategoricalFilter(worksheetName, fieldName, fieldId, filterType, registryId, _appliedValues, _isExcludeMode, _isAllSelected) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._appliedValues = _appliedValues;
        _this._isExcludeMode = _isExcludeMode;
        _this._isAllSelected = _isAllSelected;
        return _this;
    }
    Object.defineProperty(CategoricalFilter.prototype, "isAllSelected", {
        get: function () {
            return this._isAllSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalFilter.prototype, "appliedValues", {
        get: function () {
            return this._appliedValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalFilter.prototype, "isExcludeMode", {
        get: function () {
            return this._isExcludeMode;
        },
        enumerable: true,
        configurable: true
    });
    CategoricalFilter.prototype.getDomainAsync = function (domainType) {
        if (!domainType) {
            domainType = api_external_contract_js_1.FilterDomainType.Relevant;
        }
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(domainType, api_external_contract_js_1.FilterDomainType, 'FilterDomainType');
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getCategoricalDomainAsync(this._worksheetName, this._fieldId, domainType);
    };
    return CategoricalFilter;
}(Filter));
exports.CategoricalFilter = CategoricalFilter;
var HierarchicalDataValue = /** @class */ (function () {
    function HierarchicalDataValue(_value, _hierarchicalPath, _level) {
        this._value = _value;
        this._hierarchicalPath = _hierarchicalPath;
        this._level = _level;
    }
    Object.defineProperty(HierarchicalDataValue.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalDataValue.prototype, "hierarchicalPath", {
        get: function () {
            return this._hierarchicalPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalDataValue.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalDataValue;
}());
exports.HierarchicalDataValue = HierarchicalDataValue;
var HierarchicalLevelDetail = /** @class */ (function () {
    function HierarchicalLevelDetail(_name, _levelSelectionState) {
        this._name = _name;
        this._levelSelectionState = _levelSelectionState;
    }
    Object.defineProperty(HierarchicalLevelDetail.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalLevelDetail.prototype, "levelSelectionState", {
        get: function () {
            return this._levelSelectionState;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalLevelDetail;
}());
exports.HierarchicalLevelDetail = HierarchicalLevelDetail;
var HierarchicalFilter = /** @class */ (function (_super) {
    __extends(HierarchicalFilter, _super);
    function HierarchicalFilter(worksheetName, fieldName, fieldId, filterType, registryId, _dimensionName, _hierarchyCaption, _numberOfLevels, _levelDetails, _appliedValues, _isAllSelected) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._dimensionName = _dimensionName;
        _this._hierarchyCaption = _hierarchyCaption;
        _this._numberOfLevels = _numberOfLevels;
        _this._levelDetails = _levelDetails;
        _this._appliedValues = _appliedValues;
        _this._isAllSelected = _isAllSelected;
        return _this;
    }
    HierarchicalFilter.prototype.getDomainAsync = function (domainType) {
        throw new Error('Method not implemented.');
    };
    Object.defineProperty(HierarchicalFilter.prototype, "dimensionName", {
        get: function () {
            return this._dimensionName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "hierarchyCaption", {
        get: function () {
            return this._hierarchyCaption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "numberOfLevels", {
        get: function () {
            return this._numberOfLevels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "levelDetails", {
        get: function () {
            return this._levelDetails;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "isAllSelected", {
        get: function () {
            return this._isAllSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "appliedValues", {
        get: function () {
            return this._appliedValues;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalFilter;
}(Filter));
exports.HierarchicalFilter = HierarchicalFilter;
var RangeFilter = /** @class */ (function (_super) {
    __extends(RangeFilter, _super);
    function RangeFilter(worksheetName, fieldName, fieldId, filterType, registryId, _min, _max, _includeNullValues) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._min = _min;
        _this._max = _max;
        _this._includeNullValues = _includeNullValues;
        return _this;
    }
    Object.defineProperty(RangeFilter.prototype, "minValue", {
        get: function () {
            return this._min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeFilter.prototype, "maxValue", {
        get: function () {
            return this._max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeFilter.prototype, "includeNullValues", {
        get: function () {
            return this._includeNullValues;
        },
        enumerable: true,
        configurable: true
    });
    RangeFilter.prototype.getDomainAsync = function (domainType) {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        if (!domainType) {
            domainType = api_external_contract_js_1.FilterDomainType.Relevant;
        }
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(domainType, api_external_contract_js_1.FilterDomainType, 'FilterDomainType');
        return service.getRangeDomainAsync(this._worksheetName, this._fieldId, domainType);
    };
    return RangeFilter;
}(Filter));
exports.RangeFilter = RangeFilter;
var RelativeDateFilter = /** @class */ (function (_super) {
    __extends(RelativeDateFilter, _super);
    function RelativeDateFilter(worksheetName, fieldName, fieldId, filterType, registryId, _anchorDate, _periodType, _rangeType, _rangeN) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._anchorDate = _anchorDate;
        _this._periodType = _periodType;
        _this._rangeType = _rangeType;
        _this._rangeN = _rangeN;
        return _this;
    }
    Object.defineProperty(RelativeDateFilter.prototype, "anchorDate", {
        get: function () {
            return this._anchorDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "periodType", {
        get: function () {
            return this._periodType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "rangeType", {
        get: function () {
            return this._rangeType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "rangeN", {
        get: function () {
            return this._rangeN;
        },
        enumerable: true,
        configurable: true
    });
    return RelativeDateFilter;
}(Filter));
exports.RelativeDateFilter = RelativeDateFilter;
var CategoricalDomain = /** @class */ (function () {
    function CategoricalDomain(_values, _domainType) {
        this._values = _values;
        this._domainType = _domainType;
    }
    Object.defineProperty(CategoricalDomain.prototype, "values", {
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalDomain.prototype, "type", {
        get: function () {
            return this._domainType;
        },
        enumerable: true,
        configurable: true
    });
    return CategoricalDomain;
}());
exports.CategoricalDomain = CategoricalDomain;
var RangeDomain = /** @class */ (function () {
    function RangeDomain(_min, _max, _domainType) {
        this._min = _min;
        this._max = _max;
        this._domainType = _domainType;
    }
    Object.defineProperty(RangeDomain.prototype, "type", {
        get: function () {
            return this._domainType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDomain.prototype, "min", {
        get: function () {
            return this._min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDomain.prototype, "max", {
        get: function () {
            return this._max;
        },
        enumerable: true,
        configurable: true
    });
    return RangeDomain;
}());
exports.RangeDomain = RangeDomain;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataTable = /** @class */ (function () {
    function DataTable(_data, _columns, _totalRowCount, _isTotalRowCountLimited, _isSummaryData, _marksInfo) {
        this._data = _data;
        this._columns = _columns;
        this._totalRowCount = _totalRowCount;
        this._isTotalRowCountLimited = _isTotalRowCountLimited;
        this._isSummaryData = _isSummaryData;
        this._marksInfo = _marksInfo;
        this._name = _isSummaryData ? 'Summary Data Table' : 'Underlying Data Table';
    }
    Object.defineProperty(DataTable.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "marksInfo", {
        get: function () {
            return this._marksInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "totalRowCount", {
        get: function () {
            return this._totalRowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "isTotalRowCountLimited", {
        get: function () {
            return this._isTotalRowCountLimited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "isSummaryData", {
        get: function () {
            return this._isSummaryData;
        },
        enumerable: true,
        configurable: true
    });
    return DataTable;
}());
exports.DataTable = DataTable;
var MarkInfo = /** @class */ (function () {
    function MarkInfo(_type, _color, _tupleId) {
        this._type = _type;
        this._color = _color;
        this._tupleId = _tupleId;
    }
    Object.defineProperty(MarkInfo.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkInfo.prototype, "color", {
        get: function () {
            return this._color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkInfo.prototype, "tupleId", {
        get: function () {
            return this._tupleId;
        },
        enumerable: true,
        configurable: true
    });
    return MarkInfo;
}());
exports.MarkInfo = MarkInfo;
var Column = /** @class */ (function () {
    function Column(_fieldName, _fieldId, _dataType, _isReferenced, _index) {
        this._fieldName = _fieldName;
        this._fieldId = _fieldId;
        this._dataType = _dataType;
        this._isReferenced = _isReferenced;
        this._index = _index;
    }
    Object.defineProperty(Column.prototype, "fieldName", {
        get: function () {
            return this._fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "dataType", {
        get: function () {
            return this._dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "isReferenced", {
        get: function () {
            return this._isReferenced;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    return Column;
}());
exports.Column = Column;
var DataValue = /** @class */ (function () {
    /* tslint:disable:no-any */
    function DataValue(_value, _nativeValue, _formattedValue) {
        this._value = _value;
        this._nativeValue = _nativeValue;
        this._formattedValue = _formattedValue;
    }
    Object.defineProperty(DataValue.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataValue.prototype, "nativeValue", {
        get: function () {
            return this._nativeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataValue.prototype, "formattedValue", {
        get: function () {
            return this._formattedValue;
        },
        enumerable: true,
        configurable: true
    });
    return DataValue;
}());
exports.DataValue = DataValue;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DataTableReader = /** @class */ (function () {
    function DataTableReader(_id, _totalRowCount, _pageRowCount, _registryId) {
        this._id = _id;
        this._totalRowCount = _totalRowCount;
        this._pageRowCount = _pageRowCount;
        this._registryId = _registryId;
        this._pageCount = Math.ceil(_totalRowCount / _pageRowCount);
    }
    Object.defineProperty(DataTableReader.prototype, "totalRowCount", {
        get: function () {
            return this._totalRowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableReader.prototype, "pageCount", {
        get: function () {
            return this._pageCount;
        },
        enumerable: true,
        configurable: true
    });
    DataTableReader.prototype.getPageAsync = function (pageNumber) {
        ErrorHelpers_1.ErrorHelpers.verifyRange(pageNumber, 0, this._pageCount);
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getPageAsync(this._id, pageNumber, this._pageRowCount);
    };
    DataTableReader.prototype.getAllPagesAsync = function (maxRows) {
        return __awaiter(this, void 0, void 0, function () {
            var firstPage, rowsRequested, pagesRequested, pagesToFetch, isDataLimited, remainingData, i, page, fullData;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPageAsync(0)];
                    case 1:
                        firstPage = _b.sent();
                        maxRows = maxRows || this.totalRowCount;
                        rowsRequested = Math.min(maxRows, this.totalRowCount);
                        pagesRequested = Math.ceil(rowsRequested / this._pageRowCount);
                        pagesToFetch = Math.min(pagesRequested, 400);
                        isDataLimited = pagesToFetch < pagesRequested;
                        remainingData = [];
                        i = 1;
                        _b.label = 2;
                    case 2:
                        if (!(i < pagesToFetch)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getPageAsync(i)];
                    case 3:
                        page = _b.sent();
                        remainingData.push(page.data);
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        fullData = (_a = firstPage.data).concat.apply(_a, remainingData);
                        // This slices the array only if maxRows has been set and is less than totalRowCount
                        fullData.length = rowsRequested;
                        return [2 /*return*/, {
                                name: firstPage.name,
                                data: fullData,
                                columns: firstPage.columns,
                                totalRowCount: isDataLimited ? pagesToFetch * this._pageRowCount : rowsRequested,
                                isTotalRowCountLimited: isDataLimited,
                                isSummaryData: firstPage.isSummaryData,
                            }];
                }
            });
        });
    };
    DataTableReader.prototype.releaseAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.releaseAsync(this._id);
    };
    return DataTableReader;
}());
exports.DataTableReader = DataTableReader;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Selection Model.
 */
var SelectionModel = /** @class */ (function () {
    function SelectionModel() {
    }
    return SelectionModel;
}());
exports.SelectionModel = SelectionModel;
/**
 * Value based selection model. Meant for hierarchical, range and categorical selections.
 */
var ValueSelectionModel = /** @class */ (function (_super) {
    __extends(ValueSelectionModel, _super);
    function ValueSelectionModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectValues = [];
        return _this;
    }
    return ValueSelectionModel;
}(SelectionModel));
exports.ValueSelectionModel = ValueSelectionModel;
/**
 * Hierarchical value selection model
 */
var HierarchicalSelectionModel = /** @class */ (function (_super) {
    __extends(HierarchicalSelectionModel, _super);
    function HierarchicalSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HierarchicalSelectionModel;
}(ValueSelectionModel));
exports.HierarchicalSelectionModel = HierarchicalSelectionModel;
/**
 * Range based value selection model
 */
var RangeSelectionModel = /** @class */ (function (_super) {
    __extends(RangeSelectionModel, _super);
    function RangeSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RangeSelectionModel;
}(SelectionModel));
exports.RangeSelectionModel = RangeSelectionModel;
/**
 * Dimension value selection model
 */
var DimensionSelectionModel = /** @class */ (function (_super) {
    __extends(DimensionSelectionModel, _super);
    function DimensionSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DimensionSelectionModel;
}(ValueSelectionModel));
exports.DimensionSelectionModel = DimensionSelectionModel;
/**
 * Tuple based selection model
 */
var TupleSelectionModel = /** @class */ (function () {
    function TupleSelectionModel() {
        this.objectIds = [];
    }
    return TupleSelectionModel;
}());
exports.TupleSelectionModel = TupleSelectionModel;
/**
 * Container class to populate all the selection models when parsing input
 */
var SelectionModelsContainer = /** @class */ (function () {
    function SelectionModelsContainer() {
        this.hierModelArr = [];
        this.dimModelArr = [];
        this.quantModelArr = [];
    }
    return SelectionModelsContainer;
}());
exports.SelectionModelsContainer = SelectionModelsContainer;
var SelectTuplesInteractionModel = /** @class */ (function () {
    function SelectTuplesInteractionModel(visualIdPresModel, tupleIds, selectOptions, tooltipContext) {
        if (tupleIds === void 0) { tupleIds = []; }
        this.visualIdPresModel = visualIdPresModel;
        this.tupleIds = tupleIds;
        this.selectOptions = selectOptions;
        this.tooltipContext = tooltipContext;
    }
    return SelectTuplesInteractionModel;
}());
exports.SelectTuplesInteractionModel = SelectTuplesInteractionModel;
var HoverTupleInteractionModel = /** @class */ (function () {
    function HoverTupleInteractionModel(visualIdPresModel, tupleId, tooltipContext, allowHoverActions) {
        this.visualIdPresModel = visualIdPresModel;
        this.tupleId = tupleId;
        this.tooltipContext = tooltipContext;
        this.allowHoverActions = allowHoverActions;
    }
    return HoverTupleInteractionModel;
}());
exports.HoverTupleInteractionModel = HoverTupleInteractionModel;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Point.js":
/*!***************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Point.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Point = /** @class */ (function () {
    function Point(_x, _y) {
        this._x = _x;
        this._y = _y;
    }
    Object.defineProperty(Point.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Point.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    return Point;
}());
exports.Point = Point;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js":
/*!*********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/GetDataService.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Defines which type of getData call to make.
 */
var GetDataType;
(function (GetDataType) {
    GetDataType["Summary"] = "summary";
    GetDataType["Underlying"] = "underlying";
})(GetDataType = exports.GetDataType || (exports.GetDataType = {}));


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var ServiceRegistry_1 = __webpack_require__(/*! ./ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var AccessibilityServiceImpl_1 = __webpack_require__(/*! ./impl/AccessibilityServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/AccessibilityServiceImpl.js");
var AnimationServiceImpl_1 = __webpack_require__(/*! ./impl/AnimationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js");
var AnnotationServiceImpl_1 = __webpack_require__(/*! ./impl/AnnotationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js");
var DataSourceServiceImpl_1 = __webpack_require__(/*! ./impl/DataSourceServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js");
var ExportServiceImpl_1 = __webpack_require__(/*! ./impl/ExportServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js");
var ExternalContextMenuServiceImpl_1 = __webpack_require__(/*! ./impl/ExternalContextMenuServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js");
var FilterServiceImpl_1 = __webpack_require__(/*! ./impl/FilterServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js");
var GetDataServiceImpl_1 = __webpack_require__(/*! ./impl/GetDataServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js");
var NotificationServiceImpl_1 = __webpack_require__(/*! ./impl/NotificationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js");
var ParametersServiceImpl_1 = __webpack_require__(/*! ./impl/ParametersServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js");
var SelectionServiceImpl_1 = __webpack_require__(/*! ./impl/SelectionServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js");
var SizeServiceImpl_1 = __webpack_require__(/*! ./impl/SizeServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js");
var VisualModelServiceImpl_1 = __webpack_require__(/*! ./impl/VisualModelServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/VisualModelServiceImpl.js");
var VizServiceImpl_1 = __webpack_require__(/*! ./impl/VizServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js");
var ZoneServiceImpl_1 = __webpack_require__(/*! ./impl/ZoneServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js");
function registerAllSharedServices(dispatcher, registryId, platformVersion) {
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new AnimationServiceImpl_1.AnimationServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new DataSourceServiceImpl_1.DataSourceServiceImpl(dispatcher, registryId, platformVersion));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ExportServiceImpl_1.ExportServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new GetDataServiceImpl_1.GetDataServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new FilterServiceImpl_1.FilterServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new NotificationServiceImpl_1.NotificationServiceImpl(dispatcher));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ParametersServiceImpl_1.ParametersServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new SelectionServiceImpl_1.SelectionServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new AnnotationServiceImpl_1.AnnotationServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ZoneServiceImpl_1.ZoneServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new SizeServiceImpl_1.SizeServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new VisualModelServiceImpl_1.VisualModelServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new VizServiceImpl_1.VizServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ExternalContextMenuServiceImpl_1.ExternalContextMenuServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new AccessibilityServiceImpl_1.AccessibilityServiceImpl(dispatcher, registryId));
}
exports.registerAllSharedServices = registerAllSharedServices;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
window.__tableauApiServiceRegistry = window.__tableauApiServiceRegistry || {};
var ServiceRegistryImpl = /** @class */ (function () {
    function ServiceRegistryImpl() {
        this._services = {};
    }
    ServiceRegistryImpl.prototype.registerService = function (service) {
        this._services[service.serviceName] = service;
    };
    ServiceRegistryImpl.prototype.getService = function (serviceName) {
        if (!this._services.hasOwnProperty(serviceName)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Service not registered: " + serviceName);
        }
        return this._services[serviceName];
    };
    return ServiceRegistryImpl;
}());
/**
 * Static class used for getting access to the single instance
 * of the ApiServiceRegistry associated with the registryId.
 *
 * Extensions by design don't need to store/access multiple service registries. Their single instance of ServiceRegistry is
 * stored/access with registryId = 0.
 *
 * Whereas Embedding needs to be aware of which ServiceRegistry to use when there are multiple vizzes embedded.
 * An example of how window.__tableauApiServiceRegistry will look when there are two vizzes: { 0 : ServiceRegistry, 1 : ServiceRegistry}
 * where registry ID of 0 & 1 refers to viz's internal identifier (which is generated by VizManager).
 */
var ApiServiceRegistry = /** @class */ (function () {
    // Private to avoid anyone constructing this
    function ApiServiceRegistry() {
    }
    /**
     * Gets the singleton instance of the ServiceRegistry
     */
    ApiServiceRegistry.get = function (registryId) {
        if (!window.__tableauApiServiceRegistry || !window.__tableauApiServiceRegistry[registryId]) {
            ApiServiceRegistry.setInstance(registryId, new ServiceRegistryImpl());
        }
        if (!window.__tableauApiServiceRegistry[registryId]) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, 'Service registry failed');
        }
        return window.__tableauApiServiceRegistry[registryId];
    };
    /**
     * Helper method that sets the service registry instance for the corresponding registryId. Can be used by unit tests
     *
     * @param {ServiceRegistry} serviceRegistry The new registry
     */
    ApiServiceRegistry.setInstance = function (registryId, serviceRegistry) {
        if (!window.__tableauApiServiceRegistry) {
            window.__tableauApiServiceRegistry = {};
        }
        window.__tableauApiServiceRegistry[registryId] = serviceRegistry;
    };
    /**
     * Only used by unit tests
     */
    ApiServiceRegistry.clearRegistry = function () {
        window.__tableauApiServiceRegistry = {};
    };
    return ApiServiceRegistry;
}());
exports.ApiServiceRegistry = ApiServiceRegistry;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/AccessibilityServiceImpl.js":
/*!************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/AccessibilityServiceImpl.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var AccessibilityModels_1 = __webpack_require__(/*! ../../Models/AccessibilityModels */ "../api-shared-js/lib/src/ApiShared/Models/AccessibilityModels.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var AccessibilityServiceImpl = /** @class */ (function (_super) {
    __extends(AccessibilityServiceImpl, _super);
    function AccessibilityServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AccessibilityServiceImpl.prototype, "serviceName", {
        get: function () {
            return "accessibility" /* Accessibility */;
        },
        enumerable: true,
        configurable: true
    });
    AccessibilityServiceImpl.prototype.getTooltipTextAsync = function (visualId, tupleId) {
        var _a;
        var tooltipTextRequest = new AccessibilityModels_1.TooltipTextRequestModel(visualId, tupleId);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getTooltipTextAsync',
            _a[api_internal_contract_js_1.ParameterId.TooltipTextRequest] = tooltipTextRequest,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetTooltipText, parameters).then(function (response) {
            return response.result;
        });
    };
    AccessibilityServiceImpl.prototype.leaveMarkNavigationAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'leaveMarkNavigationAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RaiseLeaveMarkNavNotification, parameters).then(function (response) {
            return;
        });
    };
    return AccessibilityServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.AccessibilityServiceImpl = AccessibilityServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var AnimationServiceImpl = /** @class */ (function (_super) {
    __extends(AnimationServiceImpl, _super);
    function AnimationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnimationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "animation-service" /* Animation */;
        },
        enumerable: true,
        configurable: true
    });
    AnimationServiceImpl.prototype.replayAsync = function (replaySpeed) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.ReplaySpeed] = 1.0,
            _a);
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(replaySpeed, api_external_contract_js_1.ReplaySpeedType, 'ReplaySpeedType');
        parameters[api_internal_contract_js_1.ParameterId.ReplaySpeed] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.setReplaySpeedType.convert(replaySpeed);
        return this.execute(api_internal_contract_js_1.VerbId.ReplayAnimation, parameters).then(function (response) {
            return;
        });
    };
    return AnimationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.AnimationServiceImpl = AnimationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var SelectionModels_1 = __webpack_require__(/*! ../../Models/SelectionModels */ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var AnnotationServiceImpl = /** @class */ (function (_super) {
    __extends(AnnotationServiceImpl, _super);
    function AnnotationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnnotationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "annotation-service" /* Annotation */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method to annotate a mark on the given worksheet.
     *
     * @param visualId
     * @param mark
     * @param annotationText
     */
    AnnotationServiceImpl.prototype.annotateMarkAsync = function (visualId, mark, annotationText) {
        var _a;
        var selectionModelContainer = this.parseMarkSelectionIds([mark]);
        var dummyTargetPoint = { x: 0, y: 0 };
        var formattedText = "<formatted-text><run>" + annotationText + "</run></formatted-text>";
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'annotateMarkAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.AnnotateEnum] = api_internal_contract_js_1.AnnotateEnum.Mark,
            _a[api_internal_contract_js_1.ParameterId.TargetPoint] = dummyTargetPoint,
            _a[api_internal_contract_js_1.ParameterId.SelectionList] = [selectionModelContainer.selection],
            _a[api_internal_contract_js_1.ParameterId.FormattedText] = formattedText,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.CreateAnnotation, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
        });
    };
    /**
     * Method to retrieve annotations for the given worksheet.
     *
     * @param visualId
     * @returns {Promise<Array<Annotation>>}
     */
    AnnotationServiceImpl.prototype.getAnnotationsAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getAnnotationsAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetAnnotations, parameters).then(function (response) {
            var annotationsList = response.result;
            return _this.annotationFilterMap(annotationsList);
        });
    };
    /**
     * Method to remove an annotation from a given worksheet.
     *
     * @param visualId
     * @param annotation
     */
    AnnotationServiceImpl.prototype.removeAnnotationAsync = function (visualId, annotation) {
        var _a;
        var selectionModelContainer = this.parseAnnotationSelectionIds([annotation]);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeAnnotationAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionList] = [selectionModelContainer.selection],
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RemoveAnnotation, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
        });
    };
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    AnnotationServiceImpl.prototype.parseMarkSelectionIds = function (marks) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        marks.forEach(function (mark) {
            var tupleId = mark.tupleId;
            if (tupleId !== undefined && tupleId !== null && tupleId > 0) {
                ids.push(tupleId.toString()); // collect the tuple ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'invalid tupleId');
            }
        });
        if (ids.length !== 0) {
            // tuple ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'tuples';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to prepare the pres models for selection by MarkAnnotationInfo
     * @param marks
     */
    AnnotationServiceImpl.prototype.parseAnnotationSelectionIds = function (annotations) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        annotations.forEach(function (annotation) {
            var annotationId = annotation.annotationId;
            if (annotationId !== undefined && annotationId !== null && annotationId >= 0) {
                ids.push(annotationId.toString()); // collect the annotation ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'invalid annotationId');
            }
        });
        if (ids.length !== 0) {
            // annotation ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'annotations';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to map Annotation to MarkAnnotationInfo
     * @param annotation
     * @returns {Annotation}
     */
    AnnotationServiceImpl.prototype.mapAnnotation = function (annotation) {
        return {
            annotationHTML: annotation.annotationText,
            annotationId: annotation.annotationId,
            annotationText: annotation.annotationPlainText,
            annotationType: InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.annotationType.convert(annotation.annotateEnum),
            tupleId: annotation.tupleId,
        };
    };
    /**
     * Filter the Annotations to Mark Annotations, and map them to MarkAnnotationInfo
     * @param annotations
     * @returns {Array<Annotation>}
     */
    AnnotationServiceImpl.prototype.annotationFilterMap = function (annotations) {
        var _this = this;
        var annotationInfos = annotations.map(function (annotation) { return _this.mapAnnotation(annotation); });
        return annotationInfos;
    };
    return AnnotationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.AnnotationServiceImpl = AnnotationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ClientInfoServiceImpl = /** @class */ (function (_super) {
    __extends(ClientInfoServiceImpl, _super);
    function ClientInfoServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ClientInfoServiceImpl.prototype, "serviceName", {
        get: function () {
            return "client-info-service" /* ClientInfo */;
        },
        enumerable: true,
        configurable: true
    });
    ClientInfoServiceImpl.prototype.getClientInfoAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetEmbeddingClientInfo;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getClientInfoAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var clientInfo = response.result;
            return clientInfo;
        });
    };
    return ClientInfoServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ClientInfoServiceImpl = ClientInfoServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var DataSource_1 = __webpack_require__(/*! ../../DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
var Field_1 = __webpack_require__(/*! ../../Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
var DataSourceImpl_1 = __webpack_require__(/*! ../../Impl/DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
var FieldImpl_1 = __webpack_require__(/*! ../../Impl/FieldImpl */ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
exports.SENTINEL_LOGICAL_TABLE_INFO = {
    id: InternalContract.ApiShowDataTableSentinel.SingleTableId,
    caption: InternalContract.ApiShowDataTableSentinel.SingleTableCaption,
};
// The minimum platform version when Object Model was supported
var platformVersionObjectModelSupport = { major: 1, minor: 20, fix: 1 };
var DataSourceServiceImpl = /** @class */ (function (_super) {
    __extends(DataSourceServiceImpl, _super);
    // Since Object Model is supported since Tableau 2020.2, DataSourceServiceImpl can be initialized with the
    // platform version when OM was supported. Once we drop support for Tableau versions <= 2020.1, all additional
    // code in here for Object Model can be removed.
    function DataSourceServiceImpl(dispatcher, registryId, _platformVersion) {
        if (_platformVersion === void 0) { _platformVersion = platformVersionObjectModelSupport; }
        var _this = _super.call(this, dispatcher, registryId) || this;
        _this._platformVersion = _platformVersion;
        return _this;
    }
    Object.defineProperty(DataSourceServiceImpl.prototype, "serviceName", {
        get: function () {
            return "data-source-service" /* DataSourceService */;
        },
        enumerable: true,
        configurable: true
    });
    DataSourceServiceImpl.prototype.refreshAsync = function (dataSourceId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'refreshAsync',
            _a[api_internal_contract_js_1.ParameterId.DeltaTimeMs] = 0,
            _a[api_internal_contract_js_1.ParameterId.ShouldRefreshDS] = true,
            _a);
        // On server: Not passing the datasource id will refresh all datasources.
        if (dataSourceId) {
            parameters[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId;
        }
        return this.execute(api_internal_contract_js_1.VerbId.RefreshDataSource, parameters).then(function (response) {
            return;
        });
    };
    DataSourceServiceImpl.prototype.getActiveTablesAsync = function (dataSourceId) {
        var _a;
        var joinParameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getActiveTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        // Get the description of the tables used by this connection
        return this.execute(api_internal_contract_js_1.VerbId.GetActiveTables, joinParameters).then(function (joinResponse) {
            var tableInfos = joinResponse.result;
            // getActiveTables is unsupported for cubes and GA. We do not have a connection type property
            // available from the platform (intentionally, to reduce code churn as new connections are added).
            // Instead,just check if any tables are returned. This array will be empty for any non-table based datasource.
            if (tableInfos.tables.length === 0) {
                throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedMethodForDataSourceType, "getActiveTables is not supported for: " + dataSourceId);
            }
            return tableInfos.tables;
        });
    };
    DataSourceServiceImpl.prototype.getDataSourcesAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDataSourcesAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSources, parameters).then(function (response) {
            var dataSchema = response.result;
            return dataSchema;
        });
    };
    DataSourceServiceImpl.prototype.getAllDataSourcesAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getAllDataSourcesAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetAllDataSources, parameters).then(function (response) {
            var dataSchema = response.result;
            return dataSchema;
        });
    };
    DataSourceServiceImpl.prototype.getConnectionSummariesAsync = function (dataSourceId) {
        var _a;
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getConnectionSummariesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        // Get the description of the tables used by this connection
        return this.execute(api_internal_contract_js_1.VerbId.GetConnectionDescriptionSummaries, params).then(function (response) {
            var descriptionSummaries = response.result;
            return descriptionSummaries;
        });
    };
    DataSourceServiceImpl.prototype.getFieldAsync = function (globalfieldName) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetFieldAndDataSource;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getFieldAsync',
            _a[api_internal_contract_js_1.ParameterId.FieldId] = globalfieldName,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var dataSource = response.result[api_internal_contract_js_1.ParameterId.DataSource];
            var field = response.result[api_internal_contract_js_1.ParameterId.Field];
            return _this.convertField(field, _this.convertDataSource(dataSource));
        });
    };
    DataSourceServiceImpl.prototype.getLogicalTablesAsync = function (dataSourceId) {
        var _a;
        if (!this.isObjectModelSupportedByPlatform()) {
            /**
             * This sentinel ID can be passed to datasource.getLogicalTableData.
             * Once the desktop is upgraded to a version that supports object model,
             * the sentinel ID will automatically fetch the upgraded table.
             * */
            return new Promise(function (resolve) { return resolve([exports.SENTINEL_LOGICAL_TABLE_INFO]); });
        }
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTables, params).then(function (response) {
            return response.result;
        });
    };
    DataSourceServiceImpl.prototype.getUnderlyingTablesAsync = function (visualId) {
        var _a;
        if (!this.isObjectModelSupportedByPlatform()) {
            /**
             * This sentinel ID can be passed to worksheet.getUnderlyingTableData.
             * Once the desktop is upgraded to a version that supports object model,
             * the sentinel ID will automatically fetch the upgraded table.
             * */
            return new Promise(function (resolve) { return resolve([exports.SENTINEL_LOGICAL_TABLE_INFO]); });
        }
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTables, params).then(function (response) {
            return response.result;
        });
    };
    DataSourceServiceImpl.prototype.convertField = function (field, dataSource) {
        return new Field_1.Field(new FieldImpl_1.FieldImpl(field, dataSource));
    };
    DataSourceServiceImpl.prototype.convertDataSource = function (dataSource) {
        return new DataSource_1.DataSource(new DataSourceImpl_1.DataSourceImpl(dataSource, this._registryId));
    };
    DataSourceServiceImpl.prototype.isObjectModelSupportedByPlatform = function () {
        var platformVersionNoObjectModelSupport = { major: 1, minor: 13, fix: 0 };
        return InternalContract.VersionLessThan(platformVersionNoObjectModelSupport, this._platformVersion);
    };
    return DataSourceServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.DataSourceServiceImpl = DataSourceServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ExportHelpers_1 = __webpack_require__(/*! ../../Utils/ExportHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ExportServiceImpl = /** @class */ (function (_super) {
    __extends(ExportServiceImpl, _super);
    function ExportServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ExportServiceImpl.prototype, "serviceName", {
        get: function () {
            return "export-service" /* Export */;
        },
        enumerable: true,
        configurable: true
    });
    ExportServiceImpl.prototype.getExportCrosstabSheetMapAsync = function (currentSheetType) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetExportCrosstabSheetMap;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getExportCrosstabSheetMapAsync',
            _a[api_internal_contract_js_1.ParameterId.CurrentSheetType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.sheetType.convert(currentSheetType),
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    ExportServiceImpl.prototype.exportCrosstabAsync = function (sheetName, format, exportableWorksheetNames, currentSheetType) {
        return __awaiter(this, void 0, void 0, function () {
            var sheetNameToIdMap, parameters, verb;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ErrorHelpers_1.ErrorHelpers.verifySheetName(exportableWorksheetNames, sheetName);
                        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(format, api_external_contract_js_1.CrosstabFileFormat, 'CrosstabFileFormat');
                        return [4 /*yield*/, this.getExportCrosstabSheetMapAsync(currentSheetType)];
                    case 1:
                        sheetNameToIdMap = _b.sent();
                        if (!sheetNameToIdMap[sheetName]) {
                            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'missing sheet doc id from sheetMap');
                        }
                        parameters = (_a = {},
                            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportCrosstabAsync',
                            _a[api_internal_contract_js_1.ParameterId.SheetIdentifier] = sheetNameToIdMap[sheetName],
                            _a[api_internal_contract_js_1.ParameterId.SendNotifications] = true,
                            _a);
                        switch (format) {
                            case api_external_contract_js_1.CrosstabFileFormat.CSV:
                                verb = api_internal_contract_js_1.VerbId.ExportCrosstabCsvDownload;
                                // CSV only parameter: see browser-clients/export-crosstab-options-dialog repo
                                parameters[api_internal_contract_js_1.ParameterId.UseTabDelimiters] = true;
                                break;
                            case api_external_contract_js_1.CrosstabFileFormat.Excel:
                                verb = api_internal_contract_js_1.VerbId.ExportCrosstabExcelDownload;
                                break;
                            default:
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'unsupported Crosstab file format.');
                        }
                        return [2 /*return*/, this.execute(verb, parameters)
                                .then(function (response) {
                                var result = response.result;
                                return result;
                            })
                                .catch(function () {
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.CrosstabCreationError, 'An unexpected error occurred while generating the document.');
                            })];
                }
            });
        });
    };
    ExportServiceImpl.prototype.exportDataAsync = function (visualId, options) {
        var _a;
        var _b;
        ErrorHelpers_1.ErrorHelpers.verifyExportDataOptions(options);
        // Remove any duplicates from the input array
        var columnsAsSet = new Set(options.columnsToIncludeById);
        var columnsToIncludeById = Array.from(columnsAsSet);
        var verb = api_internal_contract_js_1.VerbId.ExportDataDownload;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportDataAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = (_b = options.ignoreAliases, (_b !== null && _b !== void 0 ? _b : false)),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = columnsToIncludeById,
            _a);
        return this.execute(verb, parameters)
            .then(function () { })
            .catch(function () {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.DataCreationError, 'An unexpected error occurred while generating the document.');
        });
    };
    ExportServiceImpl.prototype.exportPowerPointAsync = function (sheetNames, exportScenarios) {
        var _a;
        ErrorHelpers_1.ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);
        // Note: the ExportOriginUrl param is listed as optional for the pres layer command we are invoking; however,
        // recent changes were made that enforced the use of the empty string when invoking this command with no ExportOriginUrl.
        // see browser-clients/export-powerpoint-options-dialog repo.
        var verb = api_internal_contract_js_1.VerbId.ExportPowerpointDownload;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportPowerPointAsync',
            _a[api_internal_contract_js_1.ParameterId.ExportOriginUrl] = '',
            _a[api_internal_contract_js_1.ParameterId.SelectedSheetNames] = sheetNames,
            _a);
        return this.execute(verb, parameters)
            .then(function (response) {
            var result = response.result;
            return result;
        })
            .catch(function () {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.PowerPointCreationError, 'An error occured while attempting to generate the PowerPoint file.');
        });
    };
    ExportServiceImpl.prototype.exportPDFAsync = function (sheetNames, externalExportPdfOptions, exportScenarios) {
        return __awaiter(this, void 0, void 0, function () {
            var internalExportPdfOptions, verb, parameters;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ErrorHelpers_1.ErrorHelpers.verifyExportPDFOptions(externalExportPdfOptions);
                        ErrorHelpers_1.ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);
                        return [4 /*yield*/, this.getExportPDFOptionsAsync()];
                    case 1:
                        internalExportPdfOptions = _b.sent();
                        ExportHelpers_1.ExportHelpers.updateInternalExportPDFOptions(internalExportPdfOptions, externalExportPdfOptions, sheetNames);
                        verb = api_internal_contract_js_1.VerbId.ExportPdfDownload;
                        parameters = (_a = {},
                            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportPDFAsync',
                            _a[api_internal_contract_js_1.ParameterId.ExportPdfOptions] = internalExportPdfOptions,
                            _a);
                        return [2 /*return*/, this.execute(verb, parameters)
                                .then(function (response) {
                                var result = response.result;
                                return result;
                            })
                                .catch(function () {
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.PDFCreationError, 'Unable to create PDF because something went wrong. Try again.');
                            })];
                }
            });
        });
    };
    ExportServiceImpl.prototype.getExportPDFOptionsAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetExportPdfOptions;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getExportPdfOptionsAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    return ExportServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ExportServiceImpl = ExportServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js":
/*!******************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ExternalContextMenuServiceImpl = /** @class */ (function (_super) {
    __extends(ExternalContextMenuServiceImpl, _super);
    function ExternalContextMenuServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ExternalContextMenuServiceImpl.prototype, "serviceName", {
        get: function () {
            return "external-context-menu-service" /* ExternalContextMenu */;
        },
        enumerable: true,
        configurable: true
    });
    ExternalContextMenuServiceImpl.prototype.appendContextMenuAsync = function (sheetName, targetMenu, config) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.AppendExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'appendContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemDisplayName] = config.displayName,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var newMenuItemId = response.result;
            return newMenuItemId;
        });
    };
    ExternalContextMenuServiceImpl.prototype.removeContextMenuAsync = function (sheetName, targetMenu, menuItemId) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RemoveExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemId] = menuItemId,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    ExternalContextMenuServiceImpl.prototype.executeContextMenuAsync = function (sheetName, targetMenu, menuItemId) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ExecuteExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'executeContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemId] = menuItemId,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    ExternalContextMenuServiceImpl.prototype.renameContextMenuAsync = function (sheetName, targetMenu, menuHeader, menuDescription) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RenameExternalMenu;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'renameContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuHeader] = menuHeader,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuDescription] = menuDescription,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    return ExternalContextMenuServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ExternalContextMenuServiceImpl = ExternalContextMenuServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ApiShared_1 = __webpack_require__(/*! ../../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var FilterModels_1 = __webpack_require__(/*! ../../Models/FilterModels */ "../api-shared-js/lib/src/ApiShared/Models/FilterModels.js");
var DataValueFactory_1 = __webpack_require__(/*! ../../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var FilterServiceImpl = /** @class */ (function (_super) {
    __extends(FilterServiceImpl, _super);
    function FilterServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FilterServiceImpl.prototype, "serviceName", {
        get: function () {
            return "filter-service" /* Filter */;
        },
        enumerable: true,
        configurable: true
    });
    FilterServiceImpl.prototype.applyFilterAsync = function (visualId, fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ApplyCategoricalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        if (!Array.isArray(values)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyFilterAsync must be an array');
        }
        parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] =
            filterOptions === undefined || filterOptions.isExcludeMode === undefined ? false : filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyRangeFilterAsync = function (visualId, fieldName, filterOptions) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.ApplyRangeFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyRangeFilterAsync',
            _a);
        if (filterOptions.min !== undefined && filterOptions.min !== null) {
            var min = void 0;
            if (filterOptions.min instanceof Date) {
                min = Param_1.Param.serializeDateForPlatform(filterOptions.min);
            }
            else {
                min = filterOptions.min;
            }
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeMin] = min;
        }
        if (filterOptions.max !== undefined && filterOptions.max !== null) {
            var max = void 0;
            if (filterOptions.max instanceof Date) {
                max = Param_1.Param.serializeDateForPlatform(filterOptions.max);
            }
            else {
                max = filterOptions.max;
            }
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeMax] = max;
        }
        // The null option is used with min+max for 'include-range' or 'include-range-or-null'
        if (filterOptions.nullOption) {
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeNullOption] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.nullOptions.convert(filterOptions.nullOption);
        }
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        return this.execute(verb, parameters).then(function (response) {
            _this.apiFilterHandlerCheckForCommandError(response.result);
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyHierarchicalFilterAsync = function (visualId, fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.HierarchicalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyHierarchicalFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        var hierarchicalLevels = values.levels;
        if (Array.isArray(hierarchicalLevels) && hierarchicalLevels.length > 0) {
            parameters[api_internal_contract_js_1.ParameterId.FilterLevels] = hierarchicalLevels;
        }
        else if (values.length > 0) {
            parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        }
        else {
            // the server command expects empty list for clearing the filter
            // it also expects eithers FilterLevels or FilterValues to be set
            parameters[api_internal_contract_js_1.ParameterId.FilterLevels] = [];
        }
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] = filterOptions && !!filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.clearFilterAsync = function (visualId, fieldName) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ClearFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'clearFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        return this.execute(verb, parameters).then(function (resposne) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyRelativeDateFilterAsync = function (visualId, fieldName, options) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ApplyRelativeDateFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyRelativeDateFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.PeriodType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.periodType.convert(options.periodType);
        parameters[api_internal_contract_js_1.ParameterId.DateRangeType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.dateRangeType.convert(options.rangeType);
        if (options.rangeType === api_external_contract_js_1.DateRangeType.LastN || options.rangeType === api_external_contract_js_1.DateRangeType.NextN) {
            if (options.rangeN === undefined || options.rangeN === null) {
                throw new ApiShared_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.MissingRangeNForRelativeDateFilters, 'Missing rangeN field for a relative date filter of LASTN or NEXTN.');
            }
            parameters[api_internal_contract_js_1.ParameterId.RangeN] = options.rangeN;
        }
        if (options.anchorDate !== undefined && options.anchorDate !== null) {
            parameters[api_internal_contract_js_1.ParameterId.AnchorDate] = this.convertAnchorDate(options.anchorDate);
        }
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    FilterServiceImpl.prototype.getFiltersAsync = function (visualId) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetFilters;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getFiltersAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        return this.execute(verb, parameters).then(function (response) {
            var filters = response.result;
            return _this.convertDomainFilters(filters);
        });
    };
    FilterServiceImpl.prototype.getCategoricalDomainAsync = function (worksheetName, fieldId, domainType) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetCategoricalDomain;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCategoricalDomainAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        parameters[api_internal_contract_js_1.ParameterId.DomainType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterDomainType.convert(domainType);
        return this.execute(verb, parameters).then(function (response) {
            var domain = response.result;
            return _this.convertCategoricalDomain(domain, domainType);
        });
    };
    FilterServiceImpl.prototype.getRangeDomainAsync = function (worksheetName, fieldId, domainType) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetRangeDomain;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getRangeDomainAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        parameters[api_internal_contract_js_1.ParameterId.DomainType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterDomainType.convert(domainType);
        return this.execute(verb, parameters).then(function (response) {
            var domain = response.result;
            return _this.convertRangeDomain(domain, domainType);
        });
    };
    FilterServiceImpl.prototype.getDashboardFiltersAsync = function () {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetDashboardFilters;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDashboardFiltersAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var filters = response.result;
            return _this.convertDomainFilters(filters);
        });
    };
    FilterServiceImpl.prototype.applyDashboardFilterAsync = function (fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.DashboardCategoricalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyDashboardFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] = filterOptions && !!filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    FilterServiceImpl.prototype.getAppliedWorksheetsAsync = function (worksheetName, fieldId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var sharedFilterModel, worksheetNames;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.executeGetAppliedWorksheets(worksheetName, fieldId, 'getAppliedWorksheetsAsync')];
                    case 1:
                        sharedFilterModel = _b.sent();
                        worksheetNames = [];
                        (_a = sharedFilterModel.worksheets) === null || _a === void 0 ? void 0 : _a.map(function (worksheetInfo) {
                            if (worksheetInfo.isSelected) {
                                worksheetNames.push(worksheetInfo.worksheetName);
                            }
                        });
                        return [2 /*return*/, worksheetNames];
                }
            });
        });
    };
    FilterServiceImpl.prototype.setAppliedWorksheetsAsync = function (worksheetName, fieldName, fieldId, applyToWorksheets) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedFilterModel, allowedWorksheets, activeWorksheet, verb, parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeGetAppliedWorksheets(worksheetName, fieldId, 'getAppliedWorksheetsAsyncInternal')];
                    case 1:
                        sharedFilterModel = _a.sent();
                        if (!sharedFilterModel || !sharedFilterModel.worksheets) {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'This filter does not apply to multiple worksheets');
                        }
                        allowedWorksheets = [];
                        activeWorksheet = '';
                        sharedFilterModel.worksheets.forEach(function (worksheet) {
                            // Get active worksheet
                            if (worksheet.isActive) {
                                activeWorksheet = worksheet.worksheetName;
                            }
                            // Populate allowed worksheets
                            if (worksheet.isSelected || worksheet.isEnabled) {
                                allowedWorksheets.push(worksheet.worksheetName);
                            }
                        });
                        if (activeWorksheet === '') {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'No active worksheet');
                        }
                        if (!applyToWorksheets.includes(activeWorksheet)) {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, activeWorksheet + " must be included in the applied worksheets");
                        }
                        applyToWorksheets.forEach(function (sheet) {
                            // check if it's present within compatible sheets
                            if (!allowedWorksheets.includes(sheet)) {
                                throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, "The field " + fieldName + " isn't applicable to the worksheet " + sheet);
                            }
                        });
                        verb = api_internal_contract_js_1.VerbId.ChangeSharedFilter;
                        parameters = {};
                        parameters[api_internal_contract_js_1.ParameterId.FunctionName] = 'setAppliedWorksheetsAsync';
                        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
                            worksheet: worksheetName,
                        };
                        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
                        parameters[api_internal_contract_js_1.ParameterId.SharedFilterSheets] = applyToWorksheets;
                        return [2 /*return*/, this.execute(verb, parameters).then(function (response) {
                                return applyToWorksheets;
                            })];
                }
            });
        });
    };
    // Helper Methods
    FilterServiceImpl.prototype.executeGetAppliedWorksheets = function (worksheetName, fieldId, telemetryFunctionName) {
        var verb = api_internal_contract_js_1.VerbId.GetSharedFilter;
        var parameters = {};
        parameters[api_internal_contract_js_1.ParameterId.FunctionName] = telemetryFunctionName;
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        return this.execute(verb, parameters).then(function (response) {
            var sharedFilterModel = response.result;
            return sharedFilterModel;
        });
    };
    FilterServiceImpl.prototype.convertDomainFilters = function (domainFilters) {
        var _this = this;
        var filters = [];
        domainFilters.forEach(function (domainFilter) {
            switch (domainFilter.filterType) {
                case api_internal_contract_js_1.FilterType.Categorical: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertCategoricalFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Categorical Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.Hierarchical: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertHierarchicalFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Hierarchical Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.Range: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertRangeFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Range Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.RelativeDate: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertRelativeDateFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Relative Date Filter');
                    }
                    break;
                }
                default: {
                    break;
                }
            }
        });
        return filters;
    };
    FilterServiceImpl.prototype.convertCategoricalFilter = function (domainFilter) {
        var appliedValues = domainFilter.values.map(function (dv) {
            return DataValueFactory_1.DataValueFactory.MakeFilterDataValue(dv);
        });
        return new FilterModels_1.CategoricalFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Categorical, this._registryId, appliedValues, domainFilter.isExclude, domainFilter.isAllSelected);
    };
    FilterServiceImpl.prototype.convertHierarchicalFilter = function (domainFilter) {
        var appliedValues = domainFilter.values.map(function (hierarchicalDataValue) {
            return new FilterModels_1.HierarchicalDataValue(DataValueFactory_1.DataValueFactory.MakeFilterDataValue(hierarchicalDataValue.value), hierarchicalDataValue.hierarchicalPath, hierarchicalDataValue.level);
        });
        var levelDetails = domainFilter.levelInfo.map(function (aLevel) {
            return new FilterModels_1.HierarchicalLevelDetail(aLevel.name, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.hierarchicalLevelSelectionState.convert(aLevel.levelSelectionState));
        });
        return new FilterModels_1.HierarchicalFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Hierarchical, this._registryId, domainFilter.dimensionName, domainFilter.hierarchyCaption, domainFilter.levels, levelDetails, appliedValues, domainFilter.isAllSelected);
    };
    FilterServiceImpl.prototype.convertRangeFilter = function (domainFilter) {
        var minValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.min);
        var maxValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.max);
        return new FilterModels_1.RangeFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Range, this._registryId, minValue, maxValue, domainFilter.includeNullValues);
    };
    FilterServiceImpl.prototype.convertRelativeDateFilter = function (domainFilter) {
        var anchorDateValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.anchorDate);
        return new FilterModels_1.RelativeDateFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_external_contract_js_1.FilterType.RelativeDate, this._registryId, anchorDateValue, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(domainFilter.periodType), InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateRangeType.convert(domainFilter.rangeType), domainFilter.rangeN);
    };
    FilterServiceImpl.prototype.convertCategoricalDomain = function (domain, domainType) {
        var values = domain.values.map(function (domainDv) {
            return DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainDv);
        });
        return new FilterModels_1.CategoricalDomain(values, domainType);
    };
    FilterServiceImpl.prototype.convertRangeDomain = function (domain, domainType) {
        var min = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domain.min);
        var max = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domain.max);
        return new FilterModels_1.RangeDomain(min, max, domainType);
    };
    FilterServiceImpl.prototype.convertAnchorDate = function (anchorDate) {
        // Converts a Date object into a string format that the server expects for date/time values.
        // If anchorDate doesn't represent a valid Date object, any of these would be NaN.
        var year = anchorDate.getUTCFullYear();
        var month = anchorDate.getUTCMonth() + 1;
        var day = anchorDate.getUTCDate();
        var hh = anchorDate.getUTCHours();
        var mm = anchorDate.getUTCMinutes();
        var sec = anchorDate.getUTCSeconds();
        if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hh) || isNaN(mm) || isNaN(sec)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidDateParameter, 'Invalid date parameter: anchorDate');
        }
        var result = year + "-" + month + "-" + day + " " + hh + ":" + mm + ":" + sec;
        return result;
    };
    FilterServiceImpl.prototype.apiFilterHandlerCheckForCommandError = function (serverPm) {
        if (!serverPm[InternalContract.ParameterId.ParameterError]) {
            return;
        }
        if (serverPm[InternalContract.ParameterId.InvalidFieldCaption]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidFilterFieldName, serverPm[InternalContract.ParameterId.InvalidFieldCaption]);
        }
        if (serverPm[InternalContract.ParameterId.InvalidValues]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidFilterFieldValue, serverPm[InternalContract.ParameterId.InvalidValues]);
        }
        if (serverPm[InternalContract.ParameterId.InvalidAggFieldName]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidAggregationFieldName, serverPm[InternalContract.ParameterId.InvalidAggFieldName]);
        }
        throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.ServerError, 'Server Error');
    };
    return FilterServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.FilterServiceImpl = FilterServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js":
/*!******************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var uuid_1 = __webpack_require__(/*! uuid */ "../api-shared-js/node_modules/uuid/dist/esm-browser/index.js");
var ApiShared_1 = __webpack_require__(/*! ../../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var GetDataModels_1 = __webpack_require__(/*! ../../Models/GetDataModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js");
var GetDataTableReaderModels_1 = __webpack_require__(/*! ../../Models/GetDataTableReaderModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js");
var DataValueFactory_1 = __webpack_require__(/*! ../../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var GetDataService_1 = __webpack_require__(/*! ../GetDataService */ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var GetDataServiceImpl = /** @class */ (function (_super) {
    __extends(GetDataServiceImpl, _super);
    function GetDataServiceImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // The extension/embedding instance uses the same cache for all DataTableReaders.
        _this.viewDataTableCacheId = uuid_1.v4();
        return _this;
    }
    Object.defineProperty(GetDataServiceImpl.prototype, "serviceName", {
        get: function () {
            return "get-data-service" /* GetData */;
        },
        enumerable: true,
        configurable: true
    });
    GetDataServiceImpl.prototype.getMaxRowLimit = function () {
        return 10000;
    };
    GetDataServiceImpl.prototype.getViewDataTableCacheId = function () {
        return this.viewDataTableCacheId;
    };
    GetDataServiceImpl.prototype.getLimitedMaxRows = function (requestedRows) {
        var rowCountLimit = this.getMaxRowLimit() + 1;
        return requestedRows > 0 && requestedRows < rowCountLimit ? requestedRows : rowCountLimit;
    };
    GetDataServiceImpl.prototype.getUnderlyingDataAsync = function (visualId, getType, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, maxRows, includeDataValuesOption) {
        var _a;
        var _this = this;
        // Create all of our parameters
        var summaryData = getType === GetDataService_1.GetDataType.Summary;
        var functionName = summaryData ? 'getSummaryDataAsync' : 'getUnderlyingDataAsync';
        var verb = summaryData ? api_internal_contract_js_1.VerbId.GetDataSummaryData : api_internal_contract_js_1.VerbId.GetUnderlyingData;
        var requestMaxRows = verb === api_internal_contract_js_1.VerbId.GetUnderlyingData ? this.getLimitedMaxRows(maxRows) : maxRows;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = functionName,
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases;
        parameters[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection;
        parameters[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns;
        parameters[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById);
        parameters[api_internal_contract_js_1.ParameterId.MaxRows] = requestMaxRows;
        parameters[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption);
        return this.execute(verb, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, responseData.isSummary);
        });
    };
    GetDataServiceImpl.prototype.getSummaryDataReaderAsync = function (visualId, pageRowCount, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSummaryDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSummaryDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getSummaryColumnsInfoAsync = function (visualId) {
        var _a;
        // Create all the parameters for GetDataType of Summary with 1 row, and only native values
        // Then return just the columns
        var verb = api_internal_contract_js_1.VerbId.GetDataSummaryData;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSummaryColumnsInfoAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = true,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = true,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = true,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = 1,
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeValuesOnly,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var underlyingDataTable = response.result;
            var dataTable = underlyingDataTable.data;
            var columns = dataTable.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
            return columns;
        });
    };
    GetDataServiceImpl.prototype.getSelectedMarksAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSelectedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetSelectedMarks, parameters).then(function (response) {
            var responseData = response.result;
            return {
                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); }),
            };
        });
    };
    GetDataServiceImpl.prototype.getHighlightedMarksAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getHighlightedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetHighlightedMarks, parameters).then(function (response) {
            var responseData = response.result;
            return {
                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); }),
            };
        });
    };
    GetDataServiceImpl.prototype.getDataSourceDataAsync = function (dataSourceId, ignoreAliases, maxRows, columnsToInclude, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDataSourceDataAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToInclude] = this.verifyIncludeColumnArray(columnsToInclude),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSourceData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getLogicalTableDataAsync = function (datasourceId, logicalTableId, ignoreAliases, maxRows, columnsToInclude, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTableDataAsync',
            _a[api_internal_contract_js_1.ParameterId.ColumnsToInclude] = columnsToInclude,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = datasourceId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTableData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getLogicalTableDataReaderAsync = function (datasourceId, logicalTableId, pageRowCount, ignoreAliases, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTableDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = datasourceId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTableDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getUnderlyingTableDataAsync = function (visualId, logicalTableId, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, maxRows, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTableDataAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTableData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getUnderlyingTableDataReaderAsync = function (visualId, logicalTableId, pageRowCount, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTableDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTableDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getPageAsync = function (tableId, pageNumber, pageSize) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getPageAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableId] = tableId,
            _a[api_internal_contract_js_1.ParameterId.DataRowIndex] = pageNumber * pageSize,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataTableReaderPage, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsPage(responseData, tableId === GetDataServiceImpl.summaryTableId ? true : false);
        });
    };
    GetDataServiceImpl.prototype.releaseAsync = function (tableId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'release',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableId] = tableId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ReleaseDataTableReader, parameters).then(function (response) {
            return;
        });
    };
    GetDataServiceImpl.prototype.verifyIncludeColumnArray = function (columns) {
        // columns must be a valid array
        if (!Array.isArray(columns)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'columnsToInclude and columnsToIncludeById must be valid arrays');
        }
        // Remove any duplicates from the input array
        var columnsAsSet = new Set(columns);
        return Array.from(columnsAsSet);
    };
    GetDataServiceImpl.prototype.processResultsTable = function (responseData, isSummary) {
        var headers = responseData.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
        // TODO This should be controlled by a flag indicating whether this api will respond marks info or not
        var marks;
        if (responseData.marks) {
            marks = responseData.marks.map(function (h) { return new GetDataModels_1.MarkInfo(h.type, h.color, h.tupleId); });
        }
        // Limit+1 is our sentinal that underlying data contains more rows than user is allowed to fetch.
        // Remove the last element so we always return MaxRowLimit
        var isTotalRowCountLimited = isSummary === false && responseData.dataTable.length === this.getMaxRowLimit() + 1;
        if (isTotalRowCountLimited) {
            responseData.dataTable.length -= 1;
        }
        var table = responseData.dataTable.map(function (row) {
            return row.map(function (cell, index) {
                return DataValueFactory_1.DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);
            });
        });
        if (marks) {
            return new GetDataModels_1.DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary, marks);
        }
        return new GetDataModels_1.DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary);
    };
    GetDataServiceImpl.prototype.processResultsPage = function (responseData, isSummary) {
        var headers = responseData.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
        var marks;
        if (responseData.marks) {
            marks = responseData.marks.map(function (h) { return new GetDataModels_1.MarkInfo(h.type, h.color, h.tupleId); });
        }
        var table = responseData.dataTable.map(function (row) {
            return row.map(function (cell, index) {
                return DataValueFactory_1.DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);
            });
        });
        if (marks) {
            return new GetDataModels_1.DataTable(table, headers, table.length, false, isSummary, marks);
        }
        return new GetDataModels_1.DataTable(table, headers, table.length, false, isSummary);
    };
    GetDataServiceImpl.summaryTableId = '';
    return GetDataServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.GetDataServiceImpl = GetDataServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js":
/*!***********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var NotificationServiceImplBase_1 = __webpack_require__(/*! ./NotificationServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js");
var NotificationServiceImpl = /** @class */ (function (_super) {
    __extends(NotificationServiceImpl, _super);
    function NotificationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NotificationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "notification-service" /* Notification */;
        },
        enumerable: true,
        configurable: true
    });
    return NotificationServiceImpl;
}(NotificationServiceImplBase_1.NotificationServiceImplBase));
exports.NotificationServiceImpl = NotificationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js":
/*!***************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Registration = /** @class */ (function () {
    function Registration(_filterFn, _callbackFn) {
        this._filterFn = _filterFn;
        this._callbackFn = _callbackFn;
        // Nothing Here
    }
    Registration.prototype.onNotification = function (notificationModel) {
        if (this._filterFn(notificationModel)) {
            this._callbackFn(notificationModel);
        }
    };
    return Registration;
}());
exports.Registration = Registration;
var NotificationServiceImplBase = /** @class */ (function () {
    function NotificationServiceImplBase(dispatcher) {
        this.dispatcher = dispatcher;
        this._handlers = {};
        this.dispatcher.registerNotificationHandler(this.onNotification.bind(this));
    }
    NotificationServiceImplBase.prototype.registerHandler = function (id, filterFn, handler) {
        var _this = this;
        var handlers = this._handlers[id] || new Array();
        var registration = new Registration(filterFn, handler);
        handlers.push(registration);
        this._handlers[id] = handlers;
        return function () { return _this.removeRegistration(id, registration); };
    };
    NotificationServiceImplBase.prototype.hasHandlersForNotificationType = function (id) {
        // eslint-disable-next-line no-prototype-builtins
        return this._handlers.hasOwnProperty(id);
    };
    NotificationServiceImplBase.prototype.onNotification = function (notification) {
        if (!this.hasHandlersForNotificationType(notification.notificationId)) {
            return;
        }
        // Go through and check for all the handlers of this particular notification
        this._handlers[notification.notificationId].forEach(function (h) { return h.onNotification(notification.data); });
    };
    NotificationServiceImplBase.prototype.removeRegistration = function (id, registration) {
        if (!this.hasHandlersForNotificationType(id)) {
            return;
        }
        this._handlers[id] = this._handlers[id].filter(function (reg) { return reg !== registration; });
    };
    return NotificationServiceImplBase;
}());
exports.NotificationServiceImplBase = NotificationServiceImplBase;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ParameterImpl_1 = __webpack_require__(/*! ../../Impl/ParameterImpl */ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ParametersServiceImpl = /** @class */ (function (_super) {
    __extends(ParametersServiceImpl, _super);
    function ParametersServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ParametersServiceImpl.prototype, "serviceName", {
        get: function () {
            return "parameters-service" /* Parameters */;
        },
        enumerable: true,
        configurable: true
    });
    ParametersServiceImpl.prototype.getParametersForSheetAsync = function (sheetPath) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getParametersForSheetAsync',
            _a[api_internal_contract_js_1.ParameterId.SheetPath] = sheetPath,
            _a);
        return this.getParametersAsync(parameters);
    };
    ParametersServiceImpl.prototype.getAllParametersAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getParametersForSheetAsync',
            _a);
        return this.getParametersAsync(parameters);
    };
    ParametersServiceImpl.prototype.getParametersAsync = function (inputParameters) {
        var _this = this;
        return this.execute(api_internal_contract_js_1.VerbId.GetParametersForSheet, inputParameters).then(function (response) {
            var result = response.result;
            return result.map(function (parameterInfo) {
                return new ParameterImpl_1.ParameterImpl(parameterInfo, _this._registryId);
            });
        });
    };
    ParametersServiceImpl.prototype.changeParameterValueAsync = function (fieldName, newValue) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'changeParameterValueAsync',
            _a[api_internal_contract_js_1.ParameterId.ParameterFieldName] = fieldName,
            _a[api_internal_contract_js_1.ParameterId.ParameterValue] = newValue,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ChangeParameterValue, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    ParametersServiceImpl.prototype.findParameterByNameAsync = function (name) {
        return this.findParameterAsync(name, undefined);
    };
    ParametersServiceImpl.prototype.findParameterByGlobalFieldNameAsync = function (fieldName) {
        return this.findParameterAsync(undefined, fieldName);
    };
    ParametersServiceImpl.prototype.findParameterAsync = function (name, fieldName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'findParameterAsync',
            _a);
        if (name !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.ParameterCaption] = name;
        }
        else if (fieldName !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.ParameterFieldName] = fieldName;
        }
        else {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'name or fieldName must be provided to find parameter');
        }
        return this.execute(api_internal_contract_js_1.VerbId.FindParameter, parameters).then(function (response) {
            var instanceOfParameterInfo = function (object) {
                return 'fieldName' in object;
            };
            // We need to check to see if we got a valid response back again
            if (instanceOfParameterInfo(response.result)) {
                var result = response.result;
                return new ParameterImpl_1.ParameterImpl(result, _this._registryId);
            }
            else {
                return undefined;
            }
        });
    };
    return ParametersServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ParametersServiceImpl = ParametersServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var SelectionModels_1 = __webpack_require__(/*! ../../Models/SelectionModels */ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var SelectionServiceImpl = /** @class */ (function (_super) {
    __extends(SelectionServiceImpl, _super);
    function SelectionServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SelectionServiceImpl.prototype, "serviceName", {
        get: function () {
            return "selection-service" /* Selection */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method to clear all the selected marks for the given worksheet.
     *
     * @param visualId
     */
    SelectionServiceImpl.prototype.clearSelectedMarksAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'clearSelectedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ClearSelectedMarks, parameters).then(function (response) {
            return; // Expecting an empty model and hence the void response.
        });
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param selectionCriteria
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByValueAsync = function (visualId, selectionCriterias, selectionUpdateType) {
        var _a;
        var _this = this;
        if (selectionCriterias.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Selection criteria missing for selecting marks by value');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionMarks(selectionCriterias);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByValueAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a);
        if (selectionModelContainer.hierModelArr && selectionModelContainer.hierModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.HierValSelectionModels] = selectionModelContainer.hierModelArr;
        }
        if (selectionModelContainer.quantModelArr && selectionModelContainer.quantModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.QuantRangeSelectionModels] = selectionModelContainer.quantModelArr;
        }
        if (selectionModelContainer.dimModelArr && selectionModelContainer.dimModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.DimValSelectionModels] = selectionModelContainer.dimModelArr;
        }
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            _this.apiFilterHandlerCheckForCommandError(response.result);
            return;
        });
    };
    /**
     * Method to execute hover actions and render tooltip for a given tuple representing a mark in the visualization.
     * If the tooltip parameter is included it will show the tooltip on hover. If not, no tooltip is shown.
     *
     * @param visualId
     * @param hoveredTuple
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    SelectionServiceImpl.prototype.hoverTupleAsync = function (visualId, hoveredTuple, tooltip, allowHoverActions) {
        var _a;
        var interactionModel = new SelectionModels_1.HoverTupleInteractionModel(visualId, this.ensureTupleIDIsNonNegative(hoveredTuple), tooltip, allowHoverActions);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'hoverTupleAsync',
            _a[api_internal_contract_js_1.ParameterId.HoverTupleInteraction] = interactionModel,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RaiseHoverTupleNotification, parameters).then(function (response) {
            return;
        });
    };
    /**
     * Method to modify selection, execute select actions and render tooltip for a given list of tuples representing a mark or marks in the visualization.
     * If the tooltip parameter is included it will show the tooltip on select. If not, no tooltip is shown.
     *
     * @param visualId
     * @param selectedTuples
     * @param selectOption
     * @param tooltip
     * @returns empty promise that resolves when the extension host has successfully been informed of the request and rejects on error
     */
    SelectionServiceImpl.prototype.selectTuplesAsync = function (visualId, selectedTuples, selectOption, tooltip) {
        var _a;
        var interactionModel = new SelectionModels_1.SelectTuplesInteractionModel(visualId, selectedTuples, selectOption, tooltip);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectTuplesAsync',
            _a[api_internal_contract_js_1.ParameterId.SelectTuplesInteraction] = interactionModel,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RaiseSelectTuplesNotification, parameters).then(function (response) {
            return;
        });
    };
    SelectionServiceImpl.prototype.apiFilterHandlerCheckForCommandError = function (serverPm) {
        if (!serverPm[api_internal_contract_js_1.ParameterId.ParameterError]) {
            return;
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionFieldName, serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionValue, serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionDate, serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]);
        }
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param MarkInfo
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByIdAsync = function (visualId, marks, selectionUpdateType) {
        var _a;
        if (marks.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Marks info missing for selecting marks by Id');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionIds(marks);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByIdAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a[api_internal_contract_js_1.ParameterId.Selection] = selectionModelContainer.selection,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
            // TODO Investigate the error response with multiple output params and throw error accordingly.
        });
    };
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionIds = function (marks) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < marks.length; i++) {
            var tupleId = marks[i].tupleId;
            if (tupleId !== undefined && tupleId !== null) {
                // If tuple id is provided use that instead of pair
                ids.push(tupleId.toString()); // collect the tuple ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'tupleId parsing error');
            }
        }
        if (ids.length !== 0) {
            // tuple ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'tuples';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to prepare the pres models for selection by values.
     *
     * Supports 3 types for selection:
     * 1) Hierarchical value based selection
     * 2) Range value based selection
     * 3) Dimension value based selection
     *
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionMarks = function (selectionCriterias) {
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < selectionCriterias.length; i++) {
            var st = selectionCriterias[i];
            if (!(st.fieldName && st.value !== undefined && st.value !== null)) {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'Selection Criteria parsing error');
            }
            var catRegex = new RegExp('([[A-Za-z0-9]+]).*', 'g');
            var rangeOption = st.value;
            if (catRegex.test(st.fieldName)) {
                // Hierarchical value selection
                var hierModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.hierModelArr.push(hierModel);
            }
            else if (rangeOption.min !== undefined && rangeOption.max !== undefined) {
                // Range value selection
                var quantModel = this.addToRangeParamsList(st.fieldName, rangeOption);
                selectionModelContainer.quantModelArr.push(quantModel);
            }
            else {
                // Dimension value selection
                var dimModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.dimModelArr.push(dimModel);
            }
        }
        return selectionModelContainer;
    };
    /**
     * Method to transform the key value pair into value based pres model object.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToParamsList = function (fieldName, value) {
        var valueSelectionModel = new SelectionModels_1.ValueSelectionModel();
        var markValues = [];
        if (value instanceof Array) {
            var valueArr = value;
            for (var i = 0; i < valueArr.length; i++) {
                markValues.push(Param_1.Param.serializeParameterValue(valueArr[i]));
            }
        }
        else {
            markValues.push(Param_1.Param.serializeParameterValue(value));
        }
        valueSelectionModel.qualifiedFieldCaption = fieldName;
        valueSelectionModel.selectValues = markValues;
        return valueSelectionModel;
    };
    /**
     * Method to transform the key value pair into range based selection pres model.
     *
     * TODO: Need to handle the parsing of date type values.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToRangeParamsList = function (fieldName, value) {
        var rangeSelectionModel = new SelectionModels_1.RangeSelectionModel();
        rangeSelectionModel.qualifiedFieldCaption = fieldName;
        if (value.max !== undefined && value.max !== null) {
            rangeSelectionModel.maxValue = Param_1.Param.serializeParameterValue(value.max);
        }
        if (value.min !== undefined && value.min !== null) {
            rangeSelectionModel.minValue = Param_1.Param.serializeParameterValue(value.min);
        }
        rangeSelectionModel.included = this.validateNullOptionType(value.nullOption);
        return rangeSelectionModel;
    };
    /**
     * Method to validate the selection update type.
     *
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.validateSelectionUpdateType = function (selectionUpdateType) {
        if (selectionUpdateType === Contract.SelectionUpdateType.Replace) {
            return api_internal_contract_js_1.SelectionUpdateType.Replace;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Add) {
            return api_internal_contract_js_1.SelectionUpdateType.Add;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Remove) {
            return api_internal_contract_js_1.SelectionUpdateType.Remove;
        }
        return api_internal_contract_js_1.SelectionUpdateType.Replace;
    };
    /**
     * Method to validate the include type for range selection.
     *
     * @param nullOption
     */
    SelectionServiceImpl.prototype.validateNullOptionType = function (nullOption) {
        if (nullOption) {
            if (nullOption === Contract.FilterNullOption.NullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNull;
            }
            else if (nullOption === Contract.FilterNullOption.NonNullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNonNull;
            }
            else if (nullOption === Contract.FilterNullOption.AllValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
            }
        }
        return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
    };
    SelectionServiceImpl.prototype.ensureTupleIDIsNonNegative = function (tupleId) {
        if (tupleId && tupleId > 0) {
            return tupleId;
        }
        // 0 will not refer to a valid tuple (since tuple ids are 1-based),
        // but can be used for clearing the current hover or selection
        return 0;
    };
    return SelectionServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.SelectionServiceImpl = SelectionServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var EnumConverter_1 = __webpack_require__(/*! ../../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/**
 * Each ServceImpl should extend this base class for the sake of
 * proper error handling.  This base handles the conversion
 * from internal errors to external errors that we throw to developers
 */
var ServiceImplBase = /** @class */ (function () {
    function ServiceImplBase(_dispatcher, _registryId) {
        this._dispatcher = _dispatcher;
        this._registryId = _registryId;
    }
    ServiceImplBase.prototype.execute = function (verb, params) {
        return this._dispatcher.execute(verb, params).catch(function (error) {
            // Any internal error that comes from the dispatcher should be converted
            // to an external error using the enum mapper for error codes.
            var internalError = error;
            var externalErrorCode = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.errorCode.convert(internalError.errorCode, EnumConverter_1.ShouldThrow.No);
            throw new TableauError_1.TableauError(externalErrorCode, internalError.message);
        });
    };
    return ServiceImplBase;
}());
exports.ServiceImplBase = ServiceImplBase;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var SizeServiceImpl = /** @class */ (function (_super) {
    __extends(SizeServiceImpl, _super);
    function SizeServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SizeServiceImpl.prototype, "serviceName", {
        get: function () {
            return "size-service" /* Size */;
        },
        enumerable: true,
        configurable: true
    });
    SizeServiceImpl.prototype.changeSizeAsync = function (name, newSize) {
        var _a;
        var _b, _c, _d, _e;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'changeSizeAsync',
            _a[api_internal_contract_js_1.ParameterId.SheetName] = name,
            _a[api_internal_contract_js_1.ParameterId.MinHeight] = ((_b = newSize.minSize) === null || _b === void 0 ? void 0 : _b.height) || 0,
            _a[api_internal_contract_js_1.ParameterId.MinWidth] = ((_c = newSize.minSize) === null || _c === void 0 ? void 0 : _c.width) || 0,
            _a[api_internal_contract_js_1.ParameterId.MaxHeight] = ((_d = newSize.maxSize) === null || _d === void 0 ? void 0 : _d.height) || 0,
            _a[api_internal_contract_js_1.ParameterId.MaxWidth] = ((_e = newSize.maxSize) === null || _e === void 0 ? void 0 : _e.width) || 0,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SetSheetSize, parameters).then(function (_response) {
            return;
        });
    };
    return SizeServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.SizeServiceImpl = SizeServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js":
/*!**************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var StoryActivationServiceImpl = /** @class */ (function (_super) {
    __extends(StoryActivationServiceImpl, _super);
    function StoryActivationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StoryActivationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "story-activation-service" /* StoryActivation */;
        },
        enumerable: true,
        configurable: true
    });
    StoryActivationServiceImpl.prototype.activateNextStoryPointAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivateNextStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateNextStoryPointAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.activatePreviousStoryPointAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivatePreviousStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activatePreviousStoryPointAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.activateStoryPointAsync = function (index) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivateStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateStoryPointAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.StoryPointIndex] = index;
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.revertStoryPointAsync = function (index) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RevertStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'revertStoryPointAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.StoryPointIndex] = index;
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    return StoryActivationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.StoryActivationServiceImpl = StoryActivationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/VisualModelServiceImpl.js":
/*!**********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/VisualModelServiceImpl.js ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var VisualModelServiceImpl = /** @class */ (function (_super) {
    __extends(VisualModelServiceImpl, _super);
    function VisualModelServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(VisualModelServiceImpl.prototype, "serviceName", {
        get: function () {
            return "visual-model-service" /* VisualModel */;
        },
        enumerable: true,
        configurable: true
    });
    VisualModelServiceImpl.prototype.getVisualSpecificationAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getVisualSpecificationAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = visualId.worksheet,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetVisualSpecification, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    return VisualModelServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.VisualModelServiceImpl = VisualModelServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js":
/*!**************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CustomViewImpl_1 = __webpack_require__(/*! ../../Impl/CustomViewImpl */ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var VizServiceImpl = /** @class */ (function (_super) {
    __extends(VizServiceImpl, _super);
    function VizServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(VizServiceImpl.prototype, "serviceName", {
        get: function () {
            return "viz-service" /* Viz */;
        },
        enumerable: true,
        configurable: true
    });
    VizServiceImpl.prototype.createVizImageAsync = function (inputSpec) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'createVizImageAsync',
            _a[api_internal_contract_js_1.ParameterId.VizAPIInputJson] = JSON.stringify(inputSpec),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.VizAPI, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    VizServiceImpl.prototype.activateSheetAsync = function (name) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateSheetAsync',
            _a[api_internal_contract_js_1.ParameterId.SwitchToSheetName] = name,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ActivateSheet, parameters).then(function () {
            return;
        });
    };
    VizServiceImpl.prototype.getCustomViewsAsync = function () {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCustomViewsAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetCustomViews, parameters).then(function (response) {
            var customViews = response.result;
            return customViews.map(function (customView) {
                return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
            });
        });
    };
    VizServiceImpl.prototype.showCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'showCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName || '',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ShowCustomView, parameters).then(function (response) {
            var _a;
            var customView = response.result;
            return ((_a = customView) === null || _a === void 0 ? void 0 : _a.luid) ? new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId) : undefined;
        });
    };
    VizServiceImpl.prototype.removeCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RemoveCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.saveCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        // CustomViewIsDefault is a required parameter, but our API has not been updated to allow it to be specified yet.
        // We should add a 'default' parameter to the interface.
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'saveCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsDefault] = false,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SaveWorkbookAsCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.setActiveCustomViewAsDefaultAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'setActiveCustomViewAsDefaultAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SetActiveCustomViewAsDefault, parameters).then(function () {
            return;
        });
    };
    VizServiceImpl.prototype.saveAsync = function (customView) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'saveAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewLuid] = customView.luid,
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customView.name,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsDefault] = customView.isDefault,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsPublic] = customView.shared,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.UpdateCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.getCurrentSrcAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCurrentSrcAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetCurrentSrc, parameters).then(function (response) { return response.result; });
    };
    return VizServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.VizServiceImpl = VizServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ZoneServiceImpl = /** @class */ (function (_super) {
    __extends(ZoneServiceImpl, _super);
    function ZoneServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ZoneServiceImpl.prototype, "serviceName", {
        get: function () {
            return "zone-service" /* Zone */;
        },
        enumerable: true,
        configurable: true
    });
    ZoneServiceImpl.prototype.setVisibilityAsync = function (dashboard, dashboardZoneMap, zoneVisibilityMap) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'setVisibilityAsync',
            _a[api_internal_contract_js_1.ParameterId.Dashboard] = dashboard,
            _a[api_internal_contract_js_1.ParameterId.ZoneIdsVisibilityMap] = {},
            _a);
        // zoneVisibilityMap can be either an object or a Map - convert it to a Map
        var parameterAsMap = Param_1.Param.convertParameterToMap(zoneVisibilityMap, 'zoneVisibilityMap');
        parameterAsMap.forEach(function (value, key) {
            ErrorHelpers_1.ErrorHelpers.verifyZoneIsValid(dashboardZoneMap, Number.parseInt(key, 10));
            ErrorHelpers_1.ErrorHelpers.verifyEnumValue(value, api_external_contract_js_1.DashboardObjectVisibilityType, 'DashboardObjectVisibilityType');
            parameters[api_internal_contract_js_1.ParameterId.ZoneIdsVisibilityMap][key] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.setVisibilityType.convert(value);
        });
        return this.execute(api_internal_contract_js_1.VerbId.SetZoneVisibility, parameters).then(function (response) {
            return;
        });
    };
    ZoneServiceImpl.prototype.moveAndResizeAsync = function (dashboard, dashboardZoneMap, dashboardObjectPositionAndSizeUpdateArray) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.Dashboard] = dashboard,
            _a[api_internal_contract_js_1.ParameterId.DashboardObjectPositionAndSizeUpdateList] = dashboardObjectPositionAndSizeUpdateArray,
            _a);
        dashboardObjectPositionAndSizeUpdateArray.forEach(function (dashboardObject) {
            ErrorHelpers_1.ErrorHelpers.verifyZoneIsValidAndFloating(dashboardZoneMap, dashboardObject.dashboardObjectID);
            ErrorHelpers_1.ErrorHelpers.verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate(dashboardObject);
        });
        return this.execute(api_internal_contract_js_1.VerbId.MoveAndResizeZones, parameters).then(function (response) {
            return;
        });
    };
    return ZoneServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ZoneServiceImpl = ZoneServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/TableSummary.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/TableSummary.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a table summary.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var TableSummary = /** @class */ (function () {
    function TableSummary(_tableInfo) {
        this._tableInfo = _tableInfo;
    }
    Object.defineProperty(TableSummary.prototype, "name", {
        get: function () {
            return this._tableInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "id", {
        get: function () {
            return this._tableInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "connectionId", {
        get: function () {
            return this._tableInfo.connectionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "customSQL", {
        get: function () {
            return this._tableInfo.customSQL;
        },
        enumerable: true,
        configurable: true
    });
    return TableSummary;
}());
exports.TableSummary = TableSummary;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/TableauError.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/TableauError.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Custom error class that extends the default JavaScript Error object.
 * This allows us to provide a field with a specific error code
 * so that developers can more easily programmatically respond
 * to error scenarios.
 */
var TableauError = /** @class */ (function (_super) {
    __extends(TableauError, _super);
    function TableauError(_errorCode, message) {
        var _this = _super.call(this, _errorCode + ": " + message) || this;
        _this._errorCode = _errorCode;
        /*tslint:disable-next-line */
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        // Error inheritance does not work propertly when compiling to ES5, this is a workaround to force
        // the proto chain to be built correctly.  See the github link above for details.
        Object.setPrototypeOf(_this, TableauError.prototype);
        return _this;
    }
    Object.defineProperty(TableauError.prototype, "errorCode", {
        get: function () {
            return this._errorCode;
        },
        enumerable: true,
        configurable: true
    });
    return TableauError;
}(Error));
exports.TableauError = TableauError;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var GetDataModels_1 = __webpack_require__(/*! ../Models/GetDataModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js");
/**
 * In version 2 of the interface, we should collapse value into nativeValue, and do all this work over
 * in the platform.
 */
var DataValueFactory = /** @class */ (function () {
    function DataValueFactory() {
    }
    DataValueFactory.MakeParameterDataValue = function (internalDataValue, dataType) {
        // Parameter values are all strings, convert from string to value
        return new GetDataModels_1.DataValue(internalDataValue.value, InternalContract.DataTypeConverter.convertStringValueToNativeValue(internalDataValue.value, dataType), internalDataValue.formattedValue);
    };
    DataValueFactory.MakeFilterDataValue = function (internalDataValue) {
        // Filters already have native type in value, just use that for nativeValue also
        return new GetDataModels_1.DataValue(internalDataValue.value, internalDataValue.value, internalDataValue.formattedValue);
    };
    DataValueFactory.MakeTableDataValue = function (internalDataValue, dataType) {
        // DataTables contain boolean | number | string | date as string | '%null%
        // convertValueToNativeValue converts dates as string to dates, and any special to null
        // (boolean, numbers, strings are passed through)
        // Because of IncludeDataValuesOption - we can have undefined values, which are different than any special
        return new GetDataModels_1.DataValue(internalDataValue.value, internalDataValue.value !== undefined
            ? InternalContract.DataTypeConverter.convertValueToNativeValue(internalDataValue.value, dataType)
            : undefined, internalDataValue.formattedValue);
    };
    return DataValueFactory;
}());
exports.DataValueFactory = DataValueFactory;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/Deferred.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * A Promise wrapper class allowing for resolving/rejecting the Promise outside the context of its constructor.
 *
 * @export
 * @class Deferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 * @link https://stackoverflow.com/a/34637436
 */
var Deferred = /** @class */ (function () {
    /**
     * Creates an instance of Deferred.
     */
    function Deferred() {
        var _this = this;
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        /**
         * Gets the Promise.
         *
         * @readonly
         * @type {Promise<TResolve>}
         */
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resolves the wrapped Promise.
     *
     * @param {(TResolve | PromiseLike<TResolve>)} response The argument to be resolved by the Promise.
     * @returns {*}  {void}
     */
    Deferred.prototype.resolve = function (response) {
        if (!this._resolve) {
            return;
        }
        this._resolve(response);
    };
    /**
     *
     *
     * @param {TReject} [reason] The reason why the Promise rejected.
     * @returns {*}  {void}
     */
    Deferred.prototype.reject = function (reason) {
        if (!this._reject) {
            return;
        }
        this._reject(reason);
    };
    return Deferred;
}());
exports.Deferred = Deferred;
exports.UnregisterTimeoutInMilliseconds = 30000;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * This class converts from a source enum value to destination enum
 * value given a mapping from source to destination when constructed.
 *
 * Note: This exact same class is defined in api-core.  Given its small
 * nature, it is not worth having in a separate project to share this between
 * api-core and api-shared.  If more utility functionality is added that is used by api-core
 * and api-shared but has no other dependecies, a utiltity project might be merited,
 * and this class could be moved.
 */
var EnumConverter = /** @class */ (function () {
    function EnumConverter(_mappings, _defaultVal) {
        this._mappings = _mappings;
        this._defaultVal = _defaultVal;
    }
    EnumConverter.prototype.convert = function (enumVal, throwIfMissing) {
        if (throwIfMissing === void 0) { throwIfMissing = ShouldThrow.Yes; }
        if (this._mappings.hasOwnProperty(enumVal)) {
            return this._mappings[enumVal];
        }
        if (this._defaultVal !== undefined && throwIfMissing !== ShouldThrow.Yes) {
            return this._defaultVal;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Enum Mapping not found for: " + enumVal);
    };
    return EnumConverter;
}());
exports.EnumConverter = EnumConverter;
var ShouldThrow;
(function (ShouldThrow) {
    ShouldThrow["Yes"] = "yes";
    ShouldThrow["No"] = "no";
})(ShouldThrow = exports.ShouldThrow || (exports.ShouldThrow = {}));


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Param_1 = __webpack_require__(/*! ./Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
/**
 * This class is used to construct common errors throughout the external
 * projects (api-shared, extensions-api, etc.).  It has some duplication with
 * the ErrorHelpers class in api-core, but is separate due to the need to throw
 * an external TableauError vs. an InternalTableauError.
 */
var ErrorHelpers = /** @class */ (function () {
    function ErrorHelpers() {
    }
    /**
     * Throws with code InternalError.
     *
     * @param apiName name of api that was called.
     */
    ErrorHelpers.apiNotImplemented = function (apiName) {
        return new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, apiName + " API not yet implemented.");
    };
    /**
     * Throws an internal error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyInternalValue = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, argumentValue + " is invalid value for: " + argumentName);
        }
    };
    /**
     * Throws an InvalidParameter error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyParameter = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " is invalid value for parameter: " + argumentName);
        }
    };
    /**
     * Throws an InvalidParameter error if argument is not the specified type.
     * For objects, it just tests that it is an object
     *
     * @param argumentValue value to verify
     * @param expectedType expected result of typeof
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyParameterType = function (argumentValue, expectedType, argumentName) {
        if (typeof argumentValue !== expectedType) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " has invalid type for parameter: " + argumentName + ".");
        }
    };
    /**
     * Throws an InvalidParameter error if argument is empty string, null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyStringParameter = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined || argumentValue === '') {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " is invalid value for paramter: " + argumentName);
        }
    };
    /**
     * Verifies passed value is a valid value for that enum.
     * Throws an InvalidParameter error if the enum value is not valid.
     *
     * String enums are {string : string} dictionaries which are not reverse mappable
     * This is an ugly workaround
     *
     * @param enumValue value to verify
     * @param enumType enum to verify against
     * @param enumName enum name for clear error message
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyEnumValue = function (enumValue, enumType, enumName) {
        var isValid = false;
        Object.keys(enumType).forEach(function (enumKey) {
            if (enumType[enumKey] === enumValue.toString()) {
                isValid = true;
            }
        });
        if (!isValid) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, enumValue + " is invalid value for enum: " + enumName + ".");
        }
    };
    /**
     * Verifies passed value is between [min, max) ... min <= value < max
     * Throws an InvalidParameter error if the value is not valid.
     *
     *
     * @param value value to verify
     * @param min   value must be >= min
     * @param max   value must be < max
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyRange = function (value, min, max) {
        var isValid = min <= value && value < max;
        if (!isValid) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, value + " is invalid value for range: [" + min + ".." + max + ")");
        }
    };
    /**
     * Verifies the params min and max for applying range filter.
     * Throws with error code InvalidParameter if range is invalid.
     *
     * @param min range min
     * @param max range max
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyRangeParamType = function (min, max) {
        if (!min && !max) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, at least one of min or max is required.');
        }
        if (min && !Param_1.Param.isTypeNumber(min) && !Param_1.Param.isTypeDate(min)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, only Date and number are allowed for parameter min.');
        }
        if (max && !Param_1.Param.isTypeNumber(max) && !Param_1.Param.isTypeDate(max)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, only Date and number are allowed for parameter max.');
        }
        if (min && max && typeof min !== typeof max) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, parameters min and max should be of the same type.');
        }
    };
    /**
     * Verifies that the zoneId is present in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    ErrorHelpers.verifyZoneIsValid = function (dashboardZoneMap, zoneID) {
        if (dashboardZoneMap.has(zoneID)) {
            return;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value, Dashboard Object Id: " + zoneID + " is not present in dashboard.");
    };
    /**
     * Verifies that the zone is present and floating in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    ErrorHelpers.verifyZoneIsValidAndFloating = function (dashboardZoneMap, zoneID) {
        if (dashboardZoneMap.has(zoneID) && dashboardZoneMap.get(zoneID).isFloating) {
            return;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value, Dashboard Object Id: " + zoneID + " is not present or is a fixed zone in the dashboard.");
    };
    /**
     * Verifies that width and height are > 0 for each DashboardObjectPositionAndSizeUpdate object.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardObjectPositionAndSizeUpdate DashboardObjectPositionAndSizeUpdate object for which width and height will be validated
     */
    ErrorHelpers.verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate = function (dashboardObjectPositionAndSizeUpdate) {
        if (dashboardObjectPositionAndSizeUpdate.width < 0 || dashboardObjectPositionAndSizeUpdate.height < 0) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value for dashboard object ID " + dashboardObjectPositionAndSizeUpdate.dashboardObjectID + ":" +
                " negative widths and heights are not allowed.");
        }
    };
    /**
     * Verifies is the given sheet name is in the list of sheets names allowed for exporting.
     * Throws with error code InvalidParameter if the condition above is false.
     *
     * @param exportableSheetNames A list of sheet names allowed for exporting
     * @param sheetName the name of the sheet selected for export
     */
    ErrorHelpers.verifySheetName = function (exportableSheetNames, sheetName) {
        if (!exportableSheetNames.includes(sheetName)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidSelectionSheet, 'sheetName parameter must belong to a worksheet within the current view');
        }
    };
    /**
     * Verifies the ExportDataOptions object
     * Throws with error code InvalidParameter if the parameter is not of ExportDataOptions type.
     *
     * @param options The ExportDataOptions object used to configure the output CSV file for exportDataAsync.
     */
    ErrorHelpers.verifyExportDataOptions = function (options) {
        if ((!Param_1.Param.isNullOrUndefined(options.ignoreAliases) && !Param_1.Param.isTypeBool(options.ignoreAliases)) ||
            (!Param_1.Param.isNullOrUndefined(options.columnsToIncludeById) && !Array.isArray(options.columnsToIncludeById)))
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'options paramater must be of type ExportDataOptions');
    };
    /**
     * Verifies if the sheet names are included in any of the export scenarios.
     * Throws with error code InvalidParameter if the parameter is not an array.
     * Throws with error code InvalidSelectionSheet if there are array entries that dont exist or if there is mixing between sheets from the dashboard and sheet from the workbook.
     *
     * @param sheetNames List of sheet names selected for exporting.
     * @param exportScenarios an object containing the current sheet name, exportable sheets from the dashboard, and exportable sheets from the workbook.
     */
    ErrorHelpers.verifySheetNamesForPDFAndPPT = function (sheetNames, exportScenarios) {
        if (!Array.isArray(sheetNames))
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'sheetNames parameter must be an array');
        if (sheetNames.length === 0)
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'sheetNames should not be empty');
        var isIncludedInDashboard = sheetNames.every(function (sheetName) {
            return exportScenarios.exportableSheetNamesFromDashboard.includes(sheetName);
        });
        if (isIncludedInDashboard) {
            return;
        }
        var isIncludedInWorkbook = sheetNames.every(function (sheetName) {
            return exportScenarios.exportableSheetNamesFromWorkbook.includes(sheetName);
        });
        if (isIncludedInWorkbook) {
            return;
        }
        var isCurrentSheet = sheetNames.length === 1 && sheetNames[0] === exportScenarios.currentSheetName;
        if (isCurrentSheet) {
            return;
        }
        // Export requirement: all sheet names must be included in the list of exportable sheets in the dashboard or
        // all sheet names must be included in the list of exportable sheets in the workbook, or the sheet name is the current sheet
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidSelectionSheet, 'sheetNames parameter must have all its entries be exportable sheet names from the dashboard or all its entries be exportable sheet names from the workbook');
    };
    /**
     * Verifies the external ExportPDFOptions object's properties.
     * Throws with error code InvalidParameter if the parameter is not of external ExportPDFOptions type.
     *
     * @param options The external user-facing ExportPDFOptions object used to configure the output PDF file for exportPDFAsync.
     */
    ErrorHelpers.verifyExportPDFOptions = function (options) {
        try {
            this.verifyEnumValue(options.orientation, api_external_contract_js_1.PrintOrientation, 'PrintOrientation');
            this.verifyEnumValue(options.pageSize, api_external_contract_js_1.PrintPageSize, 'PrintPageSize');
            this.verifyEnumValue(options.scaling, api_external_contract_js_1.PrintScaling, 'PrintScaling');
        }
        catch (_a) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'options parameter must be of type ExportPDFOptions');
        }
    };
    return ErrorHelpers;
}());
exports.ErrorHelpers = ErrorHelpers;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Helper methods for Export APIs.
 *
 * @class ExportHelpers
 */
var ExportHelpers = /** @class */ (function () {
    function ExportHelpers() {
    }
    /**
     * Modifies the internal ExportPDFOptions' properties based on the given PDF export configuration.
     * This method will construct the internal ExportPDFOptions identically to how the 'Export PDF' dialog constructs the ExportPdfOptionsPresModel.
     * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.
     * @param sheetNames The list of sheets selected for export.
     */
    ExportHelpers.updateInternalExportPDFOptions = function (internalExportPdfOptions, externalExportPdfOptions, sheetNames) {
        internalExportPdfOptions.currentSheet = sheetNames[0];
        this.updateExportLayoutOptions(internalExportPdfOptions, externalExportPdfOptions);
        this.updateSheetOptions(internalExportPdfOptions, sheetNames);
    };
    /**
     * Helper method for updateInternalExportPDFOptions.
     * Modifies the exportLayoutOptions property of the internal ExportPDFOptions based on the external ExportPDFOptions.
     * See the getExportLayoutOptions method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.
     */
    ExportHelpers.updateExportLayoutOptions = function (internalExportPdfOptions, externalExportPdfOptions) {
        var exportLayoutOptions = internalExportPdfOptions.exportLayoutOptions;
        // setting the image height and width properties to their default values
        exportLayoutOptions.imageHeight = this.DefaultLayoutOptions.imageHeight;
        exportLayoutOptions.imageWidth = this.DefaultLayoutOptions.imageWidth;
        //  setting the orientation value for the exportLayoutOptions
        switch (externalExportPdfOptions.orientation) {
            case api_external_contract_js_1.PrintOrientation.Landscape:
                exportLayoutOptions.pageOrientationOption = api_internal_contract_js_1.PageOrientation.Landscape;
                break;
            case api_external_contract_js_1.PrintOrientation.Portrait:
                exportLayoutOptions.pageOrientationOption = api_internal_contract_js_1.PageOrientation.Portrait;
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid orientation for ExportPDFOption');
        }
        // setting the page size value for the exportLayoutOptions
        switch (externalExportPdfOptions.pageSize) {
            case api_external_contract_js_1.PrintPageSize.A3:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A3;
                break;
            case api_external_contract_js_1.PrintPageSize.A4:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A4;
                break;
            case api_external_contract_js_1.PrintPageSize.A5:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A5;
                break;
            case api_external_contract_js_1.PrintPageSize.B4:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.B4;
                break;
            case api_external_contract_js_1.PrintPageSize.B5:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.B5;
                break;
            case api_external_contract_js_1.PrintPageSize.Executive:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Executive;
                break;
            case api_external_contract_js_1.PrintPageSize.Folio:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Folio;
                break;
            case api_external_contract_js_1.PrintPageSize.Ledger:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Ledger;
                break;
            case api_external_contract_js_1.PrintPageSize.Legal:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Legal;
                break;
            case api_external_contract_js_1.PrintPageSize.Letter:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Letter;
                break;
            case api_external_contract_js_1.PrintPageSize.Note:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Note;
                break;
            case api_external_contract_js_1.PrintPageSize.Quarto:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Quarto;
                break;
            case api_external_contract_js_1.PrintPageSize.Statement:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Statement;
                break;
            case api_external_contract_js_1.PrintPageSize.Tabloid:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Tabloid;
                break;
            case api_external_contract_js_1.PrintPageSize.Unspecified:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Unspecified;
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid pageSize for ExportPDFOption');
        }
        // setting the scaling values for the exportLayoutOptions
        switch (externalExportPdfOptions.scaling) {
            case api_external_contract_js_1.PrintScaling.AtMost1PageHigh:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitOneHigh);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost1PageWide:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitOneWide);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost2PagesHigh:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitTwoHigh);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost2PagesWide:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitTwoWide);
                break;
            case api_external_contract_js_1.PrintScaling.Automatic:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePctAuto);
                break;
            case api_external_contract_js_1.PrintScaling.Perc100:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct100);
                break;
            case api_external_contract_js_1.PrintScaling.Perc200:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct200);
                break;
            case api_external_contract_js_1.PrintScaling.Perc25:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct25);
                break;
            case api_external_contract_js_1.PrintScaling.Perc400:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct400);
                break;
            case api_external_contract_js_1.PrintScaling.Perc50:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct50);
                break;
            case api_external_contract_js_1.PrintScaling.Perc60:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct60);
                break;
            case api_external_contract_js_1.PrintScaling.Perc75:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct75);
                break;
            case api_external_contract_js_1.PrintScaling.Perc80:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct80);
                break;
            case api_external_contract_js_1.PrintScaling.Perc90:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct90);
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid scaling for ExportPDFOption');
        }
    };
    /**
     * Helper method for updateInternalExportPDFOptions.
     * Modifies the sheetOptions property of the internal ExportPDFOptions based on the sheets selected for export.
     * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param sheetNames The list of sheets selected for export.
     */
    ExportHelpers.updateSheetOptions = function (internalExportPdfOptions, sheetNames) {
        var exportLayoutOptions = internalExportPdfOptions.exportLayoutOptions, sheetOptions = internalExportPdfOptions.sheetOptions;
        // updating the export layouts options for each sheet and selecting sheet for export if included in list
        for (var _i = 0, sheetOptions_1 = sheetOptions; _i < sheetOptions_1.length; _i++) {
            var sheetOption = sheetOptions_1[_i];
            sheetOption.exportLayoutOptions = exportLayoutOptions;
            sheetOption.isSelected = sheetNames.includes(sheetOption.sheet);
        }
    };
    /**
     * Helper method for updateExportLayoutOptons.
     * This method is a spoof of the getFitAndScaleValues method used in @browser-clients/export-pdf-options to set the exportLayoutOptions' scaling properties.
     * In the future, this file should be refactored to import the method directly from @browser-clients/export-pdf-options.
     *
     * @param scalingSelection string used for setting the exportLayoutOptions based on the PrintScaling property from the ExternalExportPDFOptions.
     * @param exportLayoutOptions the ExportLayoutOptions used by the internal ExportPDFOptions pres model.
     */
    ExportHelpers.setFitAndScaleValues = function (exportLayoutOptions, scalingSelection) {
        var _a;
        var _b = this.DefaultLayoutOptions, pageFitHorizontal = _b.pageFitHorizontal, pageFitVertical = _b.pageFitVertical, pageScaleMode = _b.pageScaleMode, pageScalePercent = _b.pageScalePercent;
        var fitMatch = this.fitRegex.exec(scalingSelection);
        var percentMatch = this.pctRegex.exec(scalingSelection);
        if (fitMatch) {
            _a = fitMatch.slice(1).map(function (value) { return Number(value); }), pageFitHorizontal = _a[0], pageFitVertical = _a[1];
            pageScaleMode = api_internal_contract_js_1.ScaleMode.ScaleFitPages;
        }
        else if (percentMatch) {
            pageScalePercent = percentMatch.slice(1).map(function (value) { return Number(value); })[0];
            pageScaleMode = api_internal_contract_js_1.ScaleMode.ScalePercentage;
        }
        // getFitAndScaleValues returns the properties below, but instead this method will set them.
        exportLayoutOptions.pageFitHorizontal = pageFitHorizontal;
        exportLayoutOptions.pageFitVertical = pageFitVertical;
        exportLayoutOptions.pageScaleMode = pageScaleMode;
        exportLayoutOptions.pageScalePercent = pageScalePercent;
    };
    ExportHelpers.DefaultDataOptions = {
        ignoreAliases: false,
        columnsToIncludeById: [],
    };
    ExportHelpers.DefaultPDFOptions = {
        scaling: api_external_contract_js_1.PrintScaling.Automatic,
        pageSize: api_external_contract_js_1.PrintPageSize.Letter,
        orientation: api_external_contract_js_1.PrintOrientation.Portrait,
    };
    ExportHelpers.DefaultLayoutOptions = {
        imageHeight: 0,
        imageWidth: 0,
        pageFitHorizontal: 1,
        pageFitVertical: 1,
        pageOrientationOption: api_internal_contract_js_1.PageOrientation.Portrait,
        pageScaleMode: api_internal_contract_js_1.ScaleMode.ScaleAuto,
        pageScalePercent: 100,
        pageSizeOption: api_internal_contract_js_1.PageSizeOption.Letter,
    };
    ExportHelpers.fitRegex = new RegExp('fit([0-9]+)x([0-9]+)');
    ExportHelpers.pctRegex = new RegExp('pct([0-9]+)');
    return ExportHelpers;
}());
exports.ExportHelpers = ExportHelpers;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/Param.js":
/*!*********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/Param.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ./ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param = /** @class */ (function () {
    function Param() {
    }
    /**
     * serializes the date into the format that the server expects.
     * @param date the date to serialize
     */
    Param.serializeDateForPlatform = function (date) {
        var year = date.getUTCFullYear();
        var month = date.getUTCMonth() + 1;
        var day = date.getUTCDate();
        var hh = date.getUTCHours();
        var mm = date.getUTCMinutes();
        var sec = date.getUTCSeconds();
        return year + "-" + month + "-" + day + " " + hh + ":" + mm + ":" + sec;
    };
    Param.serializeBooleanForPlatform = function (bool) {
        return bool ? 'true' : 'false';
    };
    Param.serializeNumberForPlatform = function (num) {
        return num.toString(10);
    };
    /**
     * Verifies the input is a number
     */
    /* tslint:disable-next-line:no-any */
    Param.isTypeNumber = function (input) {
        return typeof input === 'number' || input instanceof Number;
    };
    /**
     * Verifies the input is a Date
     */
    /* tslint:disable-next-line:no-any */
    Param.isTypeDate = function (input) {
        return input instanceof Date;
    };
    /* tslint:disable-next-line:no-any */
    Param.isTypeString = function (input) {
        return typeof input === 'string' || input instanceof String;
    };
    /* tslint:disable-next-line:no-any */
    Param.isTypeBool = function (input) {
        return typeof input === 'boolean' || input instanceof Boolean;
    };
    /**
     * Determines if the input is null or undefined
     */
    /* tslint:disable-next-line:no-any */
    Param.isNullOrUndefined = function (input) {
        return input === null || input === undefined;
    };
    /* tslint:disable-next-line:no-any */
    Param.serializeParameterValue = function (value) {
        if (Param.isTypeNumber(value)) {
            return Param.serializeNumberForPlatform(value);
        }
        else if (Param.isTypeDate(value)) {
            return Param.serializeDateForPlatform(value);
        }
        else if (Param.isTypeBool(value)) {
            return Param.serializeBooleanForPlatform(value);
        }
        else if (Param.isTypeString(value)) {
            return value;
        }
        else {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Unexpected invalid value for: " + value);
        }
    };
    /**
     * Verifies that the parameter is already a Map, or converts an object to a Map.
     * If the parameter is an object, we convert it to a Map using Object.entries.
     * @throws if the parameter is not an object or Map
     */
    // tslint:disable-next-line:no-any
    Param.convertParameterToMap = function (param, paramName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(param, 'object', paramName);
        if (Array.isArray(param)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, "Expecting object or Map for: " + paramName + ".");
        }
        return param instanceof Map ? param : new Map(Object.entries(param));
    };
    /* tslint:disable-next-line:no-any */
    Param.tryParseNumber = function (value) {
        if (Param.isNullOrUndefined(value)) {
            return { success: false };
        }
        if (Param.isTypeNumber(value)) {
            return { parsed: value, success: true };
        }
        var valueString = value.toString();
        if (valueString === 'NaN') {
            // 'NaN' parses as NaN which is indistinguishable from a failed parse.
            return { parsed: NaN, success: true };
        }
        var parsed = parseFloat(valueString);
        if (isNaN(parsed)) {
            return { success: false };
        }
        return { parsed: parsed, success: true };
    };
    return Param;
}());
exports.Param = Param;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js":
/*!**************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var SheetUtils = /** @class */ (function () {
    function SheetUtils() {
    }
    // This is a direct port from SheetSize.cs - SheetSizeFactory
    SheetUtils.getSheetSizeFromSizeConstraints = function (sizeConstraint) {
        var minWidth = sizeConstraint.minWidth, minHeight = sizeConstraint.minHeight, maxWidth = sizeConstraint.maxWidth, maxHeight = sizeConstraint.maxHeight;
        if (minHeight === 0 && minWidth === 0) {
            if (maxHeight === 0 && maxWidth === 0) {
                return {
                    behavior: Contract.SheetSizeBehavior.Automatic,
                };
            }
            return {
                behavior: Contract.SheetSizeBehavior.AtMost,
                maxSize: { width: maxWidth, height: maxHeight },
            };
        }
        if (maxHeight === 0 && maxWidth === 0) {
            return {
                behavior: Contract.SheetSizeBehavior.AtLeast,
                minSize: { width: minWidth, height: minHeight },
            };
        }
        if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
            return {
                behavior: Contract.SheetSizeBehavior.Exactly,
                minSize: { width: minWidth, height: minHeight },
                maxSize: { width: minWidth, height: minHeight },
            };
        }
        // 'Fit Width' for a DSD layout
        var isDsdLayout = minWidth === 0 && maxWidth === 0;
        return {
            behavior: Contract.SheetSizeBehavior.Range,
            minSize: { width: minWidth, height: minHeight },
            maxSize: { width: isDsdLayout ? 2147483647 : maxWidth, height: maxHeight },
        };
    };
    SheetUtils.createAutomaticSize = function () {
        var behavior = Contract.SheetSizeBehavior.Automatic;
        var minSize = { width: 0, height: 0 };
        var maxSize = { width: 0, height: 0 };
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetUtils.getPublishedSheetInfoByName = function (name, sheetInfos) {
        var sheetInfo = sheetInfos.find(function (sheet) { return sheet.name === name; });
        return sheetInfo;
    };
    SheetUtils.getSheetTypeEnum = function (internalSheetType) {
        var sheetType;
        switch (internalSheetType) {
            case api_internal_contract_js_1.SheetType.Worksheet: {
                sheetType = Contract.SheetType.Worksheet;
                break;
            }
            case api_internal_contract_js_1.SheetType.Dashboard: {
                sheetType = Contract.SheetType.Dashboard;
                break;
            }
            case api_internal_contract_js_1.SheetType.Story: {
                sheetType = Contract.SheetType.Story;
                break;
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
            }
        }
        return sheetType;
    };
    SheetUtils.isValidSheetSize = function (sizeObject) {
        return sizeObject.behavior !== undefined;
    };
    return SheetUtils;
}());
exports.SheetUtils = SheetUtils;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Deferred_1 = __webpack_require__(/*! ./Deferred */ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js");
/**
 * A Deferred wrapper class adding functionality to reject unresponsive promises after timeout
 *
 * this class handles two things:

 *    1. Adds timeout logic for deferred
 *    2. It blocks multiple calls from executing at the same time.
 *
 * @export
 * @class ShortLivedDeferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 *
 */
var ShortLivedDeferred = /** @class */ (function () {
    function ShortLivedDeferred(_timeoutInMilliseconds) {
        if (_timeoutInMilliseconds === void 0) { _timeoutInMilliseconds = Deferred_1.UnregisterTimeoutInMilliseconds; }
        this._timeoutInMilliseconds = _timeoutInMilliseconds;
    }
    ShortLivedDeferred.prototype.getNewPromiseOrThrowIfBusy = function () {
        var _this = this;
        if (this._deferred) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ApiExecutionError, 'This api cannot be executed till previous call is resolved.');
        }
        this._deferred = new Deferred_1.Deferred();
        this._timeoutId = setTimeout(function () {
            var error = new TableauError_1.TableauError(Contract.SharedErrorCodes.Timeout, "Api failed to complete in " + _this._timeoutInMilliseconds / 1000 + " seconds");
            _this.reject(error);
        }, this._timeoutInMilliseconds);
        return this._deferred.promise;
    };
    ShortLivedDeferred.prototype.resolve = function (response) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.resolve(response);
            this._deferred = undefined;
        }
    };
    ShortLivedDeferred.prototype.reject = function (error) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.reject(error);
            this._deferred = undefined;
        }
    };
    return ShortLivedDeferred;
}());
exports.ShortLivedDeferred = ShortLivedDeferred;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/VersionNumber.js":
/*!***********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/VersionNumber.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ./TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Represents the current version of the extensions, embedding
 * and extensions-api-types library
 */
var VersionNumber = /** @class */ (function () {
    // private constructor so everyone uses the singleton instance
    // build numbers have this form: M.m.f-pre.N
    function VersionNumber(versionString, isAlpha) {
        var partStr = versionString.split('-');
        this.build = this.getBuildNumber(partStr[1]);
        versionString = partStr[0];
        var parts = versionString.split('.').map(function (p) { return parseInt(p, 10); });
        if (parts.length !== 3) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Invalid version number: " + versionString);
        }
        this.major = parts[0];
        this.minor = parts[1];
        this.fix = parts[2];
        this.isAlpha = isAlpha;
    }
    VersionNumber.prototype.getBuildNumber = function (preReleaseString) {
        var noBuildNumber = -1;
        if (!preReleaseString) {
            return noBuildNumber;
        }
        // The preRelease string has this form: pre.N, but we don't depend on the actual string being 'pre'
        var partStr = preReleaseString.split('.');
        return partStr[1] ? parseInt(partStr[1], 10) : noBuildNumber;
    };
    Object.defineProperty(VersionNumber.prototype, "formattedValue", {
        get: function () {
            return this.major + "." + this.minor + "." + this.fix;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionNumber.prototype, "fullFormattedValue", {
        get: function () {
            return this.major + "." + this.minor + "." + this.fix + "-pre." + this.build;
        },
        enumerable: true,
        configurable: true
    });
    return VersionNumber;
}());
exports.VersionNumber = VersionNumber;


/***/ }),

/***/ "../api-shared-js/lib/src/VersionedExternalApiDispatcher.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/VersionedExternalApiDispatcher.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
/**
 * Implementation of the InternalApiDispatcher which supports upgrading and downgrading the input
 * internal contract to the version that this module is built against
 *
 * @class VersionedExternalApiDispatcher
 * @implements {InternalApiDispatcher}
 */
var VersionedExternalApiDispatcher = /** @class */ (function () {
    /**
     * Creates a new instance of the VersionedExternalApiDispatcher
     * We have multiple version converting dispatchers that work together.
     * If needed, the VersionedExternalApiDispatcher wraps either the InternalApiDispatcher (desktop)
     * or the CrossFrameDispatcher (server).
     * The Internal/CrossFrame dispatchers handle an updated platform with an older external library.
     * (The CrossFrameDispatcher sends messages across the frame, and it is handled by the PresLayerHandler.)
     * Meanwhile, the VersionedExternalApiDispatcher handles an updated external library with an older platform.
  
     * @param _apiDelegateDispatcher The delegate that does the actual work.
     * @param platformVersionNumber The version of the internal contract which the platform module is using.
     * This number will be used to figure out how to downgrade incoming commands and upgrade the results
     */
    function VersionedExternalApiDispatcher(_apiDelegateDispatcher, platformVersionNumber) {
        var _this = this;
        this._apiDelegateDispatcher = _apiDelegateDispatcher;
        this._versionConverter = api_internal_contract_js_1.CreateExternalCompatibleVersionConverter(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION, platformVersionNumber);
        this._notificationHandlers = [];
        _apiDelegateDispatcher.registerNotificationHandler(function (notification) {
            if (_this._notificationHandlers.length === 0) {
                return;
            }
            var upgradedNotification = _this._versionConverter.upgradeNotification(notification);
            _this._notificationHandlers.forEach(function (handler) {
                handler(upgradedNotification);
            });
        });
    }
    VersionedExternalApiDispatcher.needsVersionConverter = function (platformVersion) {
        // If our platform is less than external library version, then we need a converter
        return api_internal_contract_js_1.VersionLessThan(platformVersion, api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION);
    };
    VersionedExternalApiDispatcher.prototype.execute = function (verb, parameters) {
        var _this = this;
        try {
            var downgradeParameters = this._versionConverter.downgradeExecuteCall(verb, parameters);
            return this._apiDelegateDispatcher.execute(downgradeParameters.verb, downgradeParameters.parameters).then(function (response) {
                var upgradeResponse = _this._versionConverter.upgradeExecuteReturn(response, verb, parameters);
                return upgradeResponse;
            });
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    VersionedExternalApiDispatcher.prototype.registerNotificationHandler = function (handler) {
        this._notificationHandlers.push(handler);
    };
    VersionedExternalApiDispatcher.prototype.unregisterNotificationHandler = function (handler) {
        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
    };
    return VersionedExternalApiDispatcher;
}());
exports.VersionedExternalApiDispatcher = VersionedExternalApiDispatcher;


/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/index.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__["default"])
/* harmony export */ });
/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v1.js");
/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v3.js");
/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v4.js");
/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v5.js");
/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/nil.js");
/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/version.js");
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/parse.js");










/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/md5.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/md5.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/nil.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/nil.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/parse.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/parse.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js");


function parse(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/regex.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/regex.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/rng.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/rng.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ rng)
/* harmony export */ });
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/sha1.js":
/*!*******************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/sha1.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js":
/*!************************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js");

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/v1.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/v1.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js");

 // **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(b);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/v3.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/v3.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/md5.js");


var v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/v35.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/v35.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DNS: () => (/* binding */ DNS),
/* harmony export */   URL: () => (/* binding */ URL),
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js");
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/parse.js");



function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__["default"])(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/v4.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/v4.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/rng.js");
/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/stringify.js");



function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__["default"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__["default"])(rnds);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/v5.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/v5.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/v35.js");
/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/sha1.js");


var v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__["default"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js":
/*!***********************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/regex.js");


function validate(uuid) {
  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__["default"].test(uuid);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);

/***/ }),

/***/ "../api-shared-js/node_modules/uuid/dist/esm-browser/version.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/node_modules/uuid/dist/esm-browser/version.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ "../api-shared-js/node_modules/uuid/dist/esm-browser/validate.js");


function version(uuid) {
  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__["default"])(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);

/***/ }),

/***/ "../api-internal-contract-js/lib/internal-contract-version.json":
/*!**********************************************************************!*\
  !*** ../api-internal-contract-js/lib/internal-contract-version.json ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"major":1,"minor":162,"fix":0}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
var exports = __webpack_exports__;
/*!**********************************!*\
  !*** ./lib/src/ExtensionsApi.js ***!
  \**********************************/

/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
// The following polyfills are needed for IE11
var api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
__webpack_require__(/*! core-js/es/array/find */ "../../node_modules/core-js/es/array/find.js");
__webpack_require__(/*! core-js/es/array/from */ "../../node_modules/core-js/es/array/from.js");
__webpack_require__(/*! core-js/es/map */ "../../node_modules/core-js/es/map/index.js");
__webpack_require__(/*! core-js/es/number/is-integer */ "../../node_modules/core-js/es/number/is-integer.js");
__webpack_require__(/*! core-js/es/number/is-nan */ "../../node_modules/core-js/es/number/is-nan.js");
__webpack_require__(/*! core-js/es/number/parse-float */ "../../node_modules/core-js/es/number/parse-float.js");
__webpack_require__(/*! core-js/es/number/parse-int */ "../../node_modules/core-js/es/number/parse-int.js");
__webpack_require__(/*! core-js/es/object/assign */ "../../node_modules/core-js/es/object/assign.js");
__webpack_require__(/*! core-js/es/object/entries */ "../../node_modules/core-js/es/object/entries.js");
__webpack_require__(/*! core-js/es/object/set-prototype-of */ "../../node_modules/core-js/es/object/set-prototype-of.js");
__webpack_require__(/*! core-js/es/promise */ "../../node_modules/core-js/es/promise/index.js");
// Due to the way we configured webpack, we should be exporting things which will be under
// a global variable called "tableau". Export everything we want to be visible under tableau
// from this file.
var ExtensionsImpl_1 = __webpack_require__(/*! ./ExtensionsApi/Impl/ExtensionsImpl */ "./lib/src/ExtensionsApi/Impl/ExtensionsImpl.js");
var Extensions_1 = __webpack_require__(/*! ./ExtensionsApi/Namespaces/Extensions */ "./lib/src/ExtensionsApi/Namespaces/Extensions.js");
var isAlpha = typeof VERSION_IS_ALPHA !== 'undefined' ? VERSION_IS_ALPHA : false;
api_shared_js_1.ApiVersion.SetVersionNumber( true ? "1.12.0-pre.15" : 0, isAlpha);
var extensionImpl = new ExtensionsImpl_1.ExtensionsImpl();
exports.extensions = new Extensions_1.Extensions(extensionImpl);
// Export Enums
// These show up under the tableau object. I.e. tableau.ExtensionContext.Server
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
exports.AnalyticsObjectType = api_external_contract_js_1.AnalyticsObjectType;
exports.AnnotationType = api_external_contract_js_1.AnnotationType;
exports.ClassNameKey = api_external_contract_js_1.ClassNameKey;
exports.ColumnType = api_external_contract_js_1.ColumnType;
exports.DashboardLayoutChange = api_external_contract_js_1.DashboardLayoutChange;
exports.DashboardObjectType = api_external_contract_js_1.DashboardObjectType;
exports.DashboardObjectVisibilityType = api_external_contract_js_1.DashboardObjectVisibilityType;
exports.DataType = api_external_contract_js_1.DataType;
exports.DateRangeType = api_external_contract_js_1.DateRangeType;
exports.DialogStyle = api_external_contract_js_1.DialogStyle;
exports.EncodingType = api_external_contract_js_1.EncodingType;
exports.ErrorCodes = api_external_contract_js_1.ErrorCodes;
exports.ExtensionContext = api_external_contract_js_1.ExtensionContext;
exports.ExtensionMode = api_external_contract_js_1.ExtensionMode;
exports.FieldAggregationType = api_external_contract_js_1.FieldAggregationType;
exports.FieldRoleType = api_external_contract_js_1.FieldRoleType;
exports.FilterDomainType = api_external_contract_js_1.FilterDomainType;
exports.FilterNullOption = api_external_contract_js_1.FilterNullOption;
exports.FilterType = api_external_contract_js_1.FilterType;
exports.FilterUpdateType = api_external_contract_js_1.FilterUpdateType;
exports.HierarchicalLevelSelectionState = api_external_contract_js_1.HierarchicalLevelSelectionState;
exports.IncludeDataValuesOption = api_external_contract_js_1.IncludeDataValuesOption;
exports.MarkType = api_external_contract_js_1.MarkType;
exports.ParameterValueType = api_external_contract_js_1.ParameterValueType;
exports.PeriodType = api_external_contract_js_1.PeriodType;
exports.QuickTableCalcType = api_external_contract_js_1.QuickTableCalcType;
exports.ReplaySpeedType = api_external_contract_js_1.ReplaySpeedType;
exports.SelectOptions = api_external_contract_js_1.SelectOptions;
exports.SelectionUpdateType = api_external_contract_js_1.SelectionUpdateType;
exports.SheetType = api_external_contract_js_1.SheetType;
exports.SortDirection = api_external_contract_js_1.SortDirection;
exports.TableauEventType = api_external_contract_js_1.TableauEventType;
exports.TrendLineModelType = api_external_contract_js_1.TrendLineModelType;
exports.VizImageEncodingType = api_external_contract_js_1.VizImageEncodingType;
exports.VizImagePaletteType = api_external_contract_js_1.VizImagePaletteType;
exports.VizImageSizeSettingAlignmentType = api_external_contract_js_1.VizImageSizeSettingAlignmentType;
exports.VizImageSizeSettingType = api_external_contract_js_1.VizImageSizeSettingType;
exports.VizImageSortDirectionType = api_external_contract_js_1.VizImageSortDirectionType;
exports.ZoneVisibilityType = api_external_contract_js_1.ZoneVisibilityType;

})();

window.tableau = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,